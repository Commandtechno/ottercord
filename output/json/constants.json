[
  {
    "tree": [
      "application-resource",
      "application-resource",
      "application-resource",
      "application-resource",
      "application-object",
      "application-object",
      "application-object",
      "application-object",
      "application-object-application-structure",
      "application-object-application-structure",
      "application-object-application-structure",
      "application-object-application-structure"
    ],
    "name": "Application Structure",
    "props": [
      {
        "name": "id",
        "description": "the id of the app",
        "value": "snowflake"
      },
      {
        "name": "name",
        "description": "the name of the app",
        "value": "string"
      },
      {
        "name": "icon",
        "description": "the icon hash of the app",
        "value": "?string"
      },
      {
        "name": "description",
        "description": "the description of the app",
        "value": "string"
      },
      {
        "name": "rpc_origins?",
        "description": "an array of rpc origin urls, if rpc is enabled",
        "value": "array of strings"
      },
      {
        "name": "bot_public",
        "description": "when false only app owner can join the app's bot to guilds",
        "value": "boolean"
      },
      {
        "name": "bot_require_code_grant",
        "description": "when true the app's bot will only join upon completion of the full oauth2 code grant flow",
        "value": "boolean"
      },
      {
        "name": "terms_of_service_url?",
        "description": "the url of the app's terms of service",
        "value": "string"
      },
      {
        "name": "privacy_policy_url?",
        "description": "the url of the app's privacy policy",
        "value": "string"
      },
      {
        "name": "owner?",
        "description": "partial user object containing info on the owner of the application",
        "value": "partial user object"
      },
      {
        "name": "summary",
        "description": "if this application is a game sold on Discord, this field will be the summary field for the store page of its primary sku",
        "value": "string"
      },
      {
        "name": "verify_key",
        "description": "the hex encoded key for verification in interactions and the GameSDK's GetTicket",
        "value": "string"
      },
      {
        "name": "team",
        "description": "if the application belongs to a team, this will be a list of the members of that team",
        "value": "?team object"
      },
      {
        "name": "guild_id?",
        "description": "if this application is a game sold on Discord, this field will be the guild to which it has been linked",
        "value": "snowflake"
      },
      {
        "name": "primary_sku_id?",
        "description": "if this application is a game sold on Discord, this field will be the id of the \"Game SKU\" that is created, if exists",
        "value": "snowflake"
      },
      {
        "name": "slug?",
        "description": "if this application is a game sold on Discord, this field will be the URL slug that links to the store page",
        "value": "string"
      },
      {
        "name": "cover_image?",
        "description": "the application's default rich presence invite cover image hash",
        "value": "string"
      },
      {
        "name": "flags?",
        "description": "the application's public flags",
        "value": "integer"
      }
    ]
  },
  {
    "tree": [
      "application-object-example-application-object",
      "application-object-application-flags",
      "application-object-application-flags",
      "application-object-application-flags",
      "application-object-application-flags",
      "audit-logs-resource",
      "audit-logs-resource",
      "audit-logs-resource",
      "audit-logs-resource",
      "audit-logs",
      "audit-logs",
      "audit-logs",
      "audit-logs",
      "audit-log-object",
      "audit-log-object",
      "audit-log-object",
      "audit-log-object",
      "audit-log-object-audit-log-structure",
      "audit-log-object-audit-log-structure",
      "audit-log-object-audit-log-structure",
      "audit-log-object-audit-log-structure"
    ],
    "name": "Audit Log Structure",
    "description": "Threads referenced in THREAD_CREATE and THREAD_UPDATE events are included in the threads map, since archived threads might not be kept in memory by clients.",
    "props": [
      {
        "name": "audit_log_entries",
        "description": "list of audit log entries",
        "value": "array of audit log entry objects"
      },
      {
        "name": "guild_scheduled_events",
        "description": "list of guild scheduled events found in the audit log",
        "value": "array of guild scheduled event objects"
      },
      {
        "name": "integrations",
        "description": "list of partial integration objects",
        "value": "array of partial integration objects"
      },
      {
        "name": "threads",
        "description": "list of threads found in the audit log",
        "value": "array of channel objects"
      },
      {
        "name": "users",
        "description": "list of users found in the audit log",
        "value": "array of user objects"
      },
      {
        "name": "webhooks",
        "description": "list of webhooks found in the audit log",
        "value": "array of webhook objects"
      }
    ]
  },
  {
    "tree": [
      "audit-log-object-example-partial-integration-object",
      "audit-log-entry-object",
      "audit-log-entry-object",
      "audit-log-entry-object",
      "audit-log-entry-object",
      "audit-log-entry-object-audit-log-entry-structure",
      "audit-log-entry-object-audit-log-entry-structure",
      "audit-log-entry-object-audit-log-entry-structure",
      "audit-log-entry-object-audit-log-entry-structure"
    ],
    "name": "Audit Log Entry Structure",
    "props": [
      {
        "name": "target_id",
        "description": "id of the affected entity (webhook, user, role, etc.)",
        "value": "?string"
      },
      {
        "name": "changes?",
        "description": "changes made to the target_id",
        "value": "array of audit log change objects"
      },
      {
        "name": "user_id",
        "description": "the user who made the changes",
        "value": "?snowflake"
      },
      {
        "name": "id",
        "description": "id of the entry",
        "value": "snowflake"
      },
      {
        "name": "action_type",
        "description": "type of action that occurred",
        "value": "audit log event"
      },
      {
        "name": "options?",
        "description": "additional info for certain action types",
        "value": "optional audit entry info"
      },
      {
        "name": "reason?",
        "description": "the reason for the change (0-512 characters)",
        "value": "string"
      }
    ]
  },
  {
    "tree": [
      "audit-log-entry-object-audit-log-events"
    ],
    "name": "Audit Log Events",
    "props": [
      {
        "name": "GUILD_UPDATE",
        "value": 1
      },
      {
        "name": "CHANNEL_CREATE",
        "value": 10
      },
      {
        "name": "CHANNEL_UPDATE",
        "value": 11
      },
      {
        "name": "CHANNEL_DELETE",
        "value": 12
      },
      {
        "name": "CHANNEL_OVERWRITE_CREATE",
        "value": 13
      },
      {
        "name": "CHANNEL_OVERWRITE_UPDATE",
        "value": 14
      },
      {
        "name": "CHANNEL_OVERWRITE_DELETE",
        "value": 15
      },
      {
        "name": "MEMBER_KICK",
        "value": 20
      },
      {
        "name": "MEMBER_PRUNE",
        "value": 21
      },
      {
        "name": "MEMBER_BAN_ADD",
        "value": 22
      },
      {
        "name": "MEMBER_BAN_REMOVE",
        "value": 23
      },
      {
        "name": "MEMBER_UPDATE",
        "value": 24
      },
      {
        "name": "MEMBER_ROLE_UPDATE",
        "value": 25
      },
      {
        "name": "MEMBER_MOVE",
        "value": 26
      },
      {
        "name": "MEMBER_DISCONNECT",
        "value": 27
      },
      {
        "name": "BOT_ADD",
        "value": 28
      },
      {
        "name": "ROLE_CREATE",
        "value": 30
      },
      {
        "name": "ROLE_UPDATE",
        "value": 31
      },
      {
        "name": "ROLE_DELETE",
        "value": 32
      },
      {
        "name": "INVITE_CREATE",
        "value": 40
      },
      {
        "name": "INVITE_UPDATE",
        "value": 41
      },
      {
        "name": "INVITE_DELETE",
        "value": 42
      },
      {
        "name": "WEBHOOK_CREATE",
        "value": 50
      },
      {
        "name": "WEBHOOK_UPDATE",
        "value": 51
      },
      {
        "name": "WEBHOOK_DELETE",
        "value": 52
      },
      {
        "name": "EMOJI_CREATE",
        "value": 60
      },
      {
        "name": "EMOJI_UPDATE",
        "value": 61
      },
      {
        "name": "EMOJI_DELETE",
        "value": 62
      },
      {
        "name": "MESSAGE_DELETE",
        "value": 72
      },
      {
        "name": "MESSAGE_BULK_DELETE",
        "value": 73
      },
      {
        "name": "MESSAGE_PIN",
        "value": 74
      },
      {
        "name": "MESSAGE_UNPIN",
        "value": 75
      },
      {
        "name": "INTEGRATION_CREATE",
        "value": 80
      },
      {
        "name": "INTEGRATION_UPDATE",
        "value": 81
      },
      {
        "name": "INTEGRATION_DELETE",
        "value": 82
      },
      {
        "name": "STAGE_INSTANCE_CREATE",
        "value": 83
      },
      {
        "name": "STAGE_INSTANCE_UPDATE",
        "value": 84
      },
      {
        "name": "STAGE_INSTANCE_DELETE",
        "value": 85
      },
      {
        "name": "STICKER_CREATE",
        "value": 90
      },
      {
        "name": "STICKER_UPDATE",
        "value": 91
      },
      {
        "name": "STICKER_DELETE",
        "value": 92
      },
      {
        "name": "GUILD_SCHEDULED_EVENT_CREATE",
        "value": 100
      },
      {
        "name": "GUILD_SCHEDULED_EVENT_UPDATE",
        "value": 101
      },
      {
        "name": "GUILD_SCHEDULED_EVENT_DELETE",
        "value": 102
      },
      {
        "name": "THREAD_CREATE",
        "value": 110
      },
      {
        "name": "THREAD_UPDATE",
        "value": 111
      },
      {
        "name": "THREAD_DELETE",
        "value": 112
      }
    ]
  },
  {
    "tree": [],
    "name": "Optional Audit Entry Info",
    "props": [
      {
        "name": "channel_id",
        "description": "channel in which the entities were targeted",
        "value": "snowflake"
      },
      {
        "name": "count",
        "description": "number of entities that were targeted",
        "value": "string"
      },
      {
        "name": "delete_member_days",
        "description": "number of days after which inactive members were kicked",
        "value": "string"
      },
      {
        "name": "id",
        "description": "id of the overwritten entity",
        "value": "snowflake"
      },
      {
        "name": "members_removed",
        "description": "number of members removed by the prune",
        "value": "string"
      },
      {
        "name": "message_id",
        "description": "id of the message that was targeted",
        "value": "snowflake"
      },
      {
        "name": "role_name",
        "description": "name of the role if type is \"0\" (not present if type is \"1\")",
        "value": "string"
      },
      {
        "name": "type",
        "description": "type of overwritten entity - \"0\" for \"role\" or \"1\" for \"member",
        "value": "string"
      }
    ]
  },
  {
    "tree": [],
    "name": "Audit Log Change Structure",
    "props": [
      {
        "name": "new_value?",
        "description": "new value of the key",
        "value": "mixed"
      },
      {
        "name": "old_value?",
        "description": "old value of the key",
        "value": "mixed"
      },
      {
        "name": "key",
        "description": "name of audit log change key",
        "value": "string"
      }
    ]
  },
  {
    "tree": [],
    "name": "Audit Log Change Key",
    "props": [
      {
        "name": "afk_channel_id",
        "description": "afk channel changed",
        "value": "guild"
      },
      {
        "name": "afk_timeout",
        "description": "afk timeout duration changed",
        "value": "guild"
      },
      {
        "name": "allow",
        "description": "a permission on a text or voice channel was allowed for a role",
        "value": "role"
      },
      {
        "name": "application_id",
        "description": "application id of the added or removed webhook or bot",
        "value": "channel"
      },
      {
        "name": "archived",
        "description": "thread is now archived/unarchived",
        "value": "thread"
      },
      {
        "name": "asset",
        "description": "empty string",
        "value": "sticker"
      },
      {
        "name": "auto_archive_duration",
        "description": "auto archive duration changed",
        "value": "thread"
      },
      {
        "name": "available",
        "description": "availability of sticker changed",
        "value": "sticker"
      },
      {
        "name": "avatar_hash",
        "description": "user avatar changed",
        "value": "user"
      },
      {
        "name": "banner_hash",
        "description": "guild banner changed",
        "value": "guild"
      },
      {
        "name": "bitrate",
        "description": "voice channel bitrate changed",
        "value": "channel"
      },
      {
        "name": "channel_id",
        "description": "channel for invite code or guild scheduled event changed",
        "value": "invite or guild scheduled event"
      },
      {
        "name": "code",
        "description": "invite code changed",
        "value": "invite"
      },
      {
        "name": "color",
        "description": "role color changed",
        "value": "role"
      },
      {
        "name": "communication_disabled_until",
        "description": "member timeout state changed",
        "value": "member"
      },
      {
        "name": "deaf",
        "description": "user server deafened/undeafened",
        "value": "member"
      },
      {
        "name": "default_auto_archive_duration",
        "description": "default auto archive duration for newly created threads changed",
        "value": "channel"
      },
      {
        "name": "default_message_notifications",
        "description": "default message notification level changed",
        "value": "guild"
      },
      {
        "name": "deny",
        "description": "a permission on a text or voice channel was denied for a role",
        "value": "role"
      },
      {
        "name": "description",
        "description": "description changed",
        "value": "guild, sticker, or guild scheduled event"
      },
      {
        "name": "discovery_splash_hash",
        "description": "discovery splash changed",
        "value": "guild"
      },
      {
        "name": "enable_emoticons",
        "description": "integration emoticons enabled/disabled",
        "value": "integration"
      },
      {
        "name": "entity_type",
        "description": "entity type of guild scheduled event was changed",
        "value": "guild scheduled event"
      },
      {
        "name": "expire_behavior",
        "description": "integration expiring subscriber behavior changed",
        "value": "integration"
      },
      {
        "name": "expire_grace_period",
        "description": "integration expire grace period changed",
        "value": "integration"
      },
      {
        "name": "explicit_content_filter",
        "description": "change in whose messages are scanned and deleted for explicit content in the server",
        "value": "guild"
      },
      {
        "name": "format_type",
        "description": "format type of sticker changed",
        "value": "sticker"
      },
      {
        "name": "guild_id",
        "description": "guild sticker is in changed",
        "value": "sticker"
      },
      {
        "name": "hoist",
        "description": "role is now displayed/no longer displayed separate from online users",
        "value": "role"
      },
      {
        "name": "icon_hash",
        "description": "icon changed",
        "value": "guild or role"
      },
      {
        "name": "id",
        "description": "the id of the changed entity - sometimes used in conjunction with other keys",
        "value": "any"
      },
      {
        "name": "invitable",
        "description": "private thread is now invitable/uninvitable",
        "value": "thread"
      },
      {
        "name": "inviter_id",
        "description": "person who created invite code changed",
        "value": "invite"
      },
      {
        "name": "location",
        "description": "change in channel id for guild scheduled event",
        "value": "guild scheduled event"
      },
      {
        "name": "locked",
        "description": "thread is now locked/unlocked",
        "value": "thread"
      },
      {
        "name": "max_age",
        "description": "how long invite code lasts changed",
        "value": "invite"
      },
      {
        "name": "max_uses",
        "description": "change to max number of times invite code can be used",
        "value": "invite"
      },
      {
        "name": "mentionable",
        "description": "role is now mentionable/unmentionable",
        "value": "role"
      },
      {
        "name": "mfa_level",
        "description": "two-factor auth requirement changed",
        "value": "guild"
      },
      {
        "name": "mute",
        "description": "user server muted/unmuted",
        "value": "member"
      },
      {
        "name": "name",
        "description": "name changed",
        "value": "any"
      },
      {
        "name": "nick",
        "description": "user nickname changed",
        "value": "member"
      },
      {
        "name": "nsfw",
        "description": "channel nsfw restriction changed",
        "value": "channel"
      },
      {
        "name": "owner_id",
        "description": "owner changed",
        "value": "guild"
      },
      {
        "name": "permission_overwrites",
        "description": "permissions on a channel changed",
        "value": "channel"
      },
      {
        "name": "permissions",
        "description": "permissions for a role changed",
        "value": "role"
      },
      {
        "name": "position",
        "description": "text or voice channel position changed",
        "value": "channel"
      },
      {
        "name": "preferred_locale",
        "description": "preferred locale changed",
        "value": "guild"
      },
      {
        "name": "privacy_level",
        "description": "privacy level of the stage instance changed",
        "value": "stage instance or guild scheduled event"
      },
      {
        "name": "prune_delete_days",
        "description": "change in number of days after which inactive and role-unassigned members are kicked",
        "value": "guild"
      },
      {
        "name": "public_updates_channel_id",
        "description": "id of the public updates channel changed",
        "value": "guild"
      },
      {
        "name": "rate_limit_per_user",
        "description": "amount of seconds a user has to wait before sending another message changed",
        "value": "channel"
      },
      {
        "name": "region",
        "description": "region changed",
        "value": "guild"
      },
      {
        "name": "rules_channel_id",
        "description": "id of the rules channel changed",
        "value": "guild"
      },
      {
        "name": "splash_hash",
        "description": "invite splash page artwork changed",
        "value": "guild"
      },
      {
        "name": "status",
        "description": "status of guild scheduled event was changed",
        "value": "guild scheduled event"
      },
      {
        "name": "system_channel_id",
        "description": "id of the system channel changed",
        "value": "guild"
      },
      {
        "name": "tags",
        "description": "related emoji of sticker changed",
        "value": "sticker"
      },
      {
        "name": "temporary",
        "description": "invite code is temporary/never expires",
        "value": "invite"
      },
      {
        "name": "topic",
        "description": "text channel topic or stage instance topic changed",
        "value": "channel or stage instance"
      },
      {
        "name": "type",
        "description": "type of entity created",
        "value": "any"
      },
      {
        "name": "unicode_emoji",
        "description": "role unicode emoji changed",
        "value": "role"
      },
      {
        "name": "user_limit",
        "description": "new user limit in a voice channel",
        "value": "voice channel"
      },
      {
        "name": "uses",
        "description": "number of times invite code used changed",
        "value": "invite"
      },
      {
        "name": "vanity_url_code",
        "description": "guild invite vanity url changed",
        "value": "guild"
      },
      {
        "name": "verification_level",
        "description": "required verification level changed",
        "value": "guild"
      },
      {
        "name": "widget_channel_id",
        "description": "channel id of the server widget changed",
        "value": "guild"
      },
      {
        "name": "widget_enabled",
        "description": "server widget enabled/disable",
        "value": "guild"
      },
      {
        "name": "$add",
        "description": "new role added",
        "value": "guild"
      },
      {
        "name": "$remove",
        "description": "role removed",
        "value": "guild"
      }
    ]
  },
  {
    "tree": [
      "get-guild-audit-log",
      "get-guild-audit-log",
      "get-guild-audit-log",
      "get-guild-audit-log",
      "get-guild-audit-log-query-string-params",
      "channels-resource",
      "channels-resource",
      "channels-resource",
      "channels-resource",
      "channel-object",
      "channel-object",
      "channel-object",
      "channel-object",
      "channel-object-channel-structure",
      "channel-object-channel-structure",
      "channel-object-channel-structure",
      "channel-object-channel-structure"
    ],
    "name": "Channel Structure",
    "description": "rate_limit_per_user also applies to thread creation. Users can send one message and create one thread during each rate_limit_per_user interval.",
    "props": [
      {
        "name": "id",
        "description": "the id of this channel",
        "value": "snowflake"
      },
      {
        "name": "type",
        "description": "the type of channel",
        "value": "integer"
      },
      {
        "name": "guild_id?",
        "description": "the id of the guild (may be missing for some channel objects received over gateway guild dispatches)",
        "value": "snowflake"
      },
      {
        "name": "position?",
        "description": "sorting position of the channel",
        "value": "integer"
      },
      {
        "name": "permission_overwrites?",
        "description": "explicit permission overwrites for members and roles",
        "value": "array of overwrite objects"
      },
      {
        "name": "name?",
        "description": "the name of the channel (1-100 characters)",
        "value": "string"
      },
      {
        "name": "topic?",
        "description": "the channel topic (0-1024 characters)",
        "value": "?string"
      },
      {
        "name": "nsfw?",
        "description": "whether the channel is nsfw",
        "value": "boolean"
      },
      {
        "name": "last_message_id?",
        "description": "the id of the last message sent in this channel (may not point to an existing or valid message)",
        "value": "?snowflake"
      },
      {
        "name": "bitrate?",
        "description": "the bitrate (in bits) of the voice channel",
        "value": "integer"
      },
      {
        "name": "user_limit?",
        "description": "the user limit of the voice channel",
        "value": "integer"
      },
      {
        "name": "rate_limit_per_user?",
        "description": "amount of seconds a user has to wait before sending another message (0-21600); bots, as well as users with the permission manage_messages or manage_channel, are unaffected",
        "value": "integer"
      },
      {
        "name": "recipients?",
        "description": "the recipients of the DM",
        "value": "array of user objects"
      },
      {
        "name": "icon?",
        "description": "icon hash of the group DM",
        "value": "?string"
      },
      {
        "name": "owner_id?",
        "description": "id of the creator of the group DM or thread",
        "value": "snowflake"
      },
      {
        "name": "application_id?",
        "description": "application id of the group DM creator if it is bot-created",
        "value": "snowflake"
      },
      {
        "name": "parent_id?",
        "description": "for guild channels: id of the parent category for a channel (each parent category can contain up to 50 channels), for threads: id of the text channel this thread was created",
        "value": "?snowflake"
      },
      {
        "name": "last_pin_timestamp?",
        "description": "when the last pinned message was pinned. This may be null in events such as GUILD_CREATE when a message is not pinned.",
        "value": "?ISO8601 timestamp"
      },
      {
        "name": "rtc_region?",
        "description": "voice region id for the voice channel, automatic when set to null",
        "value": "?string"
      },
      {
        "name": "video_quality_mode?",
        "description": "the camera video quality mode of the voice channel, 1 when not present",
        "value": "integer"
      },
      {
        "name": "message_count?",
        "description": "an approximate count of messages in a thread, stops counting at 50",
        "value": "integer"
      },
      {
        "name": "member_count?",
        "description": "an approximate count of users in a thread, stops counting at 50",
        "value": "integer"
      },
      {
        "name": "thread_metadata?",
        "description": "thread-specific fields not needed by other channels",
        "value": "a thread metadata object"
      },
      {
        "name": "member?",
        "description": "thread member object for the current user, if they have joined the thread, only included on certain API endpoints",
        "value": "a thread member object"
      },
      {
        "name": "default_auto_archive_duration?",
        "description": "default duration that the clients (not the API) will use for newly created threads, in minutes, to automatically archive the thread after recent activity, can be set to: 60, 1440, 4320, 10080",
        "value": "integer"
      },
      {
        "name": "permissions?",
        "description": "computed permissions for the invoking user in the channel, including overwrites, only included when part of the resolved data received on a slash command interaction",
        "value": "string"
      }
    ]
  },
  {
    "tree": [
      "channel-object-channel-types"
    ],
    "name": "Channel Types",
    "props": [
      {
        "name": "GUILD_TEXT",
        "description": "a text channel within a server",
        "value": 0
      },
      {
        "name": "DM",
        "description": "a direct message between users",
        "value": 1
      },
      {
        "name": "GUILD_VOICE",
        "description": "a voice channel within a server",
        "value": 2
      },
      {
        "name": "GROUP_DM",
        "description": "a direct message between multiple users",
        "value": 3
      },
      {
        "name": "GUILD_CATEGORY",
        "description": "an organizational category that contains up to 50 channels",
        "value": 4
      },
      {
        "name": "GUILD_NEWS",
        "description": "a channel that users can follow and crosspost into their own server",
        "value": 5
      },
      {
        "name": "GUILD_STORE",
        "description": "a channel in which game developers can sell their game on Discord",
        "value": 6
      },
      {
        "name": "GUILD_NEWS_THREAD",
        "description": "a temporary sub-channel within a GUILD_NEWS channel",
        "value": 10
      },
      {
        "name": "GUILD_PUBLIC_THREAD",
        "description": "a temporary sub-channel within a GUILD_TEXT channel",
        "value": 11
      },
      {
        "name": "GUILD_PRIVATE_THREAD",
        "description": "a temporary sub-channel within a GUILD_TEXT channel that is only viewable by those invited and those with the MANAGE_THREADS permission",
        "value": 12
      },
      {
        "name": "GUILD_STAGE_VOICE",
        "description": "a voice channel for hosting events with an audience",
        "value": 13
      }
    ]
  },
  {
    "tree": [],
    "name": "Video Quality Modes",
    "props": [
      {
        "name": "AUTO",
        "description": "Discord chooses the quality for optimal performance",
        "value": 1
      },
      {
        "name": "FULL",
        "description": "720p",
        "value": 2
      }
    ]
  },
  {
    "tree": [
      "message-object-message-structure",
      "message-object-message-structure"
    ],
    "name": "Message Structure",
    "description": "This field is only returned for messages with a type of 19 (REPLY) or 21 (THREAD_STARTER_MESSAGE). If the message is a reply but the referenced_message field is not present, the backend did not attempt to fetch the message that was being replied to, so its state is unknown. If the field exists but is null, the referenced message was deleted.",
    "props": [
      {
        "name": "id",
        "description": "id of the message",
        "value": "snowflake"
      },
      {
        "name": "channel_id",
        "description": "id of the channel the message was sent in",
        "value": "snowflake"
      },
      {
        "name": "guild_id?",
        "description": "id of the guild the message was sent in",
        "value": "snowflake"
      },
      {
        "name": "author",
        "description": "the author of this message (not guaranteed to be a valid user, see below)",
        "value": "user object"
      },
      {
        "name": "member?",
        "description": "member properties for this message's author",
        "value": "partial guild member object"
      },
      {
        "name": "content",
        "description": "contents of the message",
        "value": "string"
      },
      {
        "name": "timestamp",
        "description": "when this message was sent",
        "value": "ISO8601 timestamp"
      },
      {
        "name": "edited_timestamp",
        "description": "when this message was edited (or null if never)",
        "value": "?ISO8601 timestamp"
      },
      {
        "name": "tts",
        "description": "whether this was a TTS message",
        "value": "boolean"
      },
      {
        "name": "mention_everyone",
        "description": "whether this message mentions everyone",
        "value": "boolean"
      },
      {
        "name": "mentions",
        "description": "users specifically mentioned in the message",
        "value": "array of user objects, with an additional partial member field"
      },
      {
        "name": "mention_roles",
        "description": "roles specifically mentioned in this message",
        "value": "array of role object ids"
      },
      {
        "name": "mention_channels?",
        "description": "channels specifically mentioned in this message",
        "value": "array of channel mention objects"
      },
      {
        "name": "attachments",
        "description": "any attached files",
        "value": "array of attachment objects"
      },
      {
        "name": "embeds",
        "description": "any embedded content",
        "value": "array of embed objects"
      },
      {
        "name": "reactions?",
        "description": "reactions to the message",
        "value": "array of reaction objects"
      },
      {
        "name": "nonce?",
        "description": "used for validating a message was sent",
        "value": "integer or string"
      },
      {
        "name": "pinned",
        "description": "whether this message is pinned",
        "value": "boolean"
      },
      {
        "name": "webhook_id?",
        "description": "if the message is generated by a webhook, this is the webhook's id",
        "value": "snowflake"
      },
      {
        "name": "type",
        "description": "type of message",
        "value": "integer"
      },
      {
        "name": "activity?",
        "description": "sent with Rich Presence-related chat embeds",
        "value": "message activity object"
      },
      {
        "name": "application?",
        "description": "sent with Rich Presence-related chat embeds",
        "value": "partial application object"
      },
      {
        "name": "application_id?",
        "description": "if the message is an Interaction or application-owned webhook, this is the id of the application",
        "value": "snowflake"
      },
      {
        "name": "message_reference?",
        "description": "data showing the source of a crosspost, channel follow add, pin, or reply message",
        "value": "message reference object"
      },
      {
        "name": "flags?",
        "description": "message flags combined as a bitfield",
        "value": "integer"
      },
      {
        "name": "referenced_message?",
        "description": "the message associated with the message_reference",
        "value": "?message object"
      },
      {
        "name": "interaction?",
        "description": "sent if the message is a response to an Interaction",
        "value": "message interaction object"
      },
      {
        "name": "thread?",
        "description": "the thread that was started from this message, includes thread member object",
        "value": "channel object"
      },
      {
        "name": "components?",
        "description": "sent if the message contains components like buttons, action rows, or other interactive components",
        "value": "Array of message components"
      },
      {
        "name": "sticker_items?",
        "description": "sent if the message contains stickers",
        "value": "array of message sticker item objects"
      },
      {
        "name": "stickers?",
        "description": "Deprecated the stickers sent with the message",
        "value": "array of sticker objects"
      }
    ]
  },
  {
    "tree": [
      "message-object-message-types"
    ],
    "name": "Message Types",
    "props": [
      {
        "name": "DEFAULT",
        "value": 0
      },
      {
        "name": "RECIPIENT_ADD",
        "value": 1
      },
      {
        "name": "RECIPIENT_REMOVE",
        "value": 2
      },
      {
        "name": "CALL",
        "value": 3
      },
      {
        "name": "CHANNEL_NAME_CHANGE",
        "value": 4
      },
      {
        "name": "CHANNEL_ICON_CHANGE",
        "value": 5
      },
      {
        "name": "CHANNEL_PINNED_MESSAGE",
        "value": 6
      },
      {
        "name": "GUILD_MEMBER_JOIN",
        "value": 7
      },
      {
        "name": "USER_PREMIUM_GUILD_SUBSCRIPTION",
        "value": 8
      },
      {
        "name": "USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_1",
        "value": 9
      },
      {
        "name": "USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_2",
        "value": 10
      },
      {
        "name": "USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_3",
        "value": 11
      },
      {
        "name": "CHANNEL_FOLLOW_ADD",
        "value": 12
      },
      {
        "name": "GUILD_DISCOVERY_DISQUALIFIED",
        "value": 14
      },
      {
        "name": "GUILD_DISCOVERY_REQUALIFIED",
        "value": 15
      },
      {
        "name": "GUILD_DISCOVERY_GRACE_PERIOD_INITIAL_WARNING",
        "value": 16
      },
      {
        "name": "GUILD_DISCOVERY_GRACE_PERIOD_FINAL_WARNING",
        "value": 17
      },
      {
        "name": "THREAD_CREATED",
        "value": 18
      },
      {
        "name": "REPLY",
        "value": 19
      },
      {
        "name": "CHAT_INPUT_COMMAND",
        "value": 20
      },
      {
        "name": "THREAD_STARTER_MESSAGE",
        "value": 21
      },
      {
        "name": "GUILD_INVITE_REMINDER",
        "value": 22
      },
      {
        "name": "CONTEXT_MENU_COMMAND",
        "value": 23
      }
    ]
  },
  {
    "tree": [],
    "name": "Message Activity Structure",
    "props": [
      {
        "name": "type",
        "description": "type of message activity",
        "value": "integer"
      },
      {
        "name": "party_id?",
        "description": "party_id from a Rich Presence event",
        "value": "string"
      }
    ]
  },
  {
    "tree": [],
    "name": "Message Activity Types",
    "props": [
      {
        "name": "JOIN",
        "value": 1
      },
      {
        "name": "SPECTATE",
        "value": 2
      },
      {
        "name": "LISTEN",
        "value": 3
      },
      {
        "name": "JOIN_REQUEST",
        "value": 5
      }
    ]
  },
  {
    "tree": [],
    "name": "Message Flags",
    "props": [
      {
        "name": "CROSSPOSTED",
        "description": "this message has been published to subscribed channels (via Channel Following)",
        "value": 1
      },
      {
        "name": "IS_CROSSPOST",
        "description": "this message originated from a message in another channel (via Channel Following)",
        "value": 2
      },
      {
        "name": "SUPPRESS_EMBEDS",
        "description": "do not include any embeds when serializing this message",
        "value": 4
      },
      {
        "name": "SOURCE_MESSAGE_DELETED",
        "description": "the source message for this crosspost has been deleted (via Channel Following)",
        "value": 8
      },
      {
        "name": "URGENT",
        "description": "this message came from the urgent message system",
        "value": 16
      },
      {
        "name": "HAS_THREAD",
        "description": "this message has an associated thread, with the same id as the message",
        "value": 32
      },
      {
        "name": "EPHEMERAL",
        "description": "this message is only visible to the user who invoked the Interaction",
        "value": 64
      },
      {
        "name": "LOADING",
        "description": "this message is an Interaction Response and the bot is \"thinking",
        "value": 128
      },
      {
        "name": "FAILED_TO_MENTION_SOME_ROLES_IN_THREAD",
        "description": "this message failed to mention some roles and add their members to the thread",
        "value": 256
      }
    ]
  },
  {
    "tree": [
      "message-reference-object-message-reference-structure",
      "message-reference-object-message-reference-structure"
    ],
    "name": "Message Reference Structure",
    "description": "channel_id is optional when creating a reply, but will always be present when receiving an event/response that includes this data model.",
    "props": [
      {
        "name": "message_id?",
        "description": "id of the originating message",
        "value": "snowflake"
      },
      {
        "name": "channel_id?",
        "description": "id of the originating message's channel",
        "value": "snowflake"
      },
      {
        "name": "guild_id?",
        "description": "id of the originating message's guild",
        "value": "snowflake"
      },
      {
        "name": "fail_if_not_exists?",
        "description": "when sending, whether to error if the referenced message doesn't exist instead of sending as a normal (non-reply) message, default true",
        "value": "boolean"
      }
    ]
  },
  {
    "tree": [
      "message-types",
      "message-types-crosspost-messages",
      "message-types-crosspost-messages",
      "message-types-crosspost-messages",
      "message-types-crosspost-messages",
      "message-types-channel-follow-add-messages",
      "message-types-channel-follow-add-messages",
      "message-types-channel-follow-add-messages",
      "message-types-channel-follow-add-messages",
      "message-types-pin-messages",
      "message-types-pin-messages",
      "message-types-pin-messages",
      "message-types-pin-messages",
      "message-types-replies",
      "message-types-replies",
      "message-types-replies",
      "message-types-replies",
      "message-types-thread-starter-messsage",
      "message-types-thread-starter-messsage",
      "message-types-thread-starter-messsage",
      "message-types-thread-starter-messsage",
      "followed-channel-object",
      "followed-channel-object",
      "followed-channel-object",
      "followed-channel-object",
      "followed-channel-object-followed-channel-structure",
      "followed-channel-object-followed-channel-structure",
      "followed-channel-object-followed-channel-structure",
      "followed-channel-object-followed-channel-structure"
    ],
    "name": "Followed Channel Structure",
    "props": [
      {
        "name": "channel_id",
        "description": "source channel id",
        "value": "snowflake"
      },
      {
        "name": "webhook_id",
        "description": "created target webhook id",
        "value": "snowflake"
      }
    ]
  },
  {
    "tree": [
      "reaction-object-reaction-structure"
    ],
    "name": "Reaction Structure",
    "description": "See permissions for more information about the allow and deny fields.",
    "props": [
      {
        "name": "count",
        "description": "times this emoji has been used to react",
        "value": "integer"
      },
      {
        "name": "me",
        "description": "whether the current user reacted using this emoji",
        "value": "boolean"
      },
      {
        "name": "emoji",
        "description": "emoji information",
        "value": "partial emoji object"
      }
    ]
  },
  {
    "tree": [
      "overwrite-object-overwrite-structure"
    ],
    "name": "Overwrite Structure",
    "description": "The thread metadata object contains a number of thread-specific channel fields that are not needed by other channel types.",
    "props": [
      {
        "name": "id",
        "description": "role or user id",
        "value": "snowflake"
      },
      {
        "name": "type",
        "description": "either 0 (role) or 1 (member)",
        "value": "int"
      },
      {
        "name": "allow",
        "description": "permission bit set",
        "value": "string"
      },
      {
        "name": "deny",
        "description": "permission bit set",
        "value": "string"
      }
    ]
  },
  {
    "tree": [
      "thread-metadata-object-thread-metadata-structure"
    ],
    "name": "Thread Metadata Structure",
    "description": "A thread member is used to indicate whether a user has joined a thread or not.",
    "props": [
      {
        "name": "archived",
        "description": "whether the thread is archived",
        "value": "boolean"
      },
      {
        "name": "auto_archive_duration",
        "description": "duration in minutes to automatically archive the thread after recent activity, can be set to: 60, 1440, 4320, 10080",
        "value": "integer"
      },
      {
        "name": "archive_timestamp",
        "description": "timestamp when the thread's archive status was last changed, used for calculating recent activity",
        "value": "ISO8601 timestamp"
      },
      {
        "name": "locked",
        "description": "whether the thread is locked; when a thread is locked, only users with MANAGE_THREADS can unarchive it",
        "value": "boolean"
      },
      {
        "name": "invitable?",
        "description": "whether non-moderators can add other non-moderators to a thread; only available on private threads",
        "value": "boolean"
      },
      {
        "name": "create_timestamp?",
        "description": "timestamp when the thread was created; only populated for threads created after 2022-01-09",
        "value": "ISO8601 timestamp"
      }
    ]
  },
  {
    "tree": [
      "thread-member-object-thread-member-structure"
    ],
    "name": "Thread Member Structure",
    "description": "These fields are ommitted on the member sent within each thread in the GUILD_CREATE event",
    "props": [
      {
        "name": "id?",
        "description": "the id of the thread",
        "value": "snowflake"
      },
      {
        "name": "user_id?",
        "description": "the id of the user",
        "value": "snowflake"
      },
      {
        "name": "join_timestamp",
        "description": "the time the current user last joined the thread",
        "value": "ISO8601 timestamp"
      },
      {
        "name": "flags",
        "description": "any user-thread settings, currently only used for notifications",
        "value": "integer"
      }
    ]
  },
  {
    "tree": [
      "embed-object-embed-structure"
    ],
    "name": "Embed Structure",
    "props": [
      {
        "name": "title?",
        "description": "title of embed",
        "value": "string"
      },
      {
        "name": "type?",
        "description": "type of embed (always \"rich\" for webhook embeds)",
        "value": "string"
      },
      {
        "name": "description?",
        "description": "description of embed",
        "value": "string"
      },
      {
        "name": "url?",
        "description": "url of embed",
        "value": "string"
      },
      {
        "name": "timestamp?",
        "description": "timestamp of embed content",
        "value": "ISO8601 timestamp"
      },
      {
        "name": "color?",
        "description": "color code of the embed",
        "value": "integer"
      },
      {
        "name": "footer?",
        "description": "footer information",
        "value": "embed footer object"
      },
      {
        "name": "image?",
        "description": "image information",
        "value": "embed image object"
      },
      {
        "name": "thumbnail?",
        "description": "thumbnail information",
        "value": "embed thumbnail object"
      },
      {
        "name": "video?",
        "description": "video information",
        "value": "embed video object"
      },
      {
        "name": "provider?",
        "description": "provider information",
        "value": "embed provider object"
      },
      {
        "name": "author?",
        "description": "author information",
        "value": "embed author object"
      },
      {
        "name": "fields?",
        "description": "fields information",
        "value": "array of embed field objects"
      }
    ]
  },
  {
    "tree": [
      "embed-object-embed-types"
    ],
    "name": "Embed Types",
    "description": "Embed types are \"loosely defined\" and, for the most part, are not used by our clients for rendering. Embed attributes power what is rendered. Embed types should be considered deprecated and might be removed in a future API version.",
    "props": [
      {
        "name": "rich",
        "description": "generic embed rendered from embed attributes",
        "value": "rich"
      },
      {
        "name": "image",
        "description": "image embed",
        "value": "image"
      },
      {
        "name": "video",
        "description": "video embed",
        "value": "video"
      },
      {
        "name": "gifv",
        "description": "animated gif image embed rendered as a video embed",
        "value": "gifv"
      },
      {
        "name": "article",
        "description": "article embed",
        "value": "article"
      },
      {
        "name": "link",
        "description": "link embed",
        "value": "link"
      }
    ]
  },
  {
    "tree": [],
    "name": "Embed Thumbnail Structure",
    "props": [
      {
        "name": "url",
        "description": "source url of thumbnail (only supports http(s) and attachments)",
        "value": "string"
      },
      {
        "name": "proxy_url?",
        "description": "a proxied url of the thumbnail",
        "value": "string"
      },
      {
        "name": "height?",
        "description": "height of thumbnail",
        "value": "integer"
      },
      {
        "name": "width?",
        "description": "width of thumbnail",
        "value": "integer"
      }
    ]
  },
  {
    "tree": [],
    "name": "Embed Video Structure",
    "props": [
      {
        "name": "url?",
        "description": "source url of video",
        "value": "string"
      },
      {
        "name": "proxy_url?",
        "description": "a proxied url of the video",
        "value": "string"
      },
      {
        "name": "height?",
        "description": "height of video",
        "value": "integer"
      },
      {
        "name": "width?",
        "description": "width of video",
        "value": "integer"
      }
    ]
  },
  {
    "tree": [],
    "name": "Embed Image Structure",
    "props": [
      {
        "name": "url",
        "description": "source url of image (only supports http(s) and attachments)",
        "value": "string"
      },
      {
        "name": "proxy_url?",
        "description": "a proxied url of the image",
        "value": "string"
      },
      {
        "name": "height?",
        "description": "height of image",
        "value": "integer"
      },
      {
        "name": "width?",
        "description": "width of image",
        "value": "integer"
      }
    ]
  },
  {
    "tree": [],
    "name": "Embed Provider Structure",
    "props": [
      {
        "name": "name?",
        "description": "name of provider",
        "value": "string"
      },
      {
        "name": "url?",
        "description": "url of provider",
        "value": "string"
      }
    ]
  },
  {
    "tree": [],
    "name": "Embed Author Structure",
    "props": [
      {
        "name": "name",
        "description": "name of author",
        "value": "string"
      },
      {
        "name": "url?",
        "description": "url of author",
        "value": "string"
      },
      {
        "name": "icon_url?",
        "description": "url of author icon (only supports http(s) and attachments)",
        "value": "string"
      },
      {
        "name": "proxy_icon_url?",
        "description": "a proxied url of author icon",
        "value": "string"
      }
    ]
  },
  {
    "tree": [],
    "name": "Embed Footer Structure",
    "props": [
      {
        "name": "text",
        "description": "footer text",
        "value": "string"
      },
      {
        "name": "icon_url?",
        "description": "url of footer icon (only supports http(s) and attachments)",
        "value": "string"
      },
      {
        "name": "proxy_icon_url?",
        "description": "a proxied url of footer icon",
        "value": "string"
      }
    ]
  },
  {
    "tree": [],
    "name": "Embed Field Structure",
    "props": [
      {
        "name": "name",
        "description": "name of the field",
        "value": "string"
      },
      {
        "name": "value",
        "description": "value of the field",
        "value": "string"
      },
      {
        "name": "inline?",
        "description": "whether or not this field should display inline",
        "value": "boolean"
      }
    ]
  },
  {
    "tree": [],
    "name": "Attachment Structure",
    "description": "Ephemeral attachments will automatically be removed after a set period of time. Ephemeral attachments on messages are guaranteed to be available as long as the message itself exists.",
    "props": [
      {
        "name": "id",
        "description": "attachment id",
        "value": "snowflake"
      },
      {
        "name": "filename",
        "description": "name of file attached",
        "value": "string"
      },
      {
        "name": "description?",
        "description": "description for the file",
        "value": "string"
      },
      {
        "name": "content_type?",
        "description": "the attachment's media type",
        "value": "string"
      },
      {
        "name": "size",
        "description": "size of file in bytes",
        "value": "integer"
      },
      {
        "name": "url",
        "description": "source url of file",
        "value": "string"
      },
      {
        "name": "proxy_url",
        "description": "a proxied url of file",
        "value": "string"
      },
      {
        "name": "height?",
        "description": "height of file (if image)",
        "value": "?integer"
      },
      {
        "name": "width?",
        "description": "width of file (if image)",
        "value": "?integer"
      },
      {
        "name": "ephemeral?",
        "description": "whether this attachment is ephemeral",
        "value": "boolean"
      }
    ]
  },
  {
    "tree": [],
    "name": "Channel Mention Structure",
    "description": "The allowed mention field allows for more granular control over mentions without various hacks to the message content. This will always validate against message content to avoid phantom pings (e.g. to ping everyone, you must still have @everyone in the message content), and check against user/bot permissions.",
    "props": [
      {
        "name": "id",
        "description": "id of the channel",
        "value": "snowflake"
      },
      {
        "name": "guild_id",
        "description": "id of the guild containing the channel",
        "value": "snowflake"
      },
      {
        "name": "type",
        "description": "the type of channel",
        "value": "integer"
      },
      {
        "name": "name",
        "description": "the name of the channel",
        "value": "string"
      }
    ]
  },
  {
    "tree": [],
    "name": "Allowed Mention Types",
    "props": [
      {
        "name": "Role Mentions",
        "description": "Controls role mentions",
        "value": "roles"
      },
      {
        "name": "User Mentions",
        "description": "Controls user mentions",
        "value": "users"
      },
      {
        "name": "Everyone Mentions",
        "description": "Controls @everyone and @here mentions",
        "value": "everyone"
      }
    ]
  },
  {
    "tree": [],
    "name": "Allowed Mentions Structure",
    "props": [
      {
        "name": "parse",
        "description": "An array of allowed mention types to parse from the content.",
        "value": "array of allowed mention types"
      },
      {
        "name": "roles",
        "description": "Array of role_ids to mention (Max size of 100)",
        "value": "list of snowflakes"
      },
      {
        "name": "users",
        "description": "Array of user_ids to mention (Max size of 100)",
        "value": "list of snowflakes"
      },
      {
        "name": "replied_user",
        "description": "For replies, whether to mention the author of the message being replied to (default false)",
        "value": "boolean"
      }
    ]
  },
  {
    "tree": [
      "create-reaction",
      "create-reaction",
      "create-reaction",
      "delete-own-reaction",
      "delete-own-reaction",
      "delete-own-reaction",
      "delete-own-reaction",
      "delete-user-reaction",
      "delete-user-reaction",
      "delete-user-reaction",
      "delete-user-reaction",
      "get-reactions",
      "get-reactions",
      "get-reactions",
      "get-reactions",
      "get-reactions-query-string-params",
      "delete-all-reactions",
      "delete-all-reactions",
      "delete-all-reactions",
      "delete-all-reactions",
      "delete-all-reactions-for-emoji",
      "delete-all-reactions-for-emoji",
      "delete-all-reactions-for-emoji",
      "delete-all-reactions-for-emoji",
      "edit-message",
      "edit-message",
      "edit-message",
      "edit-message",
      "edit-message-json-form-params",
      "delete-message",
      "delete-message",
      "delete-message",
      "delete-message",
      "bulk-delete-messages",
      "bulk-delete-messages",
      "bulk-delete-messages",
      "bulk-delete-messages",
      "bulk-delete-messages-json-params",
      "edit-channel-permissions",
      "edit-channel-permissions",
      "edit-channel-permissions",
      "edit-channel-permissions",
      "edit-channel-permissions-json-params",
      "get-channel-invites",
      "get-channel-invites",
      "get-channel-invites",
      "get-channel-invites",
      "create-channel-invite",
      "create-channel-invite",
      "create-channel-invite",
      "create-channel-invite",
      "create-channel-invite-json-params",
      "delete-channel-permission",
      "delete-channel-permission",
      "delete-channel-permission",
      "delete-channel-permission",
      "follow-news-channel",
      "follow-news-channel",
      "follow-news-channel",
      "follow-news-channel",
      "follow-news-channel-json-params",
      "trigger-typing-indicator",
      "trigger-typing-indicator",
      "trigger-typing-indicator",
      "trigger-typing-indicator",
      "get-pinned-messages",
      "get-pinned-messages",
      "get-pinned-messages",
      "get-pinned-messages",
      "pin-message",
      "pin-message",
      "pin-message",
      "pin-message",
      "unpin-message",
      "unpin-message",
      "unpin-message",
      "unpin-message",
      "group-dm-add-recipient",
      "group-dm-add-recipient",
      "group-dm-add-recipient",
      "group-dm-add-recipient",
      "group-dm-add-recipient-json-params",
      "group-dm-remove-recipient",
      "group-dm-remove-recipient",
      "group-dm-remove-recipient",
      "group-dm-remove-recipient",
      "start-thread-with-message",
      "start-thread-with-message",
      "start-thread-with-message",
      "start-thread-with-message",
      "start-thread-with-message-json-params",
      "start-thread-without-message",
      "start-thread-without-message",
      "start-thread-without-message",
      "start-thread-without-message",
      "start-thread-without-message-json-params",
      "join-thread",
      "join-thread",
      "join-thread",
      "join-thread",
      "add-thread-member",
      "add-thread-member",
      "add-thread-member",
      "add-thread-member",
      "leave-thread",
      "leave-thread",
      "leave-thread",
      "leave-thread",
      "remove-thread-member",
      "remove-thread-member",
      "remove-thread-member",
      "remove-thread-member",
      "get-thread-member",
      "get-thread-member",
      "get-thread-member",
      "get-thread-member",
      "list-thread-members",
      "list-thread-members",
      "list-thread-members",
      "list-thread-members",
      "list-active-threads",
      "list-active-threads",
      "list-active-threads",
      "list-active-threads",
      "list-active-threads-response-body",
      "list-active-threads-response-body",
      "list-active-threads-response-body",
      "list-active-threads-response-body"
    ],
    "name": "Response Body",
    "props": [
      {
        "name": "threads",
        "description": "the active threads",
        "value": "array of channel objects"
      },
      {
        "name": "members",
        "description": "a thread member object for each returned thread the current user has joined",
        "value": "array of thread members objects"
      },
      {
        "name": "has_more",
        "description": "whether there are potentially additional threads that could be returned on a subsequent call",
        "value": "boolean"
      }
    ]
  },
  {
    "tree": [
      "list-public-archived-threads",
      "list-public-archived-threads",
      "list-public-archived-threads",
      "list-public-archived-threads-query-string-params",
      "list-public-archived-threads-response-body",
      "list-public-archived-threads-response-body",
      "list-public-archived-threads-response-body",
      "list-public-archived-threads-response-body"
    ],
    "name": "Response Body",
    "props": [
      {
        "name": "threads",
        "description": "the public, archived threads",
        "value": "array of channel objects"
      },
      {
        "name": "members",
        "description": "a thread member object for each returned thread the current user has joined",
        "value": "array of thread members objects"
      },
      {
        "name": "has_more",
        "description": "whether there are potentially additional threads that could be returned on a subsequent call",
        "value": "boolean"
      }
    ]
  },
  {
    "tree": [
      "list-private-archived-threads",
      "list-private-archived-threads",
      "list-private-archived-threads",
      "list-private-archived-threads-query-string-params",
      "list-private-archived-threads-response-body",
      "list-private-archived-threads-response-body",
      "list-private-archived-threads-response-body",
      "list-private-archived-threads-response-body"
    ],
    "name": "Response Body",
    "props": [
      {
        "name": "threads",
        "description": "the private, archived threads",
        "value": "array of channel objects"
      },
      {
        "name": "members",
        "description": "a thread member object for each returned thread the current user has joined",
        "value": "array of thread members objects"
      },
      {
        "name": "has_more",
        "description": "whether there are potentially additional threads that could be returned on a subsequent call",
        "value": "boolean"
      }
    ]
  },
  {
    "tree": [
      "list-joined-private-archived-threads",
      "list-joined-private-archived-threads",
      "list-joined-private-archived-threads",
      "list-joined-private-archived-threads-query-string-params",
      "list-joined-private-archived-threads-response-body",
      "list-joined-private-archived-threads-response-body",
      "list-joined-private-archived-threads-response-body",
      "list-joined-private-archived-threads-response-body",
      "emoji-resource",
      "emoji-resource",
      "emoji-resource",
      "emoji-resource",
      "emoji-object",
      "emoji-object",
      "emoji-object",
      "emoji-object",
      "emoji-object-emoji-structure",
      "emoji-object-emoji-structure",
      "emoji-object-emoji-structure",
      "emoji-object-emoji-structure"
    ],
    "name": "Emoji Structure",
    "props": [
      {
        "name": "id",
        "description": "emoji id",
        "value": "?snowflake"
      },
      {
        "name": "name",
        "description": "emoji name",
        "value": "?string"
      },
      {
        "name": "roles?",
        "description": "roles allowed to use this emoji",
        "value": "array of role object ids"
      },
      {
        "name": "user?",
        "description": "user that created this emoji",
        "value": "user object"
      },
      {
        "name": "require_colons?",
        "description": "whether this emoji must be wrapped in colons",
        "value": "boolean"
      },
      {
        "name": "managed?",
        "description": "whether this emoji is managed",
        "value": "boolean"
      },
      {
        "name": "animated?",
        "description": "whether this emoji is animated",
        "value": "boolean"
      },
      {
        "name": "available?",
        "description": "whether this emoji can be used, may be false due to loss of Server Boosts",
        "value": "boolean"
      }
    ]
  },
  {
    "tree": [
      "get-guild-emoji",
      "get-guild-emoji",
      "get-guild-emoji",
      "create-guild-emoji",
      "create-guild-emoji",
      "create-guild-emoji",
      "create-guild-emoji",
      "create-guild-emoji-json-params",
      "modify-guild-emoji",
      "modify-guild-emoji",
      "modify-guild-emoji",
      "modify-guild-emoji",
      "modify-guild-emoji-json-params",
      "delete-guild-emoji",
      "delete-guild-emoji",
      "delete-guild-emoji",
      "delete-guild-emoji",
      "guild-resource",
      "guild-resource",
      "guild-resource",
      "guild-resource",
      "guild-object",
      "guild-object",
      "guild-object",
      "guild-object",
      "guild-object-guild-structure",
      "guild-object-guild-structure",
      "guild-object-guild-structure",
      "guild-object-guild-structure"
    ],
    "name": "Guild Structure",
    "description": "This field is deprecated and is replaced by channel.rtc_region",
    "props": [
      {
        "name": "id",
        "description": "guild id",
        "value": "snowflake"
      },
      {
        "name": "name",
        "description": "guild name (2-100 characters, excluding trailing and leading whitespace)",
        "value": "string"
      },
      {
        "name": "icon",
        "description": "icon hash",
        "value": "?string"
      },
      {
        "name": "icon_hash?",
        "description": "icon hash, returned when in the template object",
        "value": "?string"
      },
      {
        "name": "splash",
        "description": "splash hash",
        "value": "?string"
      },
      {
        "name": "discovery_splash",
        "description": "discovery splash hash; only present for guilds with the \"DISCOVERABLE\" feature",
        "value": "?string"
      },
      {
        "name": "owner?",
        "description": "true if the user is the owner of the guild",
        "value": "boolean"
      },
      {
        "name": "owner_id",
        "description": "id of owner",
        "value": "snowflake"
      },
      {
        "name": "permissions?",
        "description": "total permissions for the user in the guild (excludes overwrites)",
        "value": "string"
      },
      {
        "name": "region?",
        "description": "voice region id for the guild (deprecated)",
        "value": "?string"
      },
      {
        "name": "afk_channel_id",
        "description": "id of afk channel",
        "value": "?snowflake"
      },
      {
        "name": "afk_timeout",
        "description": "afk timeout in seconds",
        "value": "integer"
      },
      {
        "name": "widget_enabled?",
        "description": "true if the server widget is enabled",
        "value": "boolean"
      },
      {
        "name": "widget_channel_id?",
        "description": "the channel id that the widget will generate an invite to, or null if set to no invite",
        "value": "?snowflake"
      },
      {
        "name": "verification_level",
        "description": "verification level required for the guild",
        "value": "integer"
      },
      {
        "name": "default_message_notifications",
        "description": "default message notifications level",
        "value": "integer"
      },
      {
        "name": "explicit_content_filter",
        "description": "explicit content filter level",
        "value": "integer"
      },
      {
        "name": "roles",
        "description": "roles in the guild",
        "value": "array of role objects"
      },
      {
        "name": "emojis",
        "description": "custom guild emojis",
        "value": "array of emoji objects"
      },
      {
        "name": "features",
        "description": "enabled guild features",
        "value": "array of guild feature strings"
      },
      {
        "name": "mfa_level",
        "description": "required MFA level for the guild",
        "value": "integer"
      },
      {
        "name": "application_id",
        "description": "application id of the guild creator if it is bot-created",
        "value": "?snowflake"
      },
      {
        "name": "system_channel_id",
        "description": "the id of the channel where guild notices such as welcome messages and boost events are posted",
        "value": "?snowflake"
      },
      {
        "name": "system_channel_flags",
        "description": "system channel flags",
        "value": "integer"
      },
      {
        "name": "rules_channel_id",
        "description": "the id of the channel where Community guilds can display rules and/or guidelines",
        "value": "?snowflake"
      },
      {
        "name": "joined_at?",
        "description": "when this guild was joined at",
        "value": "ISO8601 timestamp"
      },
      {
        "name": "large?",
        "description": "true if this is considered a large guild",
        "value": "boolean"
      },
      {
        "name": "unavailable?",
        "description": "true if this guild is unavailable due to an outage",
        "value": "boolean"
      },
      {
        "name": "member_count?",
        "description": "total number of members in this guild",
        "value": "integer"
      },
      {
        "name": "voice_states?",
        "description": "states of members currently in voice channels; lacks the guild_id key",
        "value": "array of partial voice state objects"
      },
      {
        "name": "members?",
        "description": "users in the guild",
        "value": "array of guild member objects"
      },
      {
        "name": "channels?",
        "description": "channels in the guild",
        "value": "array of channel objects"
      },
      {
        "name": "threads?",
        "description": "all active threads in the guild that current user has permission to view",
        "value": "array of channel objects"
      },
      {
        "name": "presences?",
        "description": "presences of the members in the guild, will only include non-offline members if the size is greater than large threshold",
        "value": "array of partial presence update objects"
      },
      {
        "name": "max_presences?",
        "description": "the maximum number of presences for the guild (null is always returned, apart from the largest of guilds)",
        "value": "?integer"
      },
      {
        "name": "max_members?",
        "description": "the maximum number of members for the guild",
        "value": "integer"
      },
      {
        "name": "vanity_url_code",
        "description": "the vanity url code for the guild",
        "value": "?string"
      },
      {
        "name": "description",
        "description": "the description of a Community guild",
        "value": "?string"
      },
      {
        "name": "banner",
        "description": "banner hash",
        "value": "?string"
      },
      {
        "name": "premium_tier",
        "description": "premium tier (Server Boost level)",
        "value": "integer"
      },
      {
        "name": "premium_subscription_count?",
        "description": "the number of boosts this guild currently has",
        "value": "integer"
      },
      {
        "name": "preferred_locale",
        "description": "the preferred locale of a Community guild; used in server discovery and notices from Discord, and sent in interactions; defaults to \"en-US",
        "value": "string"
      },
      {
        "name": "public_updates_channel_id",
        "description": "the id of the channel where admins and moderators of Community guilds receive notices from Discord",
        "value": "?snowflake"
      },
      {
        "name": "max_video_channel_users?",
        "description": "the maximum amount of users in a video channel",
        "value": "integer"
      },
      {
        "name": "approximate_member_count?",
        "description": "approximate number of members in this guild, returned from the GET /guilds/<id> endpoint when with_counts is true",
        "value": "integer"
      },
      {
        "name": "approximate_presence_count?",
        "description": "approximate number of non-offline members in this guild, returned from the GET /guilds/<id> endpoint when with_counts is true",
        "value": "integer"
      },
      {
        "name": "welcome_screen?",
        "description": "the welcome screen of a Community guild, shown to new members, returned in an Invite's guild object",
        "value": "welcome screen object"
      },
      {
        "name": "nsfw_level",
        "description": "guild NSFW level",
        "value": "integer"
      },
      {
        "name": "stage_instances?",
        "description": "Stage instances in the guild",
        "value": "array of stage instance objects"
      },
      {
        "name": "stickers?",
        "description": "custom guild stickers",
        "value": "array of sticker objects"
      },
      {
        "name": "guild_scheduled_events?",
        "description": "the scheduled events in the guild",
        "value": "array of guild scheduled event objects"
      },
      {
        "name": "premium_progress_bar_enabled",
        "description": "whether the guild has the boost progress bar enabled",
        "value": "boolean"
      }
    ]
  },
  {
    "tree": [
      "guild-object-default-message-notification-level"
    ],
    "name": "Default Message Notification Level",
    "props": [
      {
        "name": "ALL_MESSAGES",
        "description": "members will receive notifications for all messages by default",
        "value": 0
      },
      {
        "name": "ONLY_MENTIONS",
        "description": "members will receive notifications only for messages that @mention them by default",
        "value": 1
      }
    ]
  },
  {
    "tree": [],
    "name": "Explicit Content Filter Level",
    "props": [
      {
        "name": "DISABLED",
        "description": "media content will not be scanned",
        "value": 0
      },
      {
        "name": "MEMBERS_WITHOUT_ROLES",
        "description": "media content sent by members without roles will be scanned",
        "value": 1
      },
      {
        "name": "ALL_MEMBERS",
        "description": "media content sent by all members will be scanned",
        "value": 2
      }
    ]
  },
  {
    "tree": [],
    "name": "MFA Level",
    "props": [
      {
        "name": "NONE",
        "description": "guild has no MFA/2FA requirement for moderation actions",
        "value": 0
      },
      {
        "name": "ELEVATED",
        "description": "guild has a 2FA requirement for moderation actions",
        "value": 1
      }
    ]
  },
  {
    "tree": [],
    "name": "Verification Level",
    "props": [
      {
        "name": "NONE",
        "description": "unrestricted",
        "value": 0
      },
      {
        "name": "LOW",
        "description": "must have verified email on account",
        "value": 1
      },
      {
        "name": "MEDIUM",
        "description": "must be registered on Discord for longer than 5 minutes",
        "value": 2
      },
      {
        "name": "HIGH",
        "description": "must be a member of the server for longer than 10 minutes",
        "value": 3
      },
      {
        "name": "VERY_HIGH",
        "description": "must have a verified phone number",
        "value": 4
      }
    ]
  },
  {
    "tree": [],
    "name": "Guild NSFW Level",
    "props": [
      {
        "name": "DEFAULT",
        "value": 0
      },
      {
        "name": "EXPLICIT",
        "value": 1
      },
      {
        "name": "SAFE",
        "value": 2
      },
      {
        "name": "AGE_RESTRICTED",
        "value": 3
      }
    ]
  },
  {
    "tree": [],
    "name": "Premium Tier",
    "props": [
      {
        "name": "NONE",
        "description": "guild has not unlocked any Server Boost perks",
        "value": 0
      },
      {
        "name": "TIER_1",
        "description": "guild has unlocked Server Boost level 1 perks",
        "value": 1
      },
      {
        "name": "TIER_2",
        "description": "guild has unlocked Server Boost level 2 perks",
        "value": 2
      },
      {
        "name": "TIER_3",
        "description": "guild has unlocked Server Boost level 3 perks",
        "value": 3
      }
    ]
  },
  {
    "tree": [],
    "name": "System Channel Flags",
    "props": [
      {
        "name": "SUPPRESS_JOIN_NOTIFICATIONS",
        "description": "Suppress member join notifications",
        "value": 1
      },
      {
        "name": "SUPPRESS_PREMIUM_SUBSCRIPTIONS",
        "description": "Suppress server boost notifications",
        "value": 2
      },
      {
        "name": "SUPPRESS_GUILD_REMINDER_NOTIFICATIONS",
        "description": "Suppress server setup tips",
        "value": 4
      },
      {
        "name": "SUPPRESS_JOIN_NOTIFICATION_REPLIES",
        "description": "Hide member join sticker reply buttons",
        "value": 8
      }
    ]
  },
  {
    "tree": [],
    "name": "Guild Features",
    "props": [
      {
        "name": "ANIMATED_ICON",
        "description": "guild has access to set an animated guild icon",
        "value": "ANIMATED_ICON"
      },
      {
        "name": "BANNER",
        "description": "guild has access to set a guild banner image",
        "value": "BANNER"
      },
      {
        "name": "COMMERCE",
        "description": "guild has access to use commerce features (i.e. create store channels)",
        "value": "COMMERCE"
      },
      {
        "name": "COMMUNITY",
        "description": "guild can enable welcome screen, Membership Screening, stage channels and discovery, and receives community updates",
        "value": "COMMUNITY"
      },
      {
        "name": "DISCOVERABLE",
        "description": "guild is able to be discovered in the directory",
        "value": "DISCOVERABLE"
      },
      {
        "name": "FEATURABLE",
        "description": "guild is able to be featured in the directory",
        "value": "FEATURABLE"
      },
      {
        "name": "INVITE_SPLASH",
        "description": "guild has access to set an invite splash background",
        "value": "INVITE_SPLASH"
      },
      {
        "name": "MEMBER_VERIFICATION_GATE_ENABLED",
        "description": "guild has enabled Membership Screening",
        "value": "MEMBER_VERIFICATION_GATE_ENABLED"
      },
      {
        "name": "MONETIZATION_ENABLED",
        "description": "guild has enabled monetization",
        "value": "MONETIZATION_ENABLED"
      },
      {
        "name": "MORE_STICKERS",
        "description": "guild has increased custom sticker slots",
        "value": "MORE_STICKERS"
      },
      {
        "name": "NEWS",
        "description": "guild has access to create news channels",
        "value": "NEWS"
      },
      {
        "name": "PARTNERED",
        "description": "guild is partnered",
        "value": "PARTNERED"
      },
      {
        "name": "PREVIEW_ENABLED",
        "description": "guild can be previewed before joining via Membership Screening or the directory",
        "value": "PREVIEW_ENABLED"
      },
      {
        "name": "PRIVATE_THREADS",
        "description": "guild has access to create private threads",
        "value": "PRIVATE_THREADS"
      },
      {
        "name": "ROLE_ICONS",
        "description": "guild is able to set role icons",
        "value": "ROLE_ICONS"
      },
      {
        "name": "SEVEN_DAY_THREAD_ARCHIVE",
        "description": "guild has access to the seven day archive time for threads",
        "value": "SEVEN_DAY_THREAD_ARCHIVE"
      },
      {
        "name": "THREE_DAY_THREAD_ARCHIVE",
        "description": "guild has access to the three day archive time for threads",
        "value": "THREE_DAY_THREAD_ARCHIVE"
      },
      {
        "name": "TICKETED_EVENTS_ENABLED",
        "description": "guild has enabled ticketed events",
        "value": "TICKETED_EVENTS_ENABLED"
      },
      {
        "name": "VANITY_URL",
        "description": "guild has access to set a vanity URL",
        "value": "VANITY_URL"
      },
      {
        "name": "VERIFIED",
        "description": "guild is verified",
        "value": "VERIFIED"
      },
      {
        "name": "VIP_REGIONS",
        "description": "guild has access to set 384kbps bitrate in voice (previously VIP voice servers)",
        "value": "VIP_REGIONS"
      },
      {
        "name": "WELCOME_SCREEN_ENABLED",
        "description": "guild has enabled the welcome screen",
        "value": "WELCOME_SCREEN_ENABLED"
      }
    ]
  },
  {
    "tree": [
      "guild-preview-object-guild-preview-structure",
      "guild-preview-object-guild-preview-structure"
    ],
    "name": "Guild Preview Structure",
    "props": [
      {
        "name": "id",
        "description": "guild id",
        "value": "snowflake"
      },
      {
        "name": "name",
        "description": "guild name (2-100 characters)",
        "value": "string"
      },
      {
        "name": "icon",
        "description": "icon hash",
        "value": "?string"
      },
      {
        "name": "splash",
        "description": "splash hash",
        "value": "?string"
      },
      {
        "name": "discovery_splash",
        "description": "discovery splash hash",
        "value": "?string"
      },
      {
        "name": "emojis",
        "description": "custom guild emojis",
        "value": "array of emoji objects"
      },
      {
        "name": "features",
        "description": "enabled guild features",
        "value": "array of guild feature strings"
      },
      {
        "name": "approximate_member_count",
        "description": "approximate number of members in this guild",
        "value": "integer"
      },
      {
        "name": "approximate_presence_count",
        "description": "approximate number of online members in this guild",
        "value": "integer"
      },
      {
        "name": "description",
        "description": "the description for the guild, if the guild is discoverable",
        "value": "?string"
      },
      {
        "name": "stickers",
        "description": "custom guild stickers",
        "value": "array of sticker objects"
      }
    ]
  },
  {
    "tree": [
      "guild-preview-object-example-guild-preview",
      "guild-widget-settings-object",
      "guild-widget-settings-object",
      "guild-widget-settings-object",
      "guild-widget-settings-object",
      "guild-widget-settings-object-guild-widget-settings-structure",
      "guild-widget-settings-object-guild-widget-settings-structure",
      "guild-widget-settings-object-guild-widget-settings-structure",
      "guild-widget-settings-object-guild-widget-settings-structure"
    ],
    "name": "Guild Widget Settings Structure",
    "props": [
      {
        "name": "enabled",
        "description": "whether the widget is enabled",
        "value": "boolean"
      },
      {
        "name": "channel_id",
        "description": "the widget channel id",
        "value": "?snowflake"
      }
    ]
  },
  {
    "tree": [
      "guild-widget-settings-object-example-guild-widget-settings",
      "get-guild-widget-object",
      "get-guild-widget-object",
      "get-guild-widget-object",
      "get-guild-widget-object",
      "get-guild-widget-object-get-guild-widget-structure",
      "get-guild-widget-object-get-guild-widget-structure",
      "get-guild-widget-object-get-guild-widget-structure",
      "get-guild-widget-object-get-guild-widget-structure"
    ],
    "name": "Get Guild Widget Structure",
    "props": [
      {
        "name": "id",
        "description": "guild id",
        "value": "snowflake"
      },
      {
        "name": "name",
        "description": "guild name (2-100 characters)",
        "value": "string"
      },
      {
        "name": "instant_invite",
        "description": "instant invite for the guilds specified widget invite channel",
        "value": "?string"
      },
      {
        "name": "channels",
        "description": "voice and stage channels which are accessible by @everyone",
        "value": "array of partial channel objects"
      },
      {
        "name": "members",
        "description": "special widget user objects that includes users presence (Limit 100)",
        "value": "array of partial user objects"
      },
      {
        "name": "presence_count",
        "description": "number of online members in this guild",
        "value": "integer"
      }
    ]
  },
  {
    "tree": [
      "get-guild-widget-object-example-get-guild-widget",
      "guild-member-object",
      "guild-member-object",
      "guild-member-object",
      "guild-member-object",
      "guild-member-object-guild-member-structure",
      "guild-member-object-guild-member-structure",
      "guild-member-object-guild-member-structure",
      "guild-member-object-guild-member-structure"
    ],
    "name": "Guild Member Structure",
    "props": [
      {
        "name": "user?",
        "description": "the user this guild member represents",
        "value": "user object"
      },
      {
        "name": "nick?",
        "description": "this user's guild nickname",
        "value": "?string"
      },
      {
        "name": "avatar?",
        "description": "the member's guild avatar hash",
        "value": "?string"
      },
      {
        "name": "roles",
        "description": "array of role object ids",
        "value": "array of snowflakes"
      },
      {
        "name": "joined_at",
        "description": "when the user joined the guild",
        "value": "ISO8601 timestamp"
      },
      {
        "name": "premium_since?",
        "description": "when the user started boosting the guild",
        "value": "?ISO8601 timestamp"
      },
      {
        "name": "deaf",
        "description": "whether the user is deafened in voice channels",
        "value": "boolean"
      },
      {
        "name": "mute",
        "description": "whether the user is muted in voice channels",
        "value": "boolean"
      },
      {
        "name": "pending?",
        "description": "whether the user has not yet passed the guild's Membership Screening requirements",
        "value": "boolean"
      },
      {
        "name": "permissions?",
        "description": "total permissions of the member in the channel, including overwrites, returned when in the interaction object",
        "value": "string"
      },
      {
        "name": "communication_disabled_until?",
        "description": "when the user's timeout will expire and the user will be able to communicate in the guild again, null or a time in the past if the user is not timed out",
        "value": "?ISO8601 timestamp"
      }
    ]
  },
  {
    "tree": [
      "guild-member-object-example-guild-member",
      "integration-object",
      "integration-object",
      "integration-object",
      "integration-object",
      "integration-object-integration-structure",
      "integration-object-integration-structure",
      "integration-object-integration-structure",
      "integration-object-integration-structure"
    ],
    "name": "Integration Structure",
    "description": "These fields are not provided for discord bot integrations.",
    "props": [
      {
        "name": "id",
        "description": "integration id",
        "value": "snowflake"
      },
      {
        "name": "name",
        "description": "integration name",
        "value": "string"
      },
      {
        "name": "type",
        "description": "integration type (twitch, youtube, or discord)",
        "value": "string"
      },
      {
        "name": "enabled",
        "description": "is this integration enabled",
        "value": "boolean"
      },
      {
        "name": "syncing?",
        "description": "is this integration syncing",
        "value": "boolean"
      },
      {
        "name": "role_id?",
        "description": "id that this integration uses for \"subscribers",
        "value": "snowflake"
      },
      {
        "name": "enable_emoticons?",
        "description": "whether emoticons should be synced for this integration (twitch only currently)",
        "value": "boolean"
      },
      {
        "name": "expire_behavior?",
        "description": "the behavior of expiring subscribers",
        "value": "integration expire behavior"
      },
      {
        "name": "expire_grace_period?",
        "description": "the grace period (in days) before expiring subscribers",
        "value": "integer"
      },
      {
        "name": "user?",
        "description": "user for this integration",
        "value": "user object"
      },
      {
        "name": "account",
        "description": "integration account information",
        "value": "account object"
      },
      {
        "name": "synced_at?",
        "description": "when this integration was last synced",
        "value": "ISO8601 timestamp"
      },
      {
        "name": "subscriber_count?",
        "description": "how many subscribers this integration has",
        "value": "integer"
      },
      {
        "name": "revoked?",
        "description": "has this integration been revoked",
        "value": "boolean"
      },
      {
        "name": "application?",
        "description": "The bot/OAuth2 application for discord integrations",
        "value": "application object"
      }
    ]
  },
  {
    "tree": [
      "integration-object-integration-expire-behaviors"
    ],
    "name": "Integration Expire Behaviors",
    "props": [
      {
        "name": "Remove role",
        "value": 0
      },
      {
        "name": "Kick",
        "value": 1
      }
    ]
  },
  {
    "tree": [],
    "name": "Integration Account Structure",
    "props": [
      {
        "name": "id",
        "description": "id of the account",
        "value": "string"
      },
      {
        "name": "name",
        "description": "name of the account",
        "value": "string"
      }
    ]
  },
  {
    "tree": [],
    "name": "Integration Application Structure",
    "props": [
      {
        "name": "id",
        "description": "the id of the app",
        "value": "snowflake"
      },
      {
        "name": "name",
        "description": "the name of the app",
        "value": "string"
      },
      {
        "name": "icon",
        "description": "the icon hash of the app",
        "value": "?string"
      },
      {
        "name": "description",
        "description": "the description of the app",
        "value": "string"
      },
      {
        "name": "summary",
        "description": "the summary of the app",
        "value": "string"
      },
      {
        "name": "bot?",
        "description": "the bot associated with this application",
        "value": "user object"
      }
    ]
  },
  {
    "tree": [],
    "name": "Ban Structure",
    "props": [
      {
        "name": "reason",
        "description": "the reason for the ban",
        "value": "?string"
      },
      {
        "name": "user",
        "description": "the banned user",
        "value": "user object"
      }
    ]
  },
  {
    "tree": [
      "welcome-screen-object",
      "welcome-screen-object",
      "welcome-screen-object",
      "welcome-screen-object",
      "welcome-screen-object-welcome-screen-structure",
      "welcome-screen-object-welcome-screen-structure",
      "welcome-screen-object-welcome-screen-structure",
      "welcome-screen-object-welcome-screen-structure"
    ],
    "name": "Welcome Screen Structure",
    "props": [
      {
        "name": "description",
        "description": "the server description shown in the welcome screen",
        "value": "?string"
      },
      {
        "name": "welcome_channels",
        "description": "the channels shown in the welcome screen, up to 5",
        "value": "array of welcome screen channel objects"
      }
    ]
  },
  {
    "tree": [
      "welcome-screen-object-welcome-screen-channel-structure"
    ],
    "name": "Welcome Screen Channel Structure",
    "props": [
      {
        "name": "channel_id",
        "description": "the channel's id",
        "value": "snowflake"
      },
      {
        "name": "description",
        "description": "the description shown for the channel",
        "value": "string"
      },
      {
        "name": "emoji_id",
        "description": "the emoji id, if the emoji is custom",
        "value": "?snowflake"
      },
      {
        "name": "emoji_name",
        "description": "the emoji name if custom, the unicode character if standard, or null if no emoji is set",
        "value": "?string"
      }
    ]
  },
  {
    "tree": [
      "welcome-screen-object-example-welcome-screen"
    ],
    "name": "Example Welcome Screen",
    "description": "a guild object on success. Fires a Guild Create Gateway event.",
    "props": [
      {
        "name": "name",
        "description": "name of the guild (2-100 characters)",
        "value": "string"
      },
      {
        "name": "region?",
        "description": "voice region id (deprecated)",
        "value": "?string"
      },
      {
        "name": "icon?",
        "description": "base64 128x128 image for the guild icon",
        "value": "image data"
      },
      {
        "name": "verification_level?",
        "description": "verification level",
        "value": "integer"
      },
      {
        "name": "default_message_notifications?",
        "description": "default message notification level",
        "value": "integer"
      },
      {
        "name": "explicit_content_filter?",
        "description": "explicit content filter level",
        "value": "integer"
      },
      {
        "name": "roles?",
        "description": "new guild roles",
        "value": "array of role objects"
      },
      {
        "name": "channels?",
        "description": "new guild's channels",
        "value": "array of partial channel objects"
      },
      {
        "name": "afk_channel_id?",
        "description": "id for afk channel",
        "value": "snowflake"
      },
      {
        "name": "afk_timeout?",
        "description": "afk timeout in seconds",
        "value": "integer"
      },
      {
        "name": "system_channel_id?",
        "description": "the id of the channel where guild notices such as welcome messages and boost events are posted",
        "value": "snowflake"
      },
      {
        "name": "system_channel_flags?",
        "description": "system channel flags",
        "value": "integer"
      }
    ]
  },
  {
    "tree": [
      "create-guild-example-partial-channel-object",
      "create-guild-example-category-channel",
      "create-guild-example-category-channel",
      "create-guild-example-category-channel",
      "create-guild-example-category-channel"
    ],
    "name": "Example Category Channel",
    "description": "the guild object for the given id. If with_counts is set to true, this endpoint will also return approximate_member_count and approximate_presence_count for the guild.",
    "props": [
      {
        "name": "with_counts?",
        "description": "when true, will return approximate member and presence counts for the guild",
        "value": "boolean"
      }
    ]
  },
  {
    "tree": [
      "create-guild-example-partial-channel-object",
      "create-guild-example-category-channel",
      "create-guild-example-category-channel",
      "create-guild-example-category-channel",
      "create-guild-example-category-channel",
      "get-guild",
      "get-guild",
      "get-guild",
      "get-guild",
      "get-guild-query-string-params",
      "get-guild-example-response",
      "get-guild-preview",
      "get-guild-preview",
      "get-guild-preview",
      "get-guild-preview",
      "modify-guild",
      "modify-guild",
      "modify-guild",
      "modify-guild",
      "modify-guild-json-params",
      "delete-guild",
      "delete-guild",
      "delete-guild",
      "delete-guild",
      "get-guild-channels",
      "get-guild-channels",
      "get-guild-channels",
      "get-guild-channels",
      "create-guild-channel",
      "create-guild-channel",
      "create-guild-channel",
      "create-guild-channel",
      "create-guild-channel-json-params",
      "modify-guild-channel-positions",
      "modify-guild-channel-positions",
      "modify-guild-channel-positions",
      "modify-guild-channel-positions",
      "modify-guild-channel-positions-json-params",
      "list-active-threads",
      "list-active-threads",
      "list-active-threads",
      "list-active-threads",
      "list-active-threads-response-body",
      "list-active-threads-response-body",
      "list-active-threads-response-body",
      "list-active-threads-response-body"
    ],
    "name": "Response Body",
    "props": [
      {
        "name": "threads",
        "description": "the active threads",
        "value": "array of channel objects"
      },
      {
        "name": "members",
        "description": "a thread member object for each returned thread the current user has joined",
        "value": "array of thread members objects"
      }
    ]
  },
  {
    "tree": [
      "get-guild-widget-image",
      "get-guild-widget-image",
      "get-guild-widget-image",
      "get-guild-widget-image-query-string-params",
      "get-guild-widget-image-widget-style-options",
      "get-guild-widget-image-widget-style-options",
      "get-guild-widget-image-widget-style-options",
      "get-guild-widget-image-widget-style-options"
    ],
    "name": "Widget Style Options",
    "props": [
      {
        "name": "shield",
        "description": "shield style widget with Discord icon and guild members online count",
        "value": "Example"
      },
      {
        "name": "banner1",
        "description": "large image with guild icon, name and online count. \"POWERED BY DISCORD\" as the footer of the widget",
        "value": "Example"
      },
      {
        "name": "banner2",
        "description": "smaller widget style with guild icon, name and online count. Split on the right with Discord logo",
        "value": "Example"
      },
      {
        "name": "banner3",
        "description": "large image with guild icon, name and online count. In the footer, Discord logo on the left and \"Chat Now\" on the right",
        "value": "Example"
      },
      {
        "name": "banner4",
        "description": "large Discord logo at the top of the widget. Guild icon, name and online count in the middle portion of the widget and a \"JOIN MY SERVER\" button at the bottom",
        "value": "Example"
      }
    ]
  },
  {
    "tree": [
      "modify-user-voice-state",
      "modify-user-voice-state",
      "modify-user-voice-state",
      "modify-user-voice-state-json-params",
      "modify-user-voice-state-caveats",
      "modify-user-voice-state-caveats",
      "modify-user-voice-state-caveats",
      "modify-user-voice-state-caveats",
      "guild-scheduled-event",
      "guild-scheduled-event",
      "guild-scheduled-event",
      "guild-scheduled-event",
      "guild-scheduled-event-object",
      "guild-scheduled-event-object",
      "guild-scheduled-event-object",
      "guild-scheduled-event-object",
      "guild-scheduled-event-object-guild-scheduled-event-structure",
      "guild-scheduled-event-object-guild-scheduled-event-structure",
      "guild-scheduled-event-object-guild-scheduled-event-structure",
      "guild-scheduled-event-object-guild-scheduled-event-structure"
    ],
    "name": "Guild Scheduled Event Structure",
    "description": "See field requirements by entity type to understand the relationship between entity_type and the following fields: channel_id, entity_metadata, and scheduled_end_time",
    "props": [
      {
        "name": "id",
        "description": "the id of the scheduled event",
        "value": "snowflake"
      },
      {
        "name": "guild_id",
        "description": "the guild id which the scheduled event belongs to",
        "value": "snowflake"
      },
      {
        "name": "channel_id",
        "description": "the channel id in which the scheduled event will be hosted, or null if scheduled entity type is EXTERNAL",
        "value": "?snowflake"
      },
      {
        "name": "creator_id",
        "description": "the id of the user that created the scheduled event",
        "value": "?snowflake"
      },
      {
        "name": "name",
        "description": "the name of the scheduled event (1-100 characters)",
        "value": "string"
      },
      {
        "name": "description?",
        "description": "the description of the scheduled event (1-1000 characters)",
        "value": "string"
      },
      {
        "name": "scheduled_start_time",
        "description": "the time the scheduled event will start",
        "value": "ISO8601 timestamp"
      },
      {
        "name": "scheduled_end_time",
        "description": "the time the scheduled event will end, required if entity_type is EXTERNAL",
        "value": "?ISO8601 timestamp"
      },
      {
        "name": "privacy_level",
        "description": "the privacy level of the scheduled event",
        "value": "privacy level"
      },
      {
        "name": "status",
        "description": "the status of the scheduled event",
        "value": "event status"
      },
      {
        "name": "entity_type",
        "description": "the type of the scheduled event",
        "value": "scheduled entity type"
      },
      {
        "name": "entity_id",
        "description": "the id of an entity associated with a guild scheduled event",
        "value": "?snowflake"
      },
      {
        "name": "entity_metadata",
        "description": "additional metadata for the guild scheduled event",
        "value": "?entity metadata"
      },
      {
        "name": "creator?",
        "description": "the user that created the scheduled event",
        "value": "user object"
      },
      {
        "name": "user_count?",
        "description": "the number of users subscribed to the scheduled event",
        "value": "integer"
      },
      {
        "name": "image",
        "description": "the cover image hash of the scheduled event",
        "value": "?string"
      }
    ]
  },
  {
    "tree": [
      "guild-scheduled-event-object-guild-scheduled-event-privacy-level"
    ],
    "name": "Guild Scheduled Event Privacy Level",
    "props": [
      {
        "name": "GUILD_ONLY",
        "description": "the scheduled event is only accessible to guild members",
        "value": 2
      }
    ]
  },
  {
    "tree": [],
    "name": "Guild Scheduled Event Entity Types",
    "props": [
      {
        "name": "STAGE_INSTANCE",
        "value": 1
      },
      {
        "name": "VOICE",
        "value": 2
      },
      {
        "name": "EXTERNAL",
        "value": 3
      }
    ]
  },
  {
    "tree": [],
    "name": "Field Requirements By Entity Type",
    "description": "entity_metadata with a non-null location must be provided",
    "props": [
      {
        "name": "STAGE_INSTANCE",
        "value": "value"
      },
      {
        "name": "VOICE",
        "value": "value"
      },
      {
        "name": "EXTERNAL",
        "value": "null"
      }
    ]
  },
  {
    "tree": [],
    "name": "Guild Scheduled Event Status",
    "description": "Once status is set to COMPLETED or CANCELED, the status can no longer be updated",
    "props": [
      {
        "name": "SCHEDULED",
        "value": 1
      },
      {
        "name": "ACTIVE",
        "value": 2
      },
      {
        "name": "COMPLETED",
        "value": 3
      },
      {
        "name": "CANCELED",
        "value": 4
      }
    ]
  },
  {
    "tree": [
      "guild-scheduled-event-object-guild-scheduled-event-entity-metadata",
      "guild-scheduled-event-object-guild-scheduled-event-entity-metadata",
      "guild-scheduled-event-object-guild-scheduled-event-entity-metadata",
      "guild-scheduled-event-object-guild-scheduled-event-entity-metadata"
    ],
    "name": "Guild Scheduled Event Entity Metadata",
    "description": "required for events with 'entity_type': EXTERNAL",
    "props": [
      {
        "name": "location?",
        "description": "location of the event (1-100 characters)",
        "value": "string"
      }
    ]
  },
  {
    "tree": [
      "guild-scheduled-event-user-object-guild-scheduled-event-user-structure"
    ],
    "name": "Guild Scheduled Event User Structure",
    "description": "a list of guild scheduled event objects for the given guild.",
    "props": [
      {
        "name": "with_user_count?",
        "description": "include number of users subscribed to each event",
        "value": "boolean"
      }
    ]
  },
  {
    "tree": [
      "guild-scheduled-event-user-object-guild-scheduled-event-user-structure",
      "list-scheduled-events-for-guild",
      "list-scheduled-events-for-guild",
      "list-scheduled-events-for-guild",
      "list-scheduled-events-for-guild",
      "list-scheduled-events-for-guild-query-string-params",
      "create-guild-scheduled-event",
      "create-guild-scheduled-event",
      "create-guild-scheduled-event",
      "create-guild-scheduled-event",
      "create-guild-scheduled-event-json-params",
      "get-guild-scheduled-event",
      "get-guild-scheduled-event",
      "get-guild-scheduled-event",
      "get-guild-scheduled-event",
      "get-guild-scheduled-event-query-string-params",
      "modify-guild-scheduled-event",
      "modify-guild-scheduled-event",
      "modify-guild-scheduled-event",
      "modify-guild-scheduled-event",
      "modify-guild-scheduled-event-json-params",
      "delete-guild-scheduled-event",
      "delete-guild-scheduled-event",
      "delete-guild-scheduled-event",
      "delete-guild-scheduled-event",
      "get-guild-scheduled-event-users",
      "get-guild-scheduled-event-users",
      "get-guild-scheduled-event-users",
      "get-guild-scheduled-event-users",
      "get-guild-scheduled-event-users-query-string-params",
      "guild-scheduled-event-status-update-automation",
      "guild-scheduled-event-status-update-automation",
      "guild-scheduled-event-status-update-automation",
      "guild-scheduled-event-status-update-automation",
      "an-active-scheduled-event-for-a-stage-channel-where-all-users-have-left-the-stage-channel-will-automatically-end-a-few-minutes-after-the-last-user-leaves-the-channel",
      "an-active-scheduled-event-for-a-stage-channel-where-all-users-have-left-the-stage-channel-will-automatically-end-a-few-minutes-after-the-last-user-leaves-the-channel",
      "an-active-scheduled-event-for-a-stage-channel-where-all-users-have-left-the-stage-channel-will-automatically-end-a-few-minutes-after-the-last-user-leaves-the-channel",
      "an-active-scheduled-event-for-a-stage-channel-where-all-users-have-left-the-stage-channel-will-automatically-end-a-few-minutes-after-the-last-user-leaves-the-channel",
      "an-active-scheduled-event-for-a-voice-channel-where-all-users-have-left-the-voice-channel-will-automatically-end-a-few-minutes-after-the-last-user-leaves-the-channel",
      "an-active-scheduled-event-for-a-voice-channel-where-all-users-have-left-the-voice-channel-will-automatically-end-a-few-minutes-after-the-last-user-leaves-the-channel",
      "an-active-scheduled-event-for-a-voice-channel-where-all-users-have-left-the-voice-channel-will-automatically-end-a-few-minutes-after-the-last-user-leaves-the-channel",
      "an-active-scheduled-event-for-a-voice-channel-where-all-users-have-left-the-voice-channel-will-automatically-end-a-few-minutes-after-the-last-user-leaves-the-channel",
      "an-external-event-will-automatically-begin-at-its-scheduled-start-time",
      "an-external-event-will-automatically-begin-at-its-scheduled-start-time",
      "an-external-event-will-automatically-begin-at-its-scheduled-start-time",
      "an-external-event-will-automatically-begin-at-its-scheduled-start-time",
      "an-external-event-will-automatically-end-at-its-scheduled-end-time",
      "an-external-event-will-automatically-end-at-its-scheduled-end-time",
      "an-external-event-will-automatically-end-at-its-scheduled-end-time",
      "an-external-event-will-automatically-end-at-its-scheduled-end-time",
      "any-scheduled-event-which-has-not-begun-after-its-scheduled-start-time-will-be-automatically-cancelled-after-a-few-hours",
      "any-scheduled-event-which-has-not-begun-after-its-scheduled-start-time-will-be-automatically-cancelled-after-a-few-hours",
      "any-scheduled-event-which-has-not-begun-after-its-scheduled-start-time-will-be-automatically-cancelled-after-a-few-hours",
      "any-scheduled-event-which-has-not-begun-after-its-scheduled-start-time-will-be-automatically-cancelled-after-a-few-hours",
      "guild-scheduled-event-permissions-requirements",
      "guild-scheduled-event-permissions-requirements",
      "guild-scheduled-event-permissions-requirements",
      "guild-scheduled-event-permissions-requirements",
      "permissions-to-create-an-event-with-entity_type-stage_instance",
      "permissions-to-create-an-event-with-entity_type-stage_instance",
      "permissions-to-create-an-event-with-entity_type-stage_instance",
      "permissions-to-create-an-event-with-entity_type-stage_instance",
      "write-permissions-create-update-",
      "write-permissions-create-update-",
      "write-permissions-create-update-",
      "write-permissions-create-update-",
      "read-permissions-get-",
      "read-permissions-get-",
      "read-permissions-get-",
      "read-permissions-get-",
      "permissions-to-create-an-event-with-entity_type-voice",
      "permissions-to-create-an-event-with-entity_type-voice",
      "permissions-to-create-an-event-with-entity_type-voice",
      "permissions-to-create-an-event-with-entity_type-voice",
      "write-permissions-create-update-",
      "write-permissions-create-update-",
      "write-permissions-create-update-",
      "write-permissions-create-update-",
      "read-permissions-get-",
      "read-permissions-get-",
      "read-permissions-get-",
      "read-permissions-get-",
      "permissions-to-create-an-event-with-entity_type-external",
      "permissions-to-create-an-event-with-entity_type-external",
      "permissions-to-create-an-event-with-entity_type-external",
      "permissions-to-create-an-event-with-entity_type-external",
      "write-permissions-create-update-",
      "write-permissions-create-update-",
      "write-permissions-create-update-",
      "write-permissions-create-update-",
      "read-permissions-get-",
      "read-permissions-get-",
      "read-permissions-get-",
      "read-permissions-get-",
      "guild-template-resource",
      "guild-template-resource",
      "guild-template-resource",
      "guild-template-resource",
      "guild-template-object",
      "guild-template-object",
      "guild-template-object",
      "guild-template-object",
      "guild-template-object-guild-template-structure",
      "guild-template-object-guild-template-structure",
      "guild-template-object-guild-template-structure",
      "guild-template-object-guild-template-structure"
    ],
    "name": "Guild Template Structure",
    "props": [
      {
        "name": "code",
        "description": "the template code (unique ID)",
        "value": "string"
      },
      {
        "name": "name",
        "description": "template name",
        "value": "string"
      },
      {
        "name": "description",
        "description": "the description for the template",
        "value": "?string"
      },
      {
        "name": "usage_count",
        "description": "number of times this template has been used",
        "value": "integer"
      },
      {
        "name": "creator_id",
        "description": "the ID of the user who created the template",
        "value": "snowflake"
      },
      {
        "name": "creator",
        "description": "the user who created the template",
        "value": "user object"
      },
      {
        "name": "created_at",
        "description": "when this template was created",
        "value": "ISO8601 timestamp"
      },
      {
        "name": "updated_at",
        "description": "when this template was last synced to the source guild",
        "value": "ISO8601 timestamp"
      },
      {
        "name": "source_guild_id",
        "description": "the ID of the guild this template is based on",
        "value": "snowflake"
      },
      {
        "name": "serialized_source_guild",
        "description": "the guild snapshot this template contains",
        "value": "partial guild object"
      },
      {
        "name": "is_dirty",
        "description": "whether the template has unsynced changes",
        "value": "?boolean"
      }
    ]
  },
  {
    "tree": [
      "create-guild-from-guild-template",
      "create-guild-from-guild-template",
      "create-guild-from-guild-template",
      "create-guild-from-guild-template-json-params",
      "get-guild-templates",
      "get-guild-templates",
      "get-guild-templates",
      "get-guild-templates",
      "create-guild-template",
      "create-guild-template",
      "create-guild-template",
      "create-guild-template",
      "create-guild-template-json-params",
      "sync-guild-template",
      "sync-guild-template",
      "sync-guild-template",
      "sync-guild-template",
      "modify-guild-template",
      "modify-guild-template",
      "modify-guild-template",
      "modify-guild-template",
      "modify-guild-template-json-params",
      "delete-guild-template",
      "delete-guild-template",
      "delete-guild-template",
      "delete-guild-template",
      "invite-resource",
      "invite-resource",
      "invite-resource",
      "invite-resource",
      "invite-object",
      "invite-object",
      "invite-object",
      "invite-object",
      "invite-object-invite-structure",
      "invite-object-invite-structure",
      "invite-object-invite-structure",
      "invite-object-invite-structure"
    ],
    "name": "Invite Structure",
    "props": [
      {
        "name": "code",
        "description": "the invite code (unique ID)",
        "value": "string"
      },
      {
        "name": "guild?",
        "description": "the guild this invite is for",
        "value": "partial guild object"
      },
      {
        "name": "channel",
        "description": "the channel this invite is for",
        "value": "?partial channel object"
      },
      {
        "name": "inviter?",
        "description": "the user who created the invite",
        "value": "user object"
      },
      {
        "name": "target_type?",
        "description": "the type of target for this voice channel invite",
        "value": "integer"
      },
      {
        "name": "target_user?",
        "description": "the user whose stream to display for this voice channel stream invite",
        "value": "user object"
      },
      {
        "name": "target_application?",
        "description": "the embedded application to open for this voice channel embedded application invite",
        "value": "partial application object"
      },
      {
        "name": "approximate_presence_count?",
        "description": "approximate count of online members, returned from the GET /invites/<code> endpoint when with_counts is true",
        "value": "integer"
      },
      {
        "name": "approximate_member_count?",
        "description": "approximate count of total members, returned from the GET /invites/<code> endpoint when with_counts is true",
        "value": "integer"
      },
      {
        "name": "expires_at?",
        "description": "the expiration date of this invite, returned from the GET /invites/<code> endpoint when with_expiration is true",
        "value": "?ISO8601 timestamp"
      },
      {
        "name": "stage_instance?",
        "description": "stage instance data if there is a public Stage instance in the Stage channel this invite is for",
        "value": "invite stage instance object"
      },
      {
        "name": "guild_scheduled_event?",
        "description": "guild scheduled event data, only included if guild_scheduled_event_id contains a valid guild scheduled event id",
        "value": "guild scheduled event object"
      }
    ]
  },
  {
    "tree": [
      "invite-object-invite-target-types"
    ],
    "name": "Invite Target Types",
    "props": [
      {
        "name": "STREAM",
        "value": 1
      },
      {
        "name": "EMBEDDED_APPLICATION",
        "value": 2
      }
    ]
  },
  {
    "tree": [
      "invite-metadata-object",
      "invite-metadata-object",
      "invite-metadata-object",
      "invite-metadata-object",
      "invite-metadata-object-invite-metadata-structure",
      "invite-metadata-object-invite-metadata-structure",
      "invite-metadata-object-invite-metadata-structure",
      "invite-metadata-object-invite-metadata-structure"
    ],
    "name": "Invite Metadata Structure",
    "props": [
      {
        "name": "uses",
        "description": "number of times this invite has been used",
        "value": "integer"
      },
      {
        "name": "max_uses",
        "description": "max number of times this invite can be used",
        "value": "integer"
      },
      {
        "name": "max_age",
        "description": "duration (in seconds) after which the invite expires",
        "value": "integer"
      },
      {
        "name": "temporary",
        "description": "whether this invite only grants temporary membership",
        "value": "boolean"
      },
      {
        "name": "created_at",
        "description": "when this invite was created",
        "value": "ISO8601 timestamp"
      }
    ]
  },
  {
    "tree": [
      "invite-metadata-object-example-invite-metadata",
      "invite-stage-instance-object",
      "invite-stage-instance-object",
      "invite-stage-instance-object",
      "invite-stage-instance-object",
      "invite-stage-instance-object-invite-stage-instance-structure",
      "invite-stage-instance-object-invite-stage-instance-structure",
      "invite-stage-instance-object-invite-stage-instance-structure",
      "invite-stage-instance-object-invite-stage-instance-structure"
    ],
    "name": "Invite Stage Instance Structure",
    "props": [
      {
        "name": "members",
        "description": "the members speaking in the Stage",
        "value": "array of partial guild member objects"
      },
      {
        "name": "participant_count",
        "description": "the number of users in the Stage",
        "value": "integer"
      },
      {
        "name": "speaker_count",
        "description": "the number of users speaking in the Stage",
        "value": "integer"
      },
      {
        "name": "topic",
        "description": "the topic of the Stage instance (1-120 characters)",
        "value": "string"
      }
    ]
  },
  {
    "tree": [
      "invite-stage-instance-object-example-invite-stage-instance"
    ],
    "name": "Example Invite Stage Instance",
    "description": "an invite object for the given code.",
    "props": [
      {
        "name": "with_counts?",
        "description": "whether the invite should contain approximate member counts",
        "value": "boolean"
      },
      {
        "name": "with_expiration?",
        "description": "whether the invite should contain the expiration date",
        "value": "boolean"
      },
      {
        "name": "guild_scheduled_event_id?",
        "description": "the guild scheduled event to include with the invite",
        "value": "snowflake"
      }
    ]
  },
  {
    "tree": [
      "invite-stage-instance-object-example-invite-stage-instance",
      "get-invite",
      "get-invite",
      "get-invite",
      "get-invite",
      "get-invite-query-string-params",
      "delete-invite",
      "delete-invite",
      "delete-invite",
      "delete-invite",
      "stage-instance-resource",
      "stage-instance-resource",
      "stage-instance-resource",
      "stage-instance-resource",
      "stage-instance-object",
      "stage-instance-object",
      "stage-instance-object",
      "stage-instance-object",
      "stage-instance-object-stage-instance-structure",
      "stage-instance-object-stage-instance-structure",
      "stage-instance-object-stage-instance-structure",
      "stage-instance-object-stage-instance-structure"
    ],
    "name": "Stage Instance Structure",
    "props": [
      {
        "name": "id",
        "description": "The id of this Stage instance",
        "value": "snowflake"
      },
      {
        "name": "guild_id",
        "description": "The guild id of the associated Stage channel",
        "value": "snowflake"
      },
      {
        "name": "channel_id",
        "description": "The id of the associated Stage channel",
        "value": "snowflake"
      },
      {
        "name": "topic",
        "description": "The topic of the Stage instance (1-120 characters)",
        "value": "string"
      },
      {
        "name": "privacy_level",
        "description": "The privacy level of the Stage instance",
        "value": "integer"
      },
      {
        "name": "discoverable_disabled",
        "description": "Whether or not Stage Discovery is disabled (deprecated)",
        "value": "boolean"
      }
    ]
  },
  {
    "tree": [
      "stage-instance-object-privacy-level"
    ],
    "name": "Privacy Level",
    "props": [
      {
        "name": "PUBLIC",
        "description": "The Stage instance is visible publicly. (deprecated)",
        "value": 1
      },
      {
        "name": "GUILD_ONLY",
        "description": "The Stage instance is visible to only guild members.",
        "value": 2
      }
    ]
  },
  {
    "tree": [],
    "name": "Example Stage Instance",
    "description": "Requires the user to be a moderator of the Stage channel",
    "props": [
      {
        "name": "channel_id",
        "description": "The id of the Stage channel",
        "value": "snowflake"
      },
      {
        "name": "topic",
        "description": "The topic of the Stage instance (1-120 characters)",
        "value": "string"
      },
      {
        "name": "privacy_level?",
        "description": "The privacy level of the Stage instance (default GUILD_ONLY)",
        "value": "integer"
      }
    ]
  },
  {
    "tree": [
      "definitions",
      "definitions",
      "definitions",
      "definitions",
      "auto-closing",
      "auto-closing",
      "auto-closing",
      "auto-closing",
      "create-stage-instance",
      "create-stage-instance",
      "create-stage-instance",
      "create-stage-instance",
      "create-stage-instance-json-params",
      "get-stage-instance",
      "get-stage-instance",
      "get-stage-instance",
      "get-stage-instance",
      "modify-stage-instance",
      "modify-stage-instance",
      "modify-stage-instance",
      "modify-stage-instance",
      "modify-stage-instance-json-params",
      "delete-stage-instance",
      "delete-stage-instance",
      "delete-stage-instance",
      "delete-stage-instance",
      "sticker-resource",
      "sticker-resource",
      "sticker-resource",
      "sticker-resource",
      "sticker-object",
      "sticker-object",
      "sticker-object",
      "sticker-object",
      "sticker-object-sticker-structure",
      "sticker-object-sticker-structure",
      "sticker-object-sticker-structure",
      "sticker-object-sticker-structure"
    ],
    "name": "Sticker Structure",
    "description": "A comma separated list of keywords is the format used in this field by standard stickers, but this is just a convention. Incidentally the client will always use a name generated from an emoji as the value of this field when creating or modifying a guild sticker.",
    "props": [
      {
        "name": "id",
        "description": "id of the sticker",
        "value": "snowflake"
      },
      {
        "name": "pack_id?",
        "description": "for standard stickers, id of the pack the sticker is from",
        "value": "snowflake"
      },
      {
        "name": "name",
        "description": "name of the sticker",
        "value": "string"
      },
      {
        "name": "description",
        "description": "description of the sticker",
        "value": "?string"
      },
      {
        "name": "tags",
        "description": "autocomplete/suggestion tags for the sticker (max 200 characters)",
        "value": "string"
      },
      {
        "name": "asset",
        "description": "Deprecated previously the sticker asset hash, now an empty string",
        "value": "string"
      },
      {
        "name": "type",
        "description": "type of sticker",
        "value": "integer"
      },
      {
        "name": "format_type",
        "description": "type of sticker format",
        "value": "integer"
      },
      {
        "name": "available?",
        "description": "whether this guild sticker can be used, may be false due to loss of Server Boosts",
        "value": "boolean"
      },
      {
        "name": "guild_id?",
        "description": "id of the guild that owns this sticker",
        "value": "snowflake"
      },
      {
        "name": "user?",
        "description": "the user that uploaded the guild sticker",
        "value": "user object"
      },
      {
        "name": "sort_value?",
        "description": "the standard sticker's sort order within its pack",
        "value": "integer"
      }
    ]
  },
  {
    "tree": [
      "sticker-object-sticker-types"
    ],
    "name": "Sticker Types",
    "props": [
      {
        "name": "STANDARD",
        "description": "an official sticker in a pack, part of Nitro or in a removed purchasable pack",
        "value": 1
      },
      {
        "name": "GUILD",
        "description": "a sticker uploaded to a Boosted guild for the guild's members",
        "value": 2
      }
    ]
  },
  {
    "tree": [],
    "name": "Sticker Format Types",
    "props": [
      {
        "name": "PNG",
        "value": 1
      },
      {
        "name": "APNG",
        "value": 2
      },
      {
        "name": "LOTTIE",
        "value": 3
      }
    ]
  },
  {
    "tree": [
      "sticker-item-object",
      "sticker-item-object",
      "sticker-item-object",
      "sticker-item-object",
      "sticker-item-object-sticker-item-structure",
      "sticker-item-object-sticker-item-structure",
      "sticker-item-object-sticker-item-structure",
      "sticker-item-object-sticker-item-structure"
    ],
    "name": "Sticker Item Structure",
    "description": "Represents a pack of standard stickers.",
    "props": [
      {
        "name": "id",
        "description": "id of the sticker",
        "value": "snowflake"
      },
      {
        "name": "name",
        "description": "name of the sticker",
        "value": "string"
      },
      {
        "name": "format_type",
        "description": "type of sticker format",
        "value": "integer"
      }
    ]
  },
  {
    "tree": [
      "sticker-pack-object-sticker-pack-structure"
    ],
    "name": "Sticker Pack Structure",
    "props": [
      {
        "name": "id",
        "description": "id of the sticker pack",
        "value": "snowflake"
      },
      {
        "name": "stickers",
        "description": "the stickers in the pack",
        "value": "array of sticker objects"
      },
      {
        "name": "name",
        "description": "name of the sticker pack",
        "value": "string"
      },
      {
        "name": "sku_id",
        "description": "id of the pack's SKU",
        "value": "snowflake"
      },
      {
        "name": "cover_sticker_id?",
        "description": "id of a sticker in the pack which is shown as the pack's icon",
        "value": "snowflake"
      },
      {
        "name": "description",
        "description": "description of the sticker pack",
        "value": "string"
      },
      {
        "name": "banner_asset_id?",
        "description": "id of the sticker pack's banner image",
        "value": "snowflake"
      }
    ]
  },
  {
    "tree": [
      "list-nitro-sticker-packs",
      "list-nitro-sticker-packs",
      "list-nitro-sticker-packs",
      "list-nitro-sticker-packs-response-structure",
      "list-guild-stickers",
      "list-guild-stickers",
      "list-guild-stickers",
      "list-guild-stickers",
      "get-guild-sticker",
      "get-guild-sticker",
      "get-guild-sticker",
      "get-guild-sticker",
      "create-guild-sticker",
      "create-guild-sticker",
      "create-guild-sticker",
      "create-guild-sticker",
      "create-guild-sticker-form-params",
      "modify-guild-sticker",
      "modify-guild-sticker",
      "modify-guild-sticker",
      "modify-guild-sticker",
      "modify-guild-sticker-json-params",
      "delete-guild-sticker",
      "delete-guild-sticker",
      "delete-guild-sticker",
      "delete-guild-sticker",
      "users-resource",
      "users-resource",
      "users-resource",
      "users-resource",
      "usernames-and-nicknames",
      "usernames-and-nicknames",
      "usernames-and-nicknames",
      "usernames-and-nicknames",
      "user-object",
      "user-object",
      "user-object",
      "user-object",
      "user-object-user-structure",
      "user-object-user-structure",
      "user-object-user-structure",
      "user-object-user-structure"
    ],
    "name": "User Structure",
    "props": [
      {
        "name": "id",
        "description": "the user's id",
        "value": "snowflake"
      },
      {
        "name": "username",
        "description": "the user's username, not unique across the platform",
        "value": "string"
      },
      {
        "name": "discriminator",
        "description": "the user's 4-digit discord-tag",
        "value": "string"
      },
      {
        "name": "avatar",
        "description": "the user's avatar hash",
        "value": "?string"
      },
      {
        "name": "bot?",
        "description": "whether the user belongs to an OAuth2 application",
        "value": "boolean"
      },
      {
        "name": "system?",
        "description": "whether the user is an Official Discord System user (part of the urgent message system)",
        "value": "boolean"
      },
      {
        "name": "mfa_enabled?",
        "description": "whether the user has two factor enabled on their account",
        "value": "boolean"
      },
      {
        "name": "banner?",
        "description": "the user's banner hash",
        "value": "?string"
      },
      {
        "name": "accent_color?",
        "description": "the user's banner color encoded as an integer representation of hexadecimal color code",
        "value": "?integer"
      },
      {
        "name": "locale?",
        "description": "the user's chosen language option",
        "value": "string"
      },
      {
        "name": "verified?",
        "description": "whether the email on this account has been verified",
        "value": "boolean"
      },
      {
        "name": "email?",
        "description": "the user's email",
        "value": "?string"
      },
      {
        "name": "flags?",
        "description": "the flags on a user's account",
        "value": "integer"
      },
      {
        "name": "premium_type?",
        "description": "the type of Nitro subscription on a user's account",
        "value": "integer"
      },
      {
        "name": "public_flags?",
        "description": "the public flags on a user's account",
        "value": "integer"
      }
    ]
  },
  {
    "tree": [
      "user-object-example-user",
      "user-object-user-flags",
      "user-object-user-flags",
      "user-object-user-flags",
      "user-object-user-flags"
    ],
    "name": "User Flags",
    "props": [
      {
        "name": "None",
        "description": "None",
        "value": 0
      },
      {
        "name": "STAFF",
        "description": "Discord Employee",
        "value": 1
      },
      {
        "name": "PARTNER",
        "description": "Partnered Server Owner",
        "value": 2
      },
      {
        "name": "HYPESQUAD",
        "description": "HypeSquad Events Coordinator",
        "value": 4
      },
      {
        "name": "BUG_HUNTER_LEVEL_1",
        "description": "Bug Hunter Level 1",
        "value": 8
      },
      {
        "name": "HYPESQUAD_ONLINE_HOUSE_1",
        "description": "House Bravery Member",
        "value": 64
      },
      {
        "name": "HYPESQUAD_ONLINE_HOUSE_2",
        "description": "House Brilliance Member",
        "value": 128
      },
      {
        "name": "HYPESQUAD_ONLINE_HOUSE_3",
        "description": "House Balance Member",
        "value": 256
      },
      {
        "name": "PREMIUM_EARLY_SUPPORTER",
        "description": "Early Nitro Supporter",
        "value": 512
      },
      {
        "name": "TEAM_PSEUDO_USER",
        "description": "User is a team",
        "value": 1024
      },
      {
        "name": "BUG_HUNTER_LEVEL_2",
        "description": "Bug Hunter Level 2",
        "value": 16384
      },
      {
        "name": "VERIFIED_BOT",
        "description": "Verified Bot",
        "value": 65536
      },
      {
        "name": "VERIFIED_DEVELOPER",
        "description": "Early Verified Bot Developer",
        "value": 131072
      },
      {
        "name": "CERTIFIED_MODERATOR",
        "description": "Discord Certified Moderator",
        "value": 262144
      },
      {
        "name": "BOT_HTTP_INTERACTIONS",
        "description": "Bot uses only HTTP interactions and is shown in the online member list",
        "value": 524288
      }
    ]
  },
  {
    "tree": [],
    "name": "Premium Types",
    "description": "The connection object that the user has attached.",
    "props": [
      {
        "name": "None",
        "value": 0
      },
      {
        "name": "Nitro Classic",
        "value": 1
      },
      {
        "name": "Nitro",
        "value": 2
      }
    ]
  },
  {
    "tree": [],
    "name": "Connection Structure",
    "props": [
      {
        "name": "id",
        "description": "id of the connection account",
        "value": "string"
      },
      {
        "name": "name",
        "description": "the username of the connection account",
        "value": "string"
      },
      {
        "name": "type",
        "description": "the service of the connection (twitch, youtube)",
        "value": "string"
      },
      {
        "name": "revoked?",
        "description": "whether the connection is revoked",
        "value": "boolean"
      },
      {
        "name": "integrations?",
        "description": "an array of partial server integrations",
        "value": "array"
      },
      {
        "name": "verified",
        "description": "whether the connection is verified",
        "value": "boolean"
      },
      {
        "name": "friend_sync",
        "description": "whether friend sync is enabled for this connection",
        "value": "boolean"
      },
      {
        "name": "show_activity",
        "description": "whether activities related to this connection will be shown in presence updates",
        "value": "boolean"
      },
      {
        "name": "visibility",
        "description": "visibility of this connection",
        "value": "integer"
      }
    ]
  },
  {
    "tree": [],
    "name": "Visibility Types",
    "description": "the user object of the requester's account. For OAuth2, this requires the identify scope, which will return the object without an email, and optionally the email scope, which returns the object with an email.",
    "props": [
      {
        "name": "None",
        "description": "invisible to everyone except the user themselves",
        "value": 0
      },
      {
        "name": "Everyone",
        "description": "visible to everyone",
        "value": 1
      }
    ]
  },
  {
    "tree": [
      "get-current-user",
      "get-current-user",
      "get-current-user",
      "get-current-user",
      "get-user",
      "get-user",
      "get-user",
      "get-user",
      "modify-current-user",
      "modify-current-user",
      "modify-current-user",
      "modify-current-user",
      "modify-current-user-json-params",
      "get-current-user-guilds",
      "get-current-user-guilds",
      "get-current-user-guilds",
      "get-current-user-guilds",
      "get-current-user-guilds-example-partial-guild",
      "get-current-user-guilds-example-partial-guild",
      "get-current-user-guilds-example-partial-guild",
      "get-current-user-guilds-example-partial-guild"
    ],
    "name": "Example Partial Guild",
    "props": [
      {
        "name": "before",
        "description": "get guilds before this guild ID",
        "value": "snowflake"
      },
      {
        "name": "after",
        "description": "get guilds after this guild ID",
        "value": "snowflake"
      },
      {
        "name": "limit",
        "description": "max number of guilds to return (1-200)",
        "value": "integer"
      }
    ]
  },
  {
    "tree": [
      "get-current-user",
      "get-current-user",
      "get-current-user",
      "get-current-user",
      "get-user",
      "get-user",
      "get-user",
      "get-user",
      "modify-current-user",
      "modify-current-user",
      "modify-current-user",
      "modify-current-user",
      "modify-current-user-json-params",
      "get-current-user-guilds",
      "get-current-user-guilds",
      "get-current-user-guilds",
      "get-current-user-guilds",
      "get-current-user-guilds-example-partial-guild",
      "get-current-user-guilds-example-partial-guild",
      "get-current-user-guilds-example-partial-guild",
      "get-current-user-guilds-example-partial-guild",
      "get-current-user-guilds-query-string-params",
      "get-current-user-guild-member",
      "get-current-user-guild-member",
      "get-current-user-guild-member",
      "get-current-user-guild-member",
      "leave-guild",
      "leave-guild",
      "leave-guild",
      "leave-guild",
      "create-dm",
      "create-dm",
      "create-dm",
      "create-dm",
      "create-dm-json-params",
      "create-group-dm",
      "create-group-dm",
      "create-group-dm",
      "create-group-dm",
      "create-group-dm-json-params",
      "get-user-connections",
      "get-user-connections",
      "get-user-connections",
      "get-user-connections",
      "voice-resource",
      "voice-resource",
      "voice-resource",
      "voice-resource",
      "voice-state-object",
      "voice-state-object",
      "voice-state-object",
      "voice-state-object",
      "voice-state-object-voice-state-structure",
      "voice-state-object-voice-state-structure",
      "voice-state-object-voice-state-structure",
      "voice-state-object-voice-state-structure"
    ],
    "name": "Voice State Structure",
    "props": [
      {
        "name": "guild_id?",
        "description": "the guild id this voice state is for",
        "value": "snowflake"
      },
      {
        "name": "channel_id",
        "description": "the channel id this user is connected to",
        "value": "?snowflake"
      },
      {
        "name": "user_id",
        "description": "the user id this voice state is for",
        "value": "snowflake"
      },
      {
        "name": "member?",
        "description": "the guild member this voice state is for",
        "value": "guild member object"
      },
      {
        "name": "session_id",
        "description": "the session id for this voice state",
        "value": "string"
      },
      {
        "name": "deaf",
        "description": "whether this user is deafened by the server",
        "value": "boolean"
      },
      {
        "name": "mute",
        "description": "whether this user is muted by the server",
        "value": "boolean"
      },
      {
        "name": "self_deaf",
        "description": "whether this user is locally deafened",
        "value": "boolean"
      },
      {
        "name": "self_mute",
        "description": "whether this user is locally muted",
        "value": "boolean"
      },
      {
        "name": "self_stream?",
        "description": "whether this user is streaming using \"Go Live",
        "value": "boolean"
      },
      {
        "name": "self_video",
        "description": "whether this user's camera is enabled",
        "value": "boolean"
      },
      {
        "name": "suppress",
        "description": "whether this user is muted by the current user",
        "value": "boolean"
      },
      {
        "name": "request_to_speak_timestamp",
        "description": "the time at which the user requested to speak",
        "value": "?ISO8601 timestamp"
      }
    ]
  },
  {
    "tree": [
      "voice-state-object-example-voice-state",
      "voice-region-object",
      "voice-region-object",
      "voice-region-object",
      "voice-region-object",
      "voice-region-object-voice-region-structure",
      "voice-region-object-voice-region-structure",
      "voice-region-object-voice-region-structure",
      "voice-region-object-voice-region-structure",
      "list-voice-regions",
      "list-voice-regions",
      "list-voice-regions",
      "list-voice-regions",
      "webhook-resource",
      "webhook-resource",
      "webhook-resource",
      "webhook-resource",
      "webhook-object",
      "webhook-object",
      "webhook-object",
      "webhook-object",
      "webhook-object-webhook-structure",
      "webhook-object-webhook-structure",
      "webhook-object-webhook-structure",
      "webhook-object-webhook-structure"
    ],
    "name": "Webhook Structure",
    "props": [
      {
        "name": "id",
        "description": "the id of the webhook",
        "value": "snowflake"
      },
      {
        "name": "type",
        "description": "the type of the webhook",
        "value": "integer"
      },
      {
        "name": "guild_id?",
        "description": "the guild id this webhook is for, if any",
        "value": "?snowflake"
      },
      {
        "name": "channel_id",
        "description": "the channel id this webhook is for, if any",
        "value": "?snowflake"
      },
      {
        "name": "user?",
        "description": "the user this webhook was created by (not returned when getting a webhook with its token)",
        "value": "user object"
      },
      {
        "name": "name",
        "description": "the default name of the webhook",
        "value": "?string"
      },
      {
        "name": "avatar",
        "description": "the default user avatar hash of the webhook",
        "value": "?string"
      },
      {
        "name": "token?",
        "description": "the secure token of the webhook (returned for Incoming Webhooks)",
        "value": "string"
      },
      {
        "name": "application_id",
        "description": "the bot/OAuth2 application that created this webhook",
        "value": "?snowflake"
      },
      {
        "name": "source_guild?",
        "description": "the guild of the channel that this webhook is following (returned for Channel Follower Webhooks)",
        "value": "partial guild object"
      },
      {
        "name": "source_channel?",
        "description": "the channel that this webhook is following (returned for Channel Follower Webhooks)",
        "value": "partial channel object"
      },
      {
        "name": "url?",
        "description": "the url used for executing the webhook (returned by the webhooks OAuth2 flow)",
        "value": "string"
      }
    ]
  },
  {
    "tree": [
      "webhook-object-webhook-types"
    ],
    "name": "Webhook Types",
    "props": [
      {
        "name": "Incoming",
        "description": "Incoming Webhooks can post messages to channels with a generated token",
        "value": 1
      },
      {
        "name": "Channel Follower",
        "description": "Channel Follower Webhooks are internal webhooks used with Channel Following to post new messages into channels",
        "value": 2
      },
      {
        "name": "Application",
        "description": "Application webhooks are webhooks used with Interactions",
        "value": 3
      }
    ]
  },
  {
    "tree": [
      "webhook-object-example-application-webhook",
      "webhook-object-example-application-webhook"
    ],
    "name": "Example Application Webhook",
    "description": "Create a new webhookMANAGE_WEBHOOKSa webhook object on success. Webhook names follow our naming restrictions that can be found in our Usernames and Nicknames documentation, with the following additional stipulations:",
    "props": [
      {
        "name": "name",
        "description": "name of the webhook (1-80 characters)",
        "value": "string"
      },
      {
        "name": "avatar?",
        "description": "image for the default webhook avatar",
        "value": "?image data"
      }
    ]
  },
  {
    "tree": [
      "webhook-object-example-application-webhook",
      "webhook-object-example-application-webhook",
      "create-webhook",
      "create-webhook",
      "create-webhook",
      "create-webhook",
      "create-webhook-json-params",
      "get-channel-webhooks",
      "get-channel-webhooks",
      "get-channel-webhooks",
      "get-channel-webhooks",
      "get-guild-webhooks",
      "get-guild-webhooks",
      "get-guild-webhooks",
      "get-guild-webhooks",
      "get-webhook",
      "get-webhook",
      "get-webhook",
      "get-webhook",
      "get-webhook-with-token",
      "get-webhook-with-token",
      "get-webhook-with-token",
      "get-webhook-with-token",
      "modify-webhook",
      "modify-webhook",
      "modify-webhook",
      "modify-webhook",
      "modify-webhook-json-params",
      "modify-webhook-with-token",
      "modify-webhook-with-token",
      "modify-webhook-with-token",
      "modify-webhook-with-token",
      "delete-webhook",
      "delete-webhook",
      "delete-webhook",
      "delete-webhook",
      "delete-webhook-with-token",
      "delete-webhook-with-token",
      "delete-webhook-with-token",
      "delete-webhook-with-token",
      "execute-webhook",
      "execute-webhook",
      "execute-webhook",
      "execute-webhook",
      "execute-webhook-query-string-params",
      "execute-webhook-json-form-params",
      "execute-slack-compatible-webhook",
      "execute-slack-compatible-webhook",
      "execute-slack-compatible-webhook",
      "execute-slack-compatible-webhook",
      "execute-slack-compatible-webhook-query-string-params",
      "execute-github-compatible-webhook",
      "execute-github-compatible-webhook",
      "execute-github-compatible-webhook",
      "execute-github-compatible-webhook",
      "execute-github-compatible-webhook-query-string-params",
      "get-webhook-message",
      "get-webhook-message",
      "get-webhook-message",
      "get-webhook-message",
      "get-webhook-message-query-string-params",
      "edit-webhook-message",
      "edit-webhook-message",
      "edit-webhook-message",
      "edit-webhook-message",
      "edit-webhook-message-query-string-params",
      "edit-webhook-message-json-form-params",
      "delete-webhook-message",
      "delete-webhook-message",
      "delete-webhook-message",
      "delete-webhook-message",
      "delete-webhook-message-query-string-params",
      "certified-devices",
      "certified-devices",
      "certified-devices",
      "certified-devices",
      "how-s-it-work-",
      "how-s-it-work-",
      "how-s-it-work-",
      "how-s-it-work-",
      "connecting",
      "connecting",
      "connecting",
      "connecting",
      "connecting-query-string-params",
      "connecting-query-string-params",
      "connecting-query-string-params",
      "connecting-query-string-params"
    ],
    "name": "Query String Params",
    "description": "You can send event updates to the following URIs:",
    "props": [
      {
        "name": "v",
        "value": 1
      },
      {
        "name": "client_id",
        "value": "your app's client id"
      },
      {
        "name": "encoding",
        "value": "json"
      }
    ]
  },
  {
    "tree": [
      "models-device-object",
      "models-device-object"
    ],
    "name": "Device Object",
    "description": "These fields are only applicable for AUDIO_INPUT device types",
    "props": [
      {
        "name": "type",
        "description": "the type of device",
        "value": "device type"
      },
      {
        "name": "id",
        "description": "the device's Windows UUID",
        "value": "string"
      },
      {
        "name": "vendor",
        "description": "the hardware vendor",
        "value": "vendor object"
      },
      {
        "name": "model",
        "description": "the model of the product",
        "value": "model object"
      },
      {
        "name": "related",
        "description": "UUIDs of related devices",
        "value": "array of strings"
      },
      {
        "name": "echo_cancellation?",
        "description": "if the device's native echo cancellation is enabled",
        "value": "boolean"
      },
      {
        "name": "noise_suppression?",
        "description": "if the device's native noise suppression is enabled",
        "value": "boolean"
      },
      {
        "name": "automatic_gain_control?",
        "description": "if the device's native automatic gain control is enabled",
        "value": "boolean"
      },
      {
        "name": "hardware_mute?",
        "description": "if the device is hardware muted",
        "value": "boolean"
      }
    ]
  },
  {
    "tree": [
      "models-vendor-object"
    ],
    "name": "Vendor Object",
    "props": [
      {
        "name": "name",
        "description": "name of the vendor",
        "value": "string"
      },
      {
        "name": "url",
        "description": "url for the vendor",
        "value": "string"
      }
    ]
  },
  {
    "tree": [
      "models-model-object"
    ],
    "name": "Model Object",
    "props": [
      {
        "name": "name",
        "description": "name of the model",
        "value": "string"
      },
      {
        "name": "url",
        "description": "url for the model",
        "value": "string"
      }
    ]
  },
  {
    "tree": [
      "models-device-type",
      "community-resources",
      "community-resources",
      "community-resources",
      "community-resources",
      "discord-developers",
      "discord-developers",
      "discord-developers",
      "discord-developers",
      "libraries",
      "libraries",
      "libraries",
      "libraries",
      "libraries-discord-libraries",
      "libraries-discord-libraries",
      "libraries-discord-libraries",
      "libraries-discord-libraries",
      "interactions",
      "interactions",
      "interactions",
      "interactions",
      "game-sdk-tools",
      "game-sdk-tools",
      "game-sdk-tools",
      "game-sdk-tools",
      "dispatch-tools",
      "dispatch-tools",
      "dispatch-tools",
      "dispatch-tools",
      "permission-calculators",
      "permission-calculators",
      "permission-calculators",
      "permission-calculators",
      "intent-calculators",
      "intent-calculators",
      "intent-calculators",
      "intent-calculators",
      "embed-visualizer",
      "embed-visualizer",
      "embed-visualizer",
      "embed-visualizer",
      "api-types",
      "api-types",
      "api-types",
      "api-types",
      "gateways",
      "gateways",
      "gateways",
      "gateways",
      "gateways-gateway-versions",
      "gateways-gateway-versions",
      "gateways-gateway-versions",
      "gateways-gateway-versions"
    ],
    "name": "Gateway Versions",
    "props": [
      {
        "name": "9",
        "value": "Available"
      },
      {
        "name": "8",
        "value": "Available"
      },
      {
        "name": "7",
        "value": "Doesn't look like anything to me"
      },
      {
        "name": "6",
        "value": "Deprecated"
      },
      {
        "name": "5",
        "value": "Discontinued"
      },
      {
        "name": "4",
        "value": "Discontinued"
      }
    ]
  },
  {
    "tree": [],
    "name": "Gateway Payload Structure",
    "description": "Packets sent from the client to the Gateway API are encapsulated within a gateway payload object and must have the proper opcode and data object set. The payload object can then be serialized in the format of choice (see ETF/JSON), and sent over the websocket. Payloads to the gateway are limited to a maximum of 4096 bytes sent, going over this will cause a connection termination with error code 4002.",
    "props": [
      {
        "name": "op",
        "description": "opcode for the payload",
        "value": "integer"
      },
      {
        "name": "d",
        "description": "event data",
        "value": "?mixed"
      },
      {
        "name": "s",
        "description": "sequence number, used for resuming sessions and heartbeats",
        "value": "?integer"
      },
      {
        "name": "t",
        "description": "the event name for this payload",
        "value": "?string"
      }
    ]
  },
  {
    "tree": [
      "connecting-gateway-url-query-string-params",
      "connecting-gateway-url-query-string-params"
    ],
    "name": "Gateway URL Query String Params",
    "description": "Once connected, the client should immediately receive an Opcode 10 Hello payload, with information on the connection's heartbeat interval:",
    "props": [
      {
        "name": "v",
        "description": "Gateway Version to use",
        "value": "integer"
      },
      {
        "name": "encoding",
        "description": "The encoding of received gateway packets",
        "value": "string"
      },
      {
        "name": "compress?",
        "description": "The (optional) compression of gateway packets",
        "value": "string"
      }
    ]
  },
  {
    "tree": [
      "commands-and-events-gateway-commands",
      "commands-and-events-gateway-commands"
    ],
    "name": "Gateway Commands",
    "description": "Events are payloads sent over the socket to a client that correspond to events in Discord.",
    "props": [
      {
        "name": "Identify",
        "description": "triggers the initial handshake with the gateway",
        "value": "Identify"
      },
      {
        "name": "Resume",
        "description": "resumes a dropped gateway connection",
        "value": "Resume"
      },
      {
        "name": "Heartbeat",
        "description": "maintains an active gateway connection",
        "value": "Heartbeat"
      },
      {
        "name": "Request Guild Members",
        "description": "requests members for a guild",
        "value": "Request Guild Members"
      },
      {
        "name": "Update Voice State",
        "description": "joins, moves, or disconnects the client from a voice channel",
        "value": "Update Voice State"
      },
      {
        "name": "Update Presence",
        "description": "updates a client's presence",
        "value": "Update Presence"
      }
    ]
  },
  {
    "tree": [],
    "name": "Gateway Events",
    "description": "Used to trigger the initial handshake with the gateway.",
    "props": [
      {
        "name": "Hello",
        "description": "defines the heartbeat interval",
        "value": "Hello"
      },
      {
        "name": "Ready",
        "description": "contains the initial state information",
        "value": "Ready"
      },
      {
        "name": "Resumed",
        "description": "response to Resume",
        "value": "Resumed"
      },
      {
        "name": "Reconnect",
        "description": "server is going away, client should reconnect to gateway and resume",
        "value": "Reconnect"
      },
      {
        "name": "Invalid Session",
        "description": "failure response to Identify or Resume or invalid active session",
        "value": "Invalid Session"
      },
      {
        "name": "Channel Create",
        "description": "new guild channel created",
        "value": "Channel Create"
      },
      {
        "name": "Channel Update",
        "description": "channel was updated",
        "value": "Channel Update"
      },
      {
        "name": "Channel Delete",
        "description": "channel was deleted",
        "value": "Channel Delete"
      },
      {
        "name": "Channel Pins Update",
        "description": "message was pinned or unpinned",
        "value": "Channel Pins Update"
      },
      {
        "name": "Thread Create",
        "description": "thread created, also sent when being added to a private thread",
        "value": "Thread Create"
      },
      {
        "name": "Thread Update",
        "description": "thread was updated",
        "value": "Thread Update"
      },
      {
        "name": "Thread Delete",
        "description": "thread was deleted",
        "value": "Thread Delete"
      },
      {
        "name": "Thread List Sync",
        "description": "sent when gaining access to a channel, contains all active threads in that channel",
        "value": "Thread List Sync"
      },
      {
        "name": "Thread Member Update",
        "description": "thread member for the current user was updated",
        "value": "Thread Member Update"
      },
      {
        "name": "Thread Members Update",
        "description": "some user(s) were added to or removed from a thread",
        "value": "Thread Members Update"
      },
      {
        "name": "Guild Create",
        "description": "lazy-load for unavailable guild, guild became available, or user joined a new guild",
        "value": "Guild Create"
      },
      {
        "name": "Guild Update",
        "description": "guild was updated",
        "value": "Guild Update"
      },
      {
        "name": "Guild Delete",
        "description": "guild became unavailable, or user left/was removed from a guild",
        "value": "Guild Delete"
      },
      {
        "name": "Guild Ban Add",
        "description": "user was banned from a guild",
        "value": "Guild Ban Add"
      },
      {
        "name": "Guild Ban Remove",
        "description": "user was unbanned from a guild",
        "value": "Guild Ban Remove"
      },
      {
        "name": "Guild Emojis Update",
        "description": "guild emojis were updated",
        "value": "Guild Emojis Update"
      },
      {
        "name": "Guild Stickers Update",
        "description": "guild stickers were updated",
        "value": "Guild Stickers Update"
      },
      {
        "name": "Guild Integrations Update",
        "description": "guild integration was updated",
        "value": "Guild Integrations Update"
      },
      {
        "name": "Guild Member Add",
        "description": "new user joined a guild",
        "value": "Guild Member Add"
      },
      {
        "name": "Guild Member Remove",
        "description": "user was removed from a guild",
        "value": "Guild Member Remove"
      },
      {
        "name": "Guild Member Update",
        "description": "guild member was updated",
        "value": "Guild Member Update"
      },
      {
        "name": "Guild Members Chunk",
        "description": "response to Request Guild Members",
        "value": "Guild Members Chunk"
      },
      {
        "name": "Guild Role Create",
        "description": "guild role was created",
        "value": "Guild Role Create"
      },
      {
        "name": "Guild Role Update",
        "description": "guild role was updated",
        "value": "Guild Role Update"
      },
      {
        "name": "Guild Role Delete",
        "description": "guild role was deleted",
        "value": "Guild Role Delete"
      },
      {
        "name": "Guild Scheduled Event Create",
        "description": "guild scheduled event was created",
        "value": "Guild Scheduled Event Create"
      },
      {
        "name": "Guild Scheduled Event Update",
        "description": "guild scheduled event was updated",
        "value": "Guild Scheduled Event Update"
      },
      {
        "name": "Guild Scheduled Event Delete",
        "description": "guild scheduled event was deleted",
        "value": "Guild Scheduled Event Delete"
      },
      {
        "name": "Guild Scheduled Event User Add",
        "description": "user subscribed to a guild scheduled event",
        "value": "Guild Scheduled Event User Add"
      },
      {
        "name": "Guild Scheduled Event User Remove",
        "description": "user unsubscribed from a guild scheduled event",
        "value": "Guild Scheduled Event User Remove"
      },
      {
        "name": "Integration Create",
        "description": "guild integration was created",
        "value": "Integration Create"
      },
      {
        "name": "Integration Update",
        "description": "guild integration was updated",
        "value": "Integration Update"
      },
      {
        "name": "Integration Delete",
        "description": "guild integration was deleted",
        "value": "Integration Delete"
      },
      {
        "name": "Interaction Create",
        "description": "user used an interaction, such as an Application Command",
        "value": "Interaction Create"
      },
      {
        "name": "Invite Create",
        "description": "invite to a channel was created",
        "value": "Invite Create"
      },
      {
        "name": "Invite Delete",
        "description": "invite to a channel was deleted",
        "value": "Invite Delete"
      },
      {
        "name": "Message Create",
        "description": "message was created",
        "value": "Message Create"
      },
      {
        "name": "Message Update",
        "description": "message was edited",
        "value": "Message Update"
      },
      {
        "name": "Message Delete",
        "description": "message was deleted",
        "value": "Message Delete"
      },
      {
        "name": "Message Delete Bulk",
        "description": "multiple messages were deleted at once",
        "value": "Message Delete Bulk"
      },
      {
        "name": "Message Reaction Add",
        "description": "user reacted to a message",
        "value": "Message Reaction Add"
      },
      {
        "name": "Message Reaction Remove",
        "description": "user removed a reaction from a message",
        "value": "Message Reaction Remove"
      },
      {
        "name": "Message Reaction Remove All",
        "description": "all reactions were explicitly removed from a message",
        "value": "Message Reaction Remove All"
      },
      {
        "name": "Message Reaction Remove Emoji",
        "description": "all reactions for a given emoji were explicitly removed from a message",
        "value": "Message Reaction Remove Emoji"
      },
      {
        "name": "Presence Update",
        "description": "user was updated",
        "value": "Presence Update"
      },
      {
        "name": "Stage Instance Create",
        "description": "stage instance was created",
        "value": "Stage Instance Create"
      },
      {
        "name": "Stage Instance Delete",
        "description": "stage instance was deleted or closed",
        "value": "Stage Instance Delete"
      },
      {
        "name": "Stage Instance Update",
        "description": "stage instance was updated",
        "value": "Stage Instance Update"
      },
      {
        "name": "Typing Start",
        "description": "user started typing in a channel",
        "value": "Typing Start"
      },
      {
        "name": "User Update",
        "description": "properties about the user changed",
        "value": "User Update"
      },
      {
        "name": "Voice State Update",
        "description": "someone joined, left, or moved a voice channel",
        "value": "Voice State Update"
      },
      {
        "name": "Voice Server Update",
        "description": "guild's voice server was updated",
        "value": "Voice Server Update"
      },
      {
        "name": "Webhooks Update",
        "description": "guild channel webhook was created, update, or deleted",
        "value": "Webhooks Update"
      }
    ]
  },
  {
    "tree": [],
    "name": "Identify Structure",
    "props": [
      {
        "name": "token",
        "description": "authentication token",
        "value": "string"
      },
      {
        "name": "properties",
        "description": "connection properties",
        "value": "object"
      },
      {
        "name": "compress?",
        "description": "whether this connection supports compression of packets",
        "value": "boolean"
      },
      {
        "name": "large_threshold?",
        "description": "value between 50 and 250, total number of members where the gateway will stop sending offline members in the guild member list",
        "value": "integer"
      },
      {
        "name": "shard?",
        "description": "used for Guild Sharding",
        "value": "array of two integers"
      },
      {
        "name": "presence?",
        "description": "presence structure for initial presence information",
        "value": "update presence object"
      },
      {
        "name": "intents",
        "description": "the Gateway Intents you wish to receive",
        "value": "integer"
      }
    ]
  },
  {
    "tree": [],
    "name": "Identify Connection Properties",
    "props": [
      {
        "name": "$os",
        "description": "your operating system",
        "value": "string"
      },
      {
        "name": "$browser",
        "description": "your library name",
        "value": "string"
      },
      {
        "name": "$device",
        "description": "your library name",
        "value": "string"
      }
    ]
  },
  {
    "tree": [
      "resume",
      "resume",
      "resume",
      "resume",
      "resume-resume-structure",
      "resume-resume-structure",
      "resume-resume-structure",
      "resume-resume-structure"
    ],
    "name": "Resume Structure",
    "props": [
      {
        "name": "token",
        "description": "session token",
        "value": "string"
      },
      {
        "name": "session_id",
        "description": "session id",
        "value": "string"
      },
      {
        "name": "seq",
        "description": "last sequence number received",
        "value": "integer"
      }
    ]
  },
  {
    "tree": [
      "request-guild-members-guild-request-members-structure",
      "request-guild-members-guild-request-members-structure"
    ],
    "name": "Guild Request Members Structure",
    "props": [
      {
        "name": "guild_id",
        "description": "id of the guild to get members for",
        "value": "snowflake"
      },
      {
        "name": "query?",
        "description": "string that username starts with, or an empty string to return all members",
        "value": "string"
      },
      {
        "name": "limit",
        "description": "maximum number of members to send matching the query; a limit of 0 can be used with an empty string query to return all members",
        "value": "integer"
      },
      {
        "name": "presences?",
        "description": "used to specify if we want the presences of the matched members",
        "value": "boolean"
      },
      {
        "name": "user_ids?",
        "description": "used to specify which users you wish to fetch",
        "value": "snowflake or array of snowflakes"
      },
      {
        "name": "nonce?",
        "description": "nonce to identify the Guild Members Chunk response",
        "value": "string"
      }
    ]
  },
  {
    "tree": [
      "request-guild-members-guild-request-members",
      "update-voice-state",
      "update-voice-state",
      "update-voice-state",
      "update-voice-state",
      "update-voice-state-gateway-voice-state-update-structure",
      "update-voice-state-gateway-voice-state-update-structure",
      "update-voice-state-gateway-voice-state-update-structure",
      "update-voice-state-gateway-voice-state-update-structure"
    ],
    "name": "Gateway Voice State Update Structure",
    "props": [
      {
        "name": "guild_id",
        "description": "id of the guild",
        "value": "snowflake"
      },
      {
        "name": "channel_id",
        "description": "id of the voice channel client wants to join (null if disconnecting)",
        "value": "?snowflake"
      },
      {
        "name": "self_mute",
        "description": "is the client muted",
        "value": "boolean"
      },
      {
        "name": "self_deaf",
        "description": "is the client deafened",
        "value": "boolean"
      }
    ]
  },
  {
    "tree": [
      "update-voice-state-example-gateway-voice-state-update",
      "update-presence",
      "update-presence",
      "update-presence",
      "update-presence",
      "update-presence-gateway-presence-update-structure",
      "update-presence-gateway-presence-update-structure",
      "update-presence-gateway-presence-update-structure",
      "update-presence-gateway-presence-update-structure"
    ],
    "name": "Gateway Presence Update Structure",
    "props": [
      {
        "name": "since",
        "description": "unix time (in milliseconds) of when the client went idle, or null if the client is not idle",
        "value": "?integer"
      },
      {
        "name": "activities",
        "description": "the user's activities",
        "value": "array of activity objects"
      },
      {
        "name": "status",
        "description": "the user's new status",
        "value": "string"
      },
      {
        "name": "afk",
        "description": "whether or not the client is afk",
        "value": "boolean"
      }
    ]
  },
  {
    "tree": [
      "update-presence-status-types"
    ],
    "name": "Status Types",
    "props": [
      {
        "name": "online",
        "description": "Online",
        "value": "online"
      },
      {
        "name": "dnd",
        "description": "Do Not Disturb",
        "value": "dnd"
      },
      {
        "name": "idle",
        "description": "AFK",
        "value": "idle"
      },
      {
        "name": "invisible",
        "description": "Invisible and shown as offline",
        "value": "invisible"
      },
      {
        "name": "offline",
        "description": "Offline",
        "value": "offline"
      }
    ]
  },
  {
    "tree": [
      "connecting-and-resuming",
      "connecting-and-resuming",
      "connecting-and-resuming",
      "connecting-and-resuming",
      "hello",
      "hello",
      "hello",
      "hello",
      "hello-hello-structure",
      "hello-hello-structure",
      "hello-hello-structure",
      "hello-hello-structure"
    ],
    "name": "Hello Structure",
    "props": [
      {
        "name": "heartbeat_interval",
        "description": "the interval (in milliseconds) the client should heartbeat with",
        "value": "integer"
      }
    ]
  },
  {
    "tree": [
      "hello-example-hello",
      "ready",
      "ready",
      "ready",
      "ready",
      "ready-ready-event-fields",
      "ready-ready-event-fields",
      "ready-ready-event-fields",
      "ready-ready-event-fields"
    ],
    "name": "Ready Event Fields",
    "props": [
      {
        "name": "v",
        "description": "gateway version",
        "value": "integer"
      },
      {
        "name": "user",
        "description": "information about the user including email",
        "value": "user object"
      },
      {
        "name": "guilds",
        "description": "the guilds the user is in",
        "value": "array of Unavailable Guild objects"
      },
      {
        "name": "session_id",
        "description": "used for resuming connections",
        "value": "string"
      },
      {
        "name": "shard?",
        "description": "the shard information associated with this session, if sent when identifying",
        "value": "array of two integers"
      },
      {
        "name": "application",
        "description": "contains id and flags",
        "value": "partial application object"
      }
    ]
  },
  {
    "tree": [
      "thread-list-sync-thread-list-sync-event-fields",
      "thread-list-sync-thread-list-sync-event-fields"
    ],
    "name": "Thread List Sync Event Fields",
    "props": [
      {
        "name": "guild_id",
        "description": "the id of the guild",
        "value": "snowflake"
      },
      {
        "name": "channel_ids?",
        "description": "the parent channel ids whose threads are being synced. If omitted, then threads were synced for the entire guild. This array may contain channel_ids that have no active threads as well, so you know to clear that data.",
        "value": "array of snowflakes"
      },
      {
        "name": "threads",
        "description": "all active threads in the given channels that the current user can access",
        "value": "array of channel objects"
      },
      {
        "name": "members",
        "description": "all thread member objects from the synced threads for the current user, indicating which threads the current user has been added to",
        "value": "array of thread member objects"
      }
    ]
  },
  {
    "tree": [
      "thread-member-update",
      "thread-member-update-thread-member-update-event-extra-fields",
      "thread-member-update-thread-member-update-event-extra-fields",
      "thread-member-update-thread-member-update-event-extra-fields",
      "thread-member-update-thread-member-update-event-extra-fields"
    ],
    "name": "Thread Member Update Event Extra Fields",
    "props": [
      {
        "name": "guild_id",
        "description": "the id of the guild",
        "value": "snowflake"
      }
    ]
  },
  {
    "tree": [
      "thread-members-update",
      "thread-members-update-thread-members-update-event-fields",
      "thread-members-update-thread-members-update-event-fields",
      "thread-members-update-thread-members-update-event-fields",
      "thread-members-update-thread-members-update-event-fields"
    ],
    "name": "Thread Members Update Event Fields",
    "description": "In this gateway event, the thread member objects will also include the guild member and nullable presence objects for each added thread member.",
    "props": [
      {
        "name": "id",
        "description": "the id of the thread",
        "value": "snowflake"
      },
      {
        "name": "guild_id",
        "description": "the id of the guild",
        "value": "snowflake"
      },
      {
        "name": "member_count",
        "description": "the approximate number of members in the thread, capped at 50",
        "value": "integer"
      },
      {
        "name": "added_members?",
        "description": "the users who were added to the thread",
        "value": "array of thread member objects"
      },
      {
        "name": "removed_member_ids?",
        "description": "the id of the users who were removed from the thread",
        "value": "array of snowflakes"
      }
    ]
  },
  {
    "tree": [
      "channel-pins-update",
      "channel-pins-update-channel-pins-update-event-fields",
      "channel-pins-update-channel-pins-update-event-fields",
      "channel-pins-update-channel-pins-update-event-fields",
      "channel-pins-update-channel-pins-update-event-fields"
    ],
    "name": "Channel Pins Update Event Fields",
    "props": [
      {
        "name": "guild_id?",
        "description": "the id of the guild",
        "value": "snowflake"
      },
      {
        "name": "channel_id",
        "description": "the id of the channel",
        "value": "snowflake"
      },
      {
        "name": "last_pin_timestamp?",
        "description": "the time at which the most recent pinned message was pinned",
        "value": "?ISO8601 timestamp"
      }
    ]
  },
  {
    "tree": [
      "guild-create",
      "guild-update",
      "guild-update",
      "guild-update",
      "guild-update",
      "guild-delete",
      "guild-delete",
      "guild-delete",
      "guild-delete",
      "guild-ban-add",
      "guild-ban-add",
      "guild-ban-add",
      "guild-ban-add",
      "guild-ban-add-guild-ban-add-event-fields",
      "guild-ban-add-guild-ban-add-event-fields",
      "guild-ban-add-guild-ban-add-event-fields",
      "guild-ban-add-guild-ban-add-event-fields"
    ],
    "name": "Guild Ban Add Event Fields",
    "props": [
      {
        "name": "guild_id",
        "description": "id of the guild",
        "value": "snowflake"
      },
      {
        "name": "user",
        "description": "the banned user",
        "value": "a user object"
      }
    ]
  },
  {
    "tree": [
      "guild-ban-remove",
      "guild-ban-remove-guild-ban-remove-event-fields",
      "guild-ban-remove-guild-ban-remove-event-fields",
      "guild-ban-remove-guild-ban-remove-event-fields",
      "guild-ban-remove-guild-ban-remove-event-fields"
    ],
    "name": "Guild Ban Remove Event Fields",
    "props": [
      {
        "name": "guild_id",
        "description": "id of the guild",
        "value": "snowflake"
      },
      {
        "name": "user",
        "description": "the unbanned user",
        "value": "a user object"
      }
    ]
  },
  {
    "tree": [
      "guild-emojis-update",
      "guild-emojis-update-guild-emojis-update-event-fields",
      "guild-emojis-update-guild-emojis-update-event-fields",
      "guild-emojis-update-guild-emojis-update-event-fields",
      "guild-emojis-update-guild-emojis-update-event-fields"
    ],
    "name": "Guild Emojis Update Event Fields",
    "props": [
      {
        "name": "guild_id",
        "description": "id of the guild",
        "value": "snowflake"
      },
      {
        "name": "emojis",
        "description": "array of emojis",
        "value": "array"
      }
    ]
  },
  {
    "tree": [
      "guild-stickers-update",
      "guild-stickers-update-guild-stickers-update-event-fields",
      "guild-stickers-update-guild-stickers-update-event-fields",
      "guild-stickers-update-guild-stickers-update-event-fields",
      "guild-stickers-update-guild-stickers-update-event-fields"
    ],
    "name": "Guild Stickers Update Event Fields",
    "props": [
      {
        "name": "guild_id",
        "description": "id of the guild",
        "value": "snowflake"
      },
      {
        "name": "stickers",
        "description": "array of stickers",
        "value": "array"
      }
    ]
  },
  {
    "tree": [
      "guild-integrations-update",
      "guild-integrations-update-guild-integrations-update-event-fields",
      "guild-integrations-update-guild-integrations-update-event-fields",
      "guild-integrations-update-guild-integrations-update-event-fields",
      "guild-integrations-update-guild-integrations-update-event-fields"
    ],
    "name": "Guild Integrations Update Event Fields",
    "props": [
      {
        "name": "guild_id",
        "description": "id of the guild whose integrations were updated",
        "value": "snowflake"
      }
    ]
  },
  {
    "tree": [
      "guild-member-add",
      "guild-member-add-guild-member-add-extra-fields",
      "guild-member-add-guild-member-add-extra-fields",
      "guild-member-add-guild-member-add-extra-fields",
      "guild-member-add-guild-member-add-extra-fields"
    ],
    "name": "Guild Member Add Extra Fields",
    "props": [
      {
        "name": "guild_id",
        "description": "id of the guild",
        "value": "snowflake"
      }
    ]
  },
  {
    "tree": [
      "guild-member-remove",
      "guild-member-remove-guild-member-remove-event-fields",
      "guild-member-remove-guild-member-remove-event-fields",
      "guild-member-remove-guild-member-remove-event-fields",
      "guild-member-remove-guild-member-remove-event-fields"
    ],
    "name": "Guild Member Remove Event Fields",
    "props": [
      {
        "name": "guild_id",
        "description": "the id of the guild",
        "value": "snowflake"
      },
      {
        "name": "user",
        "description": "the user who was removed",
        "value": "a user object"
      }
    ]
  },
  {
    "tree": [
      "guild-member-update",
      "guild-member-update-guild-member-update-event-fields",
      "guild-member-update-guild-member-update-event-fields",
      "guild-member-update-guild-member-update-event-fields",
      "guild-member-update-guild-member-update-event-fields"
    ],
    "name": "Guild Member Update Event Fields",
    "props": [
      {
        "name": "guild_id",
        "description": "the id of the guild",
        "value": "snowflake"
      },
      {
        "name": "roles",
        "description": "user role ids",
        "value": "array of snowflakes"
      },
      {
        "name": "user",
        "description": "the user",
        "value": "a user object"
      },
      {
        "name": "nick?",
        "description": "nickname of the user in the guild",
        "value": "?string"
      },
      {
        "name": "avatar",
        "description": "the member's guild avatar hash",
        "value": "?string"
      },
      {
        "name": "joined_at",
        "description": "when the user joined the guild",
        "value": "?ISO8601 timestamp"
      },
      {
        "name": "premium_since?",
        "description": "when the user starting boosting the guild",
        "value": "?ISO8601 timestamp"
      },
      {
        "name": "deaf?",
        "description": "whether the user is deafened in voice channels",
        "value": "boolean"
      },
      {
        "name": "mute?",
        "description": "whether the user is muted in voice channels",
        "value": "boolean"
      },
      {
        "name": "pending?",
        "description": "whether the user has not yet passed the guild's Membership Screening requirements",
        "value": "boolean"
      },
      {
        "name": "communication_disabled_until?",
        "description": "when the user's timeout will expire and the user will be able to communicate in the guild again, null or a time in the past if the user is not timed out",
        "value": "?ISO8601 timestamp"
      }
    ]
  },
  {
    "tree": [
      "guild-members-chunk",
      "guild-members-chunk-guild-members-chunk-event-fields",
      "guild-members-chunk-guild-members-chunk-event-fields",
      "guild-members-chunk-guild-members-chunk-event-fields",
      "guild-members-chunk-guild-members-chunk-event-fields"
    ],
    "name": "Guild Members Chunk Event Fields",
    "props": [
      {
        "name": "guild_id",
        "description": "the id of the guild",
        "value": "snowflake"
      },
      {
        "name": "members",
        "description": "set of guild members",
        "value": "array of guild member objects"
      },
      {
        "name": "chunk_index",
        "description": "the chunk index in the expected chunks for this response (0 <= chunk_index < chunk_count)",
        "value": "integer"
      },
      {
        "name": "chunk_count",
        "description": "the total number of expected chunks for this response",
        "value": "integer"
      },
      {
        "name": "not_found?",
        "description": "if passing an invalid id to REQUEST_GUILD_MEMBERS, it will be returned here",
        "value": "array"
      },
      {
        "name": "presences?",
        "description": "if passing true to REQUEST_GUILD_MEMBERS, presences of the returned members will be here",
        "value": "array of presence objects"
      },
      {
        "name": "nonce?",
        "description": "the nonce used in the Guild Members Request",
        "value": "string"
      }
    ]
  },
  {
    "tree": [
      "guild-role-create",
      "guild-role-create-guild-role-create-event-fields",
      "guild-role-create-guild-role-create-event-fields",
      "guild-role-create-guild-role-create-event-fields",
      "guild-role-create-guild-role-create-event-fields"
    ],
    "name": "Guild Role Create Event Fields",
    "props": [
      {
        "name": "guild_id",
        "description": "the id of the guild",
        "value": "snowflake"
      },
      {
        "name": "role",
        "description": "the role created",
        "value": "a role object"
      }
    ]
  },
  {
    "tree": [
      "guild-role-update",
      "guild-role-update-guild-role-update-event-fields",
      "guild-role-update-guild-role-update-event-fields",
      "guild-role-update-guild-role-update-event-fields",
      "guild-role-update-guild-role-update-event-fields"
    ],
    "name": "Guild Role Update Event Fields",
    "props": [
      {
        "name": "guild_id",
        "description": "the id of the guild",
        "value": "snowflake"
      },
      {
        "name": "role",
        "description": "the role updated",
        "value": "a role object"
      }
    ]
  },
  {
    "tree": [
      "guild-role-delete",
      "guild-role-delete-guild-role-delete-event-fields",
      "guild-role-delete-guild-role-delete-event-fields",
      "guild-role-delete-guild-role-delete-event-fields",
      "guild-role-delete-guild-role-delete-event-fields"
    ],
    "name": "Guild Role Delete Event Fields",
    "description": "Sent when a user has subscribed to a guild scheduled event.",
    "props": [
      {
        "name": "guild_id",
        "description": "id of the guild",
        "value": "snowflake"
      },
      {
        "name": "role_id",
        "description": "id of the role",
        "value": "snowflake"
      }
    ]
  },
  {
    "tree": [
      "guild-scheduled-event-user-add-guild-scheduled-event-user-add-event-fields"
    ],
    "name": "Guild Scheduled Event User Add Event Fields",
    "description": "Sent when a user has unsubscribed from a guild scheduled event.",
    "props": [
      {
        "name": "guild_scheduled_event_id",
        "description": "id of the guild scheduled event",
        "value": "snowflake"
      },
      {
        "name": "user_id",
        "description": "id of the user",
        "value": "snowflake"
      },
      {
        "name": "guild_id",
        "description": "id of the guild",
        "value": "snowflake"
      }
    ]
  },
  {
    "tree": [
      "guild-scheduled-event-user-remove-guild-scheduled-event-user-remove-event-fields"
    ],
    "name": "Guild Scheduled Event User Remove Event Fields",
    "props": [
      {
        "name": "guild_scheduled_event_id",
        "description": "id of the guild scheduled event",
        "value": "snowflake"
      },
      {
        "name": "user_id",
        "description": "id of the user",
        "value": "snowflake"
      },
      {
        "name": "guild_id",
        "description": "id of the guild",
        "value": "snowflake"
      }
    ]
  },
  {
    "tree": [
      "guild-scheduled-event-user-remove-guild-scheduled-event-user-remove-event-fields",
      "integrations",
      "integrations",
      "integrations",
      "integrations",
      "integration-create",
      "integration-create",
      "integration-create",
      "integration-create",
      "integration-create-integration-create-event-additional-fields",
      "integration-create-integration-create-event-additional-fields",
      "integration-create-integration-create-event-additional-fields",
      "integration-create-integration-create-event-additional-fields"
    ],
    "name": "Integration Create Event Additional Fields",
    "props": [
      {
        "name": "guild_id",
        "description": "id of the guild",
        "value": "snowflake"
      }
    ]
  },
  {
    "tree": [
      "integration-update",
      "integration-update-integration-update-event-additional-fields",
      "integration-update-integration-update-event-additional-fields",
      "integration-update-integration-update-event-additional-fields",
      "integration-update-integration-update-event-additional-fields"
    ],
    "name": "Integration Update Event Additional Fields",
    "props": [
      {
        "name": "guild_id",
        "description": "id of the guild",
        "value": "snowflake"
      }
    ]
  },
  {
    "tree": [
      "integration-delete",
      "integration-delete-integration-delete-event-fields",
      "integration-delete-integration-delete-event-fields",
      "integration-delete-integration-delete-event-fields",
      "integration-delete-integration-delete-event-fields"
    ],
    "name": "Integration Delete Event Fields",
    "props": [
      {
        "name": "id",
        "description": "integration id",
        "value": "snowflake"
      },
      {
        "name": "guild_id",
        "description": "id of the guild",
        "value": "snowflake"
      },
      {
        "name": "application_id?",
        "description": "id of the bot/OAuth2 application for this discord integration",
        "value": "snowflake"
      }
    ]
  },
  {
    "tree": [
      "invite-create",
      "invite-create-invite-create-event-fields",
      "invite-create-invite-create-event-fields",
      "invite-create-invite-create-event-fields",
      "invite-create-invite-create-event-fields"
    ],
    "name": "Invite Create Event Fields",
    "props": [
      {
        "name": "channel_id",
        "description": "the channel the invite is for",
        "value": "snowflake"
      },
      {
        "name": "code",
        "description": "the unique invite code",
        "value": "string"
      },
      {
        "name": "created_at",
        "description": "the time at which the invite was created",
        "value": "ISO8601 timestamp"
      },
      {
        "name": "guild_id?",
        "description": "the guild of the invite",
        "value": "snowflake"
      },
      {
        "name": "inviter?",
        "description": "the user that created the invite",
        "value": "user object"
      },
      {
        "name": "max_age",
        "description": "how long the invite is valid for (in seconds)",
        "value": "integer"
      },
      {
        "name": "max_uses",
        "description": "the maximum number of times the invite can be used",
        "value": "integer"
      },
      {
        "name": "target_type?",
        "description": "the type of target for this voice channel invite",
        "value": "integer"
      },
      {
        "name": "target_user?",
        "description": "the user whose stream to display for this voice channel stream invite",
        "value": "user object"
      },
      {
        "name": "target_application?",
        "description": "the embedded application to open for this voice channel embedded application invite",
        "value": "partial application object"
      },
      {
        "name": "temporary",
        "description": "whether or not the invite is temporary (invited users will be kicked on disconnect unless they're assigned a role)",
        "value": "boolean"
      },
      {
        "name": "uses",
        "description": "how many times the invite has been used (always will be 0)",
        "value": "integer"
      }
    ]
  },
  {
    "tree": [
      "invite-delete",
      "invite-delete-invite-delete-event-fields",
      "invite-delete-invite-delete-event-fields",
      "invite-delete-invite-delete-event-fields",
      "invite-delete-invite-delete-event-fields"
    ],
    "name": "Invite Delete Event Fields",
    "props": [
      {
        "name": "channel_id",
        "description": "the channel of the invite",
        "value": "snowflake"
      },
      {
        "name": "guild_id?",
        "description": "the guild of the invite",
        "value": "snowflake"
      },
      {
        "name": "code",
        "description": "the unique invite code",
        "value": "string"
      }
    ]
  },
  {
    "tree": [
      "message-create",
      "message-update",
      "message-update",
      "message-update",
      "message-update",
      "message-delete",
      "message-delete",
      "message-delete",
      "message-delete",
      "message-delete-message-delete-event-fields",
      "message-delete-message-delete-event-fields",
      "message-delete-message-delete-event-fields",
      "message-delete-message-delete-event-fields"
    ],
    "name": "Message Delete Event Fields",
    "props": [
      {
        "name": "id",
        "description": "the id of the message",
        "value": "snowflake"
      },
      {
        "name": "channel_id",
        "description": "the id of the channel",
        "value": "snowflake"
      },
      {
        "name": "guild_id?",
        "description": "the id of the guild",
        "value": "snowflake"
      }
    ]
  },
  {
    "tree": [
      "message-delete-bulk",
      "message-delete-bulk-message-delete-bulk-event-fields",
      "message-delete-bulk-message-delete-bulk-event-fields",
      "message-delete-bulk-message-delete-bulk-event-fields",
      "message-delete-bulk-message-delete-bulk-event-fields"
    ],
    "name": "Message Delete Bulk Event Fields",
    "props": [
      {
        "name": "ids",
        "description": "the ids of the messages",
        "value": "array of snowflakes"
      },
      {
        "name": "channel_id",
        "description": "the id of the channel",
        "value": "snowflake"
      },
      {
        "name": "guild_id?",
        "description": "the id of the guild",
        "value": "snowflake"
      }
    ]
  },
  {
    "tree": [
      "message-reaction-add",
      "message-reaction-add-message-reaction-add-event-fields",
      "message-reaction-add-message-reaction-add-event-fields",
      "message-reaction-add-message-reaction-add-event-fields",
      "message-reaction-add-message-reaction-add-event-fields"
    ],
    "name": "Message Reaction Add Event Fields",
    "props": [
      {
        "name": "user_id",
        "description": "the id of the user",
        "value": "snowflake"
      },
      {
        "name": "channel_id",
        "description": "the id of the channel",
        "value": "snowflake"
      },
      {
        "name": "message_id",
        "description": "the id of the message",
        "value": "snowflake"
      },
      {
        "name": "guild_id?",
        "description": "the id of the guild",
        "value": "snowflake"
      },
      {
        "name": "member?",
        "description": "the member who reacted if this happened in a guild",
        "value": "member object"
      },
      {
        "name": "emoji",
        "description": "the emoji used to react - example",
        "value": "a partial emoji object"
      }
    ]
  },
  {
    "tree": [
      "message-reaction-remove",
      "message-reaction-remove-message-reaction-remove-event-fields",
      "message-reaction-remove-message-reaction-remove-event-fields",
      "message-reaction-remove-message-reaction-remove-event-fields",
      "message-reaction-remove-message-reaction-remove-event-fields"
    ],
    "name": "Message Reaction Remove Event Fields",
    "props": [
      {
        "name": "user_id",
        "description": "the id of the user",
        "value": "snowflake"
      },
      {
        "name": "channel_id",
        "description": "the id of the channel",
        "value": "snowflake"
      },
      {
        "name": "message_id",
        "description": "the id of the message",
        "value": "snowflake"
      },
      {
        "name": "guild_id?",
        "description": "the id of the guild",
        "value": "snowflake"
      },
      {
        "name": "emoji",
        "description": "the emoji used to react - example",
        "value": "a partial emoji object"
      }
    ]
  },
  {
    "tree": [
      "message-reaction-remove-all",
      "message-reaction-remove-all-message-reaction-remove-all-event-fields",
      "message-reaction-remove-all-message-reaction-remove-all-event-fields",
      "message-reaction-remove-all-message-reaction-remove-all-event-fields",
      "message-reaction-remove-all-message-reaction-remove-all-event-fields"
    ],
    "name": "Message Reaction Remove All Event Fields",
    "props": [
      {
        "name": "channel_id",
        "description": "the id of the channel",
        "value": "snowflake"
      },
      {
        "name": "message_id",
        "description": "the id of the message",
        "value": "snowflake"
      },
      {
        "name": "guild_id?",
        "description": "the id of the guild",
        "value": "snowflake"
      }
    ]
  },
  {
    "tree": [
      "message-reaction-remove-emoji",
      "message-reaction-remove-emoji-message-reaction-remove-emoji-event-fields",
      "message-reaction-remove-emoji-message-reaction-remove-emoji-event-fields",
      "message-reaction-remove-emoji-message-reaction-remove-emoji-event-fields",
      "message-reaction-remove-emoji-message-reaction-remove-emoji-event-fields"
    ],
    "name": "Message Reaction Remove Emoji Event Fields",
    "props": [
      {
        "name": "channel_id",
        "description": "the id of the channel",
        "value": "snowflake"
      },
      {
        "name": "guild_id?",
        "description": "the id of the guild",
        "value": "snowflake"
      },
      {
        "name": "message_id",
        "description": "the id of the message",
        "value": "snowflake"
      },
      {
        "name": "emoji",
        "description": "the emoji that was removed",
        "value": "partial emoji object"
      }
    ]
  },
  {
    "tree": [
      "presence-update",
      "presence-update-presence-update-event-fields",
      "presence-update-presence-update-event-fields",
      "presence-update-presence-update-event-fields",
      "presence-update-presence-update-event-fields"
    ],
    "name": "Presence Update Event Fields",
    "props": [
      {
        "name": "user",
        "description": "the user presence is being updated for",
        "value": "user object"
      },
      {
        "name": "guild_id",
        "description": "id of the guild",
        "value": "snowflake"
      },
      {
        "name": "status",
        "description": "either \"idle\", \"dnd\", \"online\", or \"offline",
        "value": "string"
      },
      {
        "name": "activities",
        "description": "user's current activities",
        "value": "array of activity objects"
      },
      {
        "name": "client_status",
        "description": "user's platform-dependent status",
        "value": "client_status object"
      }
    ]
  },
  {
    "tree": [
      "client-status-object",
      "activity-object",
      "activity-object",
      "activity-object",
      "activity-object",
      "activity-object-activity-structure",
      "activity-object-activity-structure",
      "activity-object-activity-structure",
      "activity-object-activity-structure"
    ],
    "name": "Activity Structure",
    "props": [
      {
        "name": "name",
        "description": "the activity's name",
        "value": "string"
      },
      {
        "name": "type",
        "description": "activity type",
        "value": "integer"
      },
      {
        "name": "url?",
        "description": "stream url, is validated when type is 1",
        "value": "?string"
      },
      {
        "name": "created_at",
        "description": "unix timestamp (in milliseconds) of when the activity was added to the user's session",
        "value": "integer"
      },
      {
        "name": "timestamps?",
        "description": "unix timestamps for start and/or end of the game",
        "value": "timestamps object"
      },
      {
        "name": "application_id?",
        "description": "application id for the game",
        "value": "snowflake"
      },
      {
        "name": "details?",
        "description": "what the player is currently doing",
        "value": "?string"
      },
      {
        "name": "state?",
        "description": "the user's current party status",
        "value": "?string"
      },
      {
        "name": "emoji?",
        "description": "the emoji used for a custom status",
        "value": "?emoji object"
      },
      {
        "name": "party?",
        "description": "information for the current party of the player",
        "value": "party object"
      },
      {
        "name": "assets?",
        "description": "images for the presence and their hover texts",
        "value": "assets object"
      },
      {
        "name": "secrets?",
        "description": "secrets for Rich Presence joining and spectating",
        "value": "secrets object"
      },
      {
        "name": "instance?",
        "description": "whether or not the activity is an instanced game session",
        "value": "boolean"
      },
      {
        "name": "flags?",
        "description": "activity flags ORd together, describes what the payload includes",
        "value": "integer"
      },
      {
        "name": "buttons?",
        "description": "the custom buttons shown in the Rich Presence (max 2)",
        "value": "array of buttons"
      }
    ]
  },
  {
    "tree": [
      "activity-object-activity-types"
    ],
    "name": "Activity Types",
    "props": [
      {
        "name": "Game",
        "value": 0
      },
      {
        "name": "Streaming",
        "value": 1
      },
      {
        "name": "Listening",
        "value": 2
      },
      {
        "name": "Watching",
        "value": 3
      },
      {
        "name": "Custom",
        "value": 4
      },
      {
        "name": "Competing",
        "value": 5
      }
    ]
  },
  {
    "tree": [],
    "name": "Activity Timestamps",
    "props": [
      {
        "name": "start?",
        "description": "unix time (in milliseconds) of when the activity started",
        "value": "integer"
      },
      {
        "name": "end?",
        "description": "unix time (in milliseconds) of when the activity ends",
        "value": "integer"
      }
    ]
  },
  {
    "tree": [],
    "name": "Activity Emoji",
    "props": [
      {
        "name": "name",
        "description": "the name of the emoji",
        "value": "string"
      },
      {
        "name": "id?",
        "description": "the id of the emoji",
        "value": "snowflake"
      },
      {
        "name": "animated?",
        "description": "whether this emoji is animated",
        "value": "boolean"
      }
    ]
  },
  {
    "tree": [],
    "name": "Activity Party",
    "props": [
      {
        "name": "id?",
        "description": "the id of the party",
        "value": "string"
      },
      {
        "name": "size?",
        "description": "used to show the party's current and maximum size",
        "value": "array of two integers"
      }
    ]
  },
  {
    "tree": [],
    "name": "Activity Assets",
    "props": [
      {
        "name": "large_image?",
        "description": "see Activity Asset Image",
        "value": "string"
      },
      {
        "name": "large_text?",
        "description": "text displayed when hovering over the large image of the activity",
        "value": "string"
      },
      {
        "name": "small_image?",
        "description": "see Activity Asset Image",
        "value": "string"
      },
      {
        "name": "small_text?",
        "description": "text displayed when hovering over the small image of the activity",
        "value": "string"
      }
    ]
  },
  {
    "tree": [],
    "name": "Activity Asset Image",
    "description": "Activity asset images are arbitrary strings which usually contain snowflake IDs or prefixed image IDs. Treat data within this field carefully, as it is user-specifiable and not sanitized.",
    "props": [
      {
        "name": "Application Asset",
        "value": "{application_asset_id}"
      },
      {
        "name": "Media Proxy Image",
        "value": "mp:{image_id}"
      }
    ]
  },
  {
    "tree": [],
    "name": "Activity Secrets",
    "props": [
      {
        "name": "join?",
        "description": "the secret for joining a party",
        "value": "string"
      },
      {
        "name": "spectate?",
        "description": "the secret for spectating a game",
        "value": "string"
      },
      {
        "name": "match?",
        "description": "the secret for a specific instanced match",
        "value": "string"
      }
    ]
  },
  {
    "tree": [],
    "name": "Activity Flags",
    "props": [
      {
        "name": "INSTANCE",
        "value": 1
      },
      {
        "name": "JOIN",
        "value": 2
      },
      {
        "name": "SPECTATE",
        "value": 4
      },
      {
        "name": "JOIN_REQUEST",
        "value": 8
      },
      {
        "name": "SYNC",
        "value": 16
      },
      {
        "name": "PLAY",
        "value": 32
      },
      {
        "name": "PARTY_PRIVACY_FRIENDS",
        "value": 64
      },
      {
        "name": "PARTY_PRIVACY_VOICE_CHANNEL",
        "value": 128
      },
      {
        "name": "EMBEDDED",
        "value": 256
      }
    ]
  },
  {
    "tree": [],
    "name": "Activity Buttons",
    "description": "When received over the gateway, the buttons field is an array of strings, which are the button labels. Bots cannot access a user's activity button URLs. When sending, the buttons field must be an array of the below object:",
    "props": [
      {
        "name": "label",
        "description": "the text shown on the button (1-32 characters)",
        "value": "string"
      },
      {
        "name": "url",
        "description": "the url opened when clicking the button (1-512 characters)",
        "value": "string"
      }
    ]
  },
  {
    "tree": [
      "typing-start-typing-start-event-fields",
      "typing-start-typing-start-event-fields"
    ],
    "name": "Typing Start Event Fields",
    "props": [
      {
        "name": "channel_id",
        "description": "id of the channel",
        "value": "snowflake"
      },
      {
        "name": "guild_id?",
        "description": "id of the guild",
        "value": "snowflake"
      },
      {
        "name": "user_id",
        "description": "id of the user",
        "value": "snowflake"
      },
      {
        "name": "timestamp",
        "description": "unix time (in seconds) of when the user started typing",
        "value": "integer"
      },
      {
        "name": "member?",
        "description": "the member who started typing if this happened in a guild",
        "value": "member object"
      }
    ]
  },
  {
    "tree": [
      "user-update",
      "voice",
      "voice",
      "voice",
      "voice",
      "voice-state-update",
      "voice-state-update",
      "voice-state-update",
      "voice-state-update",
      "voice-server-update",
      "voice-server-update",
      "voice-server-update",
      "voice-server-update",
      "voice-server-update-voice-server-update-event-fields",
      "voice-server-update-voice-server-update-event-fields",
      "voice-server-update-voice-server-update-event-fields",
      "voice-server-update-voice-server-update-event-fields"
    ],
    "name": "Voice Server Update Event Fields",
    "props": [
      {
        "name": "token",
        "description": "voice connection token",
        "value": "string"
      },
      {
        "name": "guild_id",
        "description": "the guild this voice server update is for",
        "value": "snowflake"
      },
      {
        "name": "endpoint",
        "description": "the voice server host",
        "value": "?string"
      }
    ]
  },
  {
    "tree": [
      "voice-server-update-example-voice-server-update-payload",
      "webhooks",
      "webhooks",
      "webhooks",
      "webhooks",
      "webhooks-update",
      "webhooks-update",
      "webhooks-update",
      "webhooks-update",
      "webhooks-update-webhooks-update-event-fields",
      "webhooks-update-webhooks-update-event-fields",
      "webhooks-update-webhooks-update-event-fields",
      "webhooks-update-webhooks-update-event-fields"
    ],
    "name": "Webhooks Update Event Fields",
    "props": [
      {
        "name": "guild_id",
        "description": "id of the guild",
        "value": "snowflake"
      },
      {
        "name": "channel_id",
        "description": "id of the channel",
        "value": "snowflake"
      }
    ]
  },
  {
    "tree": [
      "get-gateway-bot",
      "get-gateway-bot",
      "get-gateway-bot",
      "get-gateway-bot-json-response",
      "get-gateway-bot-example-response",
      "session-start-limit-object",
      "session-start-limit-object",
      "session-start-limit-object",
      "session-start-limit-object",
      "session-start-limit-object-session-start-limit-structure",
      "session-start-limit-object-session-start-limit-structure",
      "session-start-limit-object-session-start-limit-structure",
      "session-start-limit-object-session-start-limit-structure",
      "oauth2",
      "oauth2",
      "oauth2",
      "oauth2",
      "shared-resources",
      "shared-resources",
      "shared-resources",
      "shared-resources",
      "shared-resources-oauth2-urls",
      "shared-resources-oauth2-urls",
      "shared-resources-oauth2-urls",
      "shared-resources-oauth2-urls"
    ],
    "name": "OAuth2 URLs",
    "props": [
      {
        "name": "https://discord.com/api/oauth2/authorize",
        "description": "Base authorization URL",
        "value": "https://discord.com/api/oauth2/authorize"
      },
      {
        "name": "https://discord.com/api/oauth2/token",
        "description": "Token URL",
        "value": "https://discord.com/api/oauth2/token"
      },
      {
        "name": "https://discord.com/api/oauth2/token/revoke",
        "description": "Token Revocation URL",
        "value": "https://discord.com/api/oauth2/token/revoke"
      }
    ]
  },
  {
    "tree": [],
    "name": "OAuth2 Scopes",
    "description": "The authorization code grant is what most developers will recognize as \"standard OAuth2\" and involves retrieving an access code and exchanging it for a user's access token. It allows the authorization server to act as an intermediary between the client and the resource owner, so the resource owner's credentials are never shared directly with the client.",
    "props": [
      {
        "name": "activities.read",
        "description": "allows your app to fetch data from a user's \"Now Playing/Recently Played\" list - requires Discord approval",
        "value": "activities.read"
      },
      {
        "name": "activities.write",
        "description": "allows your app to update a user's activity - requires Discord approval (NOT REQUIRED FOR GAMESDK ACTIVITY MANAGER)",
        "value": "activities.write"
      },
      {
        "name": "applications.builds.read",
        "description": "allows your app to read build data for a user's applications",
        "value": "applications.builds.read"
      },
      {
        "name": "applications.builds.upload",
        "description": "allows your app to upload/update builds for a user's applications - requires Discord approval",
        "value": "applications.builds.upload"
      },
      {
        "name": "applications.commands",
        "description": "allows your app to use commands in a guild",
        "value": "applications.commands"
      },
      {
        "name": "applications.commands.update",
        "description": "allows your app to update its commands via this bearer token - client credentials grant only",
        "value": "applications.commands.update"
      },
      {
        "name": "applications.entitlements",
        "description": "allows your app to read entitlements for a user's applications",
        "value": "applications.entitlements"
      },
      {
        "name": "applications.store.update",
        "description": "allows your app to read and update store data (SKUs, store listings, achievements, etc.) for a user's applications",
        "value": "applications.store.update"
      },
      {
        "name": "bot",
        "description": "for oauth2 bots, this puts the bot in the user's selected guild by default",
        "value": "bot"
      },
      {
        "name": "connections",
        "description": "allows /users/@me/connections to return linked third-party accounts",
        "value": "connections"
      },
      {
        "name": "email",
        "description": "enables /users/@me to return an email",
        "value": "email"
      },
      {
        "name": "gdm.join",
        "description": "allows your app to join users to a group dm",
        "value": "gdm.join"
      },
      {
        "name": "guilds",
        "description": "allows /users/@me/guilds to return basic information about all of a user's guilds",
        "value": "guilds"
      },
      {
        "name": "guilds.join",
        "description": "allows /guilds/{guild.id}/members/{user.id} to be used for joining users to a guild",
        "value": "guilds.join"
      },
      {
        "name": "guilds.members.read",
        "description": "allows /users/@me/guilds/{guild.id}/member to return a user's member information in a guild",
        "value": "guilds.members.read"
      },
      {
        "name": "identify",
        "description": "allows /users/@me without email",
        "value": "identify"
      },
      {
        "name": "messages.read",
        "description": "for local rpc server api access, this allows you to read messages from all client channels (otherwise restricted to channels/guilds your app creates)",
        "value": "messages.read"
      },
      {
        "name": "relationships.read",
        "description": "allows your app to know a user's friends and implicit relationships - requires Discord approval",
        "value": "relationships.read"
      },
      {
        "name": "rpc",
        "description": "for local rpc server access, this allows you to control a user's local Discord client - requires Discord approval",
        "value": "rpc"
      },
      {
        "name": "rpc.activities.write",
        "description": "for local rpc server access, this allows you to update a user's activity - requires Discord approval",
        "value": "rpc.activities.write"
      },
      {
        "name": "rpc.notifications.read",
        "description": "for local rpc server access, this allows you to receive notifications pushed out to the user - requires Discord approval",
        "value": "rpc.notifications.read"
      },
      {
        "name": "rpc.voice.read",
        "description": "for local rpc server access, this allows you to read a user's voice settings and listen for voice events - requires Discord approval",
        "value": "rpc.voice.read"
      },
      {
        "name": "rpc.voice.write",
        "description": "for local rpc server access, this allows you to update a user's voice settings - requires Discord approval",
        "value": "rpc.voice.write"
      },
      {
        "name": "webhook.incoming",
        "description": "this generates a webhook that is returned in the oauth token response for authorization code grants",
        "value": "webhook.incoming"
      }
    ]
  },
  {
    "tree": [
      "bot-authorization-flow-bot-auth-parameters",
      "bot-authorization-flow-bot-auth-parameters"
    ],
    "name": "Bot Auth Parameters",
    "props": [
      {
        "name": "client_id",
        "description": "your app's client id",
        "value": "client_id"
      },
      {
        "name": "scope",
        "description": "needs to include bot for the bot flow",
        "value": "scope"
      },
      {
        "name": "permissions",
        "description": "the permissions you're requesting",
        "value": "permissions"
      },
      {
        "name": "guild_id",
        "description": "pre-fills the dropdown picker with a guild for the user",
        "value": "guild_id"
      },
      {
        "name": "disable_guild_select",
        "description": "true or false—disallows the user from changing the guild dropdown",
        "value": "disable_guild_select"
      }
    ]
  },
  {
    "tree": [
      "get-current-authorization-information",
      "get-current-authorization-information",
      "get-current-authorization-information",
      "get-current-authorization-information-response-structure",
      "get-current-authorization-information-example-authorization-information",
      "get-current-authorization-information-example-authorization-information",
      "get-current-authorization-information-example-authorization-information",
      "get-current-authorization-information-example-authorization-information",
      "opcodes-and-status-codes",
      "opcodes-and-status-codes",
      "opcodes-and-status-codes",
      "opcodes-and-status-codes",
      "gateway",
      "gateway",
      "gateway",
      "gateway",
      "gateway-gateway-opcodes",
      "gateway-gateway-opcodes",
      "gateway-gateway-opcodes",
      "gateway-gateway-opcodes"
    ],
    "name": "Gateway Opcodes",
    "props": [
      {
        "name": "Dispatch",
        "description": "An event was dispatched.",
        "value": 0
      },
      {
        "name": "Heartbeat",
        "description": "Fired periodically by the client to keep the connection alive.",
        "value": 1
      },
      {
        "name": "Identify",
        "description": "Starts a new session during the initial handshake.",
        "value": 2
      },
      {
        "name": "Presence Update",
        "description": "Update the client's presence.",
        "value": 3
      },
      {
        "name": "Voice State Update",
        "description": "Used to join/leave or move between voice channels.",
        "value": 4
      },
      {
        "name": "Resume",
        "description": "Resume a previous session that was disconnected.",
        "value": 6
      },
      {
        "name": "Reconnect",
        "description": "You should attempt to reconnect and resume immediately.",
        "value": 7
      },
      {
        "name": "Request Guild Members",
        "description": "Request information about offline guild members in a large guild.",
        "value": 8
      },
      {
        "name": "Invalid Session",
        "description": "The session has been invalidated. You should reconnect and identify/resume accordingly.",
        "value": 9
      },
      {
        "name": "Hello",
        "description": "Sent immediately after connecting, contains the heartbeat_interval to use.",
        "value": 10
      },
      {
        "name": "Heartbeat ACK",
        "description": "Sent in response to receiving a heartbeat to acknowledge that it has been received.",
        "value": 11
      }
    ]
  },
  {
    "tree": [],
    "name": "Gateway Close Event Codes",
    "description": "Our voice gateways have their own set of opcodes and close codes.",
    "props": [
      {
        "name": "4000",
        "description": "We're not sure what went wrong. Try reconnecting?",
        "value": "Unknown error"
      },
      {
        "name": "4001",
        "description": "You sent an invalid Gateway opcode or an invalid payload for an opcode. Don't do that!",
        "value": "Unknown opcode"
      },
      {
        "name": "4002",
        "description": "You sent an invalid payload to us. Don't do that!",
        "value": "Decode error"
      },
      {
        "name": "4003",
        "description": "You sent us a payload prior to identifying.",
        "value": "Not authenticated"
      },
      {
        "name": "4004",
        "description": "The account token sent with your identify payload is incorrect.",
        "value": "Authentication failed"
      },
      {
        "name": "4005",
        "description": "You sent more than one identify payload. Don't do that!",
        "value": "Already authenticated"
      },
      {
        "name": "4007",
        "description": "The sequence sent when resuming the session was invalid. Reconnect and start a new session.",
        "value": "Invalid seq"
      },
      {
        "name": "4008",
        "description": "Woah nelly! You're sending payloads to us too quickly. Slow it down! You will be disconnected on receiving this.",
        "value": "Rate limited"
      },
      {
        "name": "4009",
        "description": "Your session timed out. Reconnect and start a new one.",
        "value": "Session timed out"
      },
      {
        "name": "4010",
        "description": "You sent us an invalid shard when identifying.",
        "value": "Invalid shard"
      },
      {
        "name": "4011",
        "description": "The session would have handled too many guilds - you are required to shard your connection in order to connect.",
        "value": "Sharding required"
      },
      {
        "name": "4012",
        "description": "You sent an invalid version for the gateway.",
        "value": "Invalid API version"
      },
      {
        "name": "4013",
        "description": "You sent an invalid intent for a Gateway Intent. You may have incorrectly calculated the bitwise value.",
        "value": "Invalid intent"
      },
      {
        "name": "4014",
        "description": "You sent a disallowed intent for a Gateway Intent. You may have tried to specify an intent that you have not enabled or are not approved for.",
        "value": "Disallowed intent"
      }
    ]
  },
  {
    "tree": [],
    "name": "Voice Opcodes",
    "props": [
      {
        "name": "Identify",
        "description": "Begin a voice websocket connection.",
        "value": 0
      },
      {
        "name": "Select Protocol",
        "description": "Select the voice protocol.",
        "value": 1
      },
      {
        "name": "Ready",
        "description": "Complete the websocket handshake.",
        "value": 2
      },
      {
        "name": "Heartbeat",
        "description": "Keep the websocket connection alive.",
        "value": 3
      },
      {
        "name": "Session Description",
        "description": "Describe the session.",
        "value": 4
      },
      {
        "name": "Speaking",
        "description": "Indicate which users are speaking.",
        "value": 5
      },
      {
        "name": "Heartbeat ACK",
        "description": "Sent to acknowledge a received client heartbeat.",
        "value": 6
      },
      {
        "name": "Resume",
        "description": "Resume a connection.",
        "value": 7
      },
      {
        "name": "Hello",
        "description": "Time to wait between sending heartbeats in milliseconds.",
        "value": 8
      },
      {
        "name": "Resumed",
        "description": "Acknowledge a successful session resume.",
        "value": 9
      },
      {
        "name": "Client Disconnect",
        "description": "A client has disconnected from the voice channel",
        "value": 13
      }
    ]
  },
  {
    "tree": [],
    "name": "Voice Close Event Codes",
    "description": "Our API will return semantically valid HTTP response codes based on the success of your request. The following table can be used as a reference for response codes it will return.",
    "props": [
      {
        "name": "4001",
        "description": "You sent an invalid opcode.",
        "value": "Unknown opcode"
      },
      {
        "name": "4002",
        "description": "You sent a invalid payload in your identifying to the Gateway.",
        "value": "Failed to decode payload"
      },
      {
        "name": "4003",
        "description": "You sent a payload before identifying with the Gateway.",
        "value": "Not authenticated"
      },
      {
        "name": "4004",
        "description": "The token you sent in your identify payload is incorrect.",
        "value": "Authentication failed"
      },
      {
        "name": "4005",
        "description": "You sent more than one identify payload. Stahp.",
        "value": "Already authenticated"
      },
      {
        "name": "4006",
        "description": "Your session is no longer valid.",
        "value": "Session no longer valid"
      },
      {
        "name": "4009",
        "description": "Your session has timed out.",
        "value": "Session timeout"
      },
      {
        "name": "4011",
        "description": "We can't find the server you're trying to connect to.",
        "value": "Server not found"
      },
      {
        "name": "4012",
        "description": "We didn't recognize the protocol you sent.",
        "value": "Unknown protocol"
      },
      {
        "name": "4014",
        "description": "Channel was deleted, you were kicked, voice server changed, or the main gateway session was dropped. Should not reconnect.",
        "value": "Disconnected"
      },
      {
        "name": "4015",
        "description": "The server crashed. Our bad! Try resuming.",
        "value": "Voice server crashed"
      },
      {
        "name": "4016",
        "description": "We didn't recognize your encryption.",
        "value": "Unknown encryption mode"
      }
    ]
  },
  {
    "tree": [],
    "name": "HTTP Response Codes",
    "description": "Along with the HTTP error code, our API can also return more detailed error codes through a code key in the JSON error response. The response will also contain a message key containing a more friendly error string. Some of these errors may include additional details in the form of Error Messages provided by an errors object.",
    "props": [
      {
        "name": "200",
        "value": "The request completed successfully."
      },
      {
        "name": "201",
        "value": "The entity was created successfully."
      },
      {
        "name": "204",
        "value": "The request completed successfully but returned no content."
      },
      {
        "name": "304",
        "value": "The entity was not modified."
      },
      {
        "name": "400",
        "value": "The request was improperly formatted, or the server couldn't understand it."
      },
      {
        "name": "401",
        "value": "The Authorization header was missing or invalid."
      },
      {
        "name": "403",
        "value": "The Authorization token you passed did not have permission to the resource."
      },
      {
        "name": "404",
        "value": "The resource at the location specified doesn't exist."
      },
      {
        "name": "405",
        "value": "The HTTP method used is not valid for the location specified."
      },
      {
        "name": "429",
        "value": "You are being rate limited, see Rate Limits."
      },
      {
        "name": "502",
        "value": "There was not a gateway available to process your request. Wait a bit and retry."
      },
      {
        "name": "5xx",
        "value": "The server had an error processing your request."
      }
    ]
  },
  {
    "tree": [
      "rpc",
      "rpc",
      "rpc",
      "rpc",
      "rpc-rpc-error-codes",
      "rpc-rpc-error-codes",
      "rpc-rpc-error-codes",
      "rpc-rpc-error-codes"
    ],
    "name": "RPC Error Codes",
    "props": [
      {
        "name": "Unknown error",
        "description": "An unknown error occurred.",
        "value": 1000
      },
      {
        "name": "Invalid payload",
        "description": "You sent an invalid payload.",
        "value": 4000
      },
      {
        "name": "Invalid command",
        "description": "Invalid command name specified.",
        "value": 4002
      },
      {
        "name": "Invalid guild",
        "description": "Invalid guild ID specified.",
        "value": 4003
      },
      {
        "name": "Invalid event",
        "description": "Invalid event name specified.",
        "value": 4004
      },
      {
        "name": "Invalid channel",
        "description": "Invalid channel ID specified.",
        "value": 4005
      },
      {
        "name": "Invalid permissions",
        "description": "You lack permissions to access the given resource.",
        "value": 4006
      },
      {
        "name": "Invalid client ID",
        "description": "An invalid OAuth2 application ID was used to authorize or authenticate with.",
        "value": 4007
      },
      {
        "name": "Invalid origin",
        "description": "An invalid OAuth2 application origin was used to authorize or authenticate with.",
        "value": 4008
      },
      {
        "name": "Invalid token",
        "description": "An invalid OAuth2 token was used to authorize or authenticate with.",
        "value": 4009
      },
      {
        "name": "Invalid user",
        "description": "The specified user ID was invalid.",
        "value": 4010
      },
      {
        "name": "OAuth2 error",
        "description": "A standard OAuth2 error occurred; check the data object for the OAuth2 error details.",
        "value": 5000
      },
      {
        "name": "Select channel timed out",
        "description": "An asynchronous SELECT_TEXT_CHANNEL/SELECT_VOICE_CHANNEL command timed out.",
        "value": 5001
      },
      {
        "name": "GET_GUILD timed out",
        "description": "An asynchronous GET_GUILD command timed out.",
        "value": 5002
      },
      {
        "name": "Select voice force required",
        "description": "You tried to join a user to a voice channel but the user was already in one.",
        "value": 5003
      },
      {
        "name": "Capture shortcut already listening",
        "description": "You tried to capture more than one shortcut key at once.",
        "value": 5004
      }
    ]
  },
  {
    "tree": [
      "permissions",
      "permissions",
      "permissions",
      "permissions",
      "permissions-bitwise-permission-flags",
      "permissions-bitwise-permission-flags",
      "permissions-bitwise-permission-flags",
      "permissions-bitwise-permission-flags"
    ],
    "name": "Bitwise Permission Flags",
    "description": "Roles represent a set of permissions attached to a group of users. Roles have unique names, colors, and can be \"pinned\" to the side bar, causing their members to be listed separately. Roles are unique per guild, and can have separate permission profiles for the global context (guild) and channel context. The @everyone role has the same ID as the guild it belongs to.",
    "props": [
      {
        "name": "CREATE_INSTANT_INVITE",
        "description": "Allows creation of instant invites",
        "value": 1
      },
      {
        "name": "KICK_MEMBERS",
        "description": "Allows kicking members",
        "value": 2
      },
      {
        "name": "BAN_MEMBERS",
        "description": "Allows banning members",
        "value": 4
      },
      {
        "name": "ADMINISTRATOR",
        "description": "Allows all permissions and bypasses channel permission overwrites",
        "value": 8
      },
      {
        "name": "MANAGE_CHANNELS",
        "description": "Allows management and editing of channels",
        "value": 16
      },
      {
        "name": "MANAGE_GUILD",
        "description": "Allows management and editing of the guild",
        "value": 32
      },
      {
        "name": "ADD_REACTIONS",
        "description": "Allows for the addition of reactions to messages",
        "value": 64
      },
      {
        "name": "VIEW_AUDIT_LOG",
        "description": "Allows for viewing of audit logs",
        "value": 128
      },
      {
        "name": "PRIORITY_SPEAKER",
        "description": "Allows for using priority speaker in a voice channel",
        "value": 256
      },
      {
        "name": "STREAM",
        "description": "Allows the user to go live",
        "value": 512
      },
      {
        "name": "VIEW_CHANNEL",
        "description": "Allows guild members to view a channel, which includes reading messages in text channels",
        "value": 1024
      },
      {
        "name": "SEND_MESSAGES",
        "description": "Allows for sending messages in a channel (does not allow sending messages in threads)",
        "value": 2048
      },
      {
        "name": "SEND_TTS_MESSAGES",
        "description": "Allows for sending of /tts messages",
        "value": 4096
      },
      {
        "name": "MANAGE_MESSAGES",
        "description": "Allows for deletion of other users messages",
        "value": 8192
      },
      {
        "name": "EMBED_LINKS",
        "description": "Links sent by users with this permission will be auto-embedded",
        "value": 16384
      },
      {
        "name": "ATTACH_FILES",
        "description": "Allows for uploading images and files",
        "value": 32768
      },
      {
        "name": "READ_MESSAGE_HISTORY",
        "description": "Allows for reading of message history",
        "value": 65536
      },
      {
        "name": "MENTION_EVERYONE",
        "description": "Allows for using the @everyone tag to notify all users in a channel, and the @here tag to notify all online users in a channel",
        "value": 131072
      },
      {
        "name": "USE_EXTERNAL_EMOJIS",
        "description": "Allows the usage of custom emojis from other servers",
        "value": 262144
      },
      {
        "name": "VIEW_GUILD_INSIGHTS",
        "description": "Allows for viewing guild insights",
        "value": 524288
      },
      {
        "name": "CONNECT",
        "description": "Allows for joining of a voice channel",
        "value": 1048576
      },
      {
        "name": "SPEAK",
        "description": "Allows for speaking in a voice channel",
        "value": 2097152
      },
      {
        "name": "MUTE_MEMBERS",
        "description": "Allows for muting members in a voice channel",
        "value": 4194304
      },
      {
        "name": "DEAFEN_MEMBERS",
        "description": "Allows for deafening of members in a voice channel",
        "value": 8388608
      },
      {
        "name": "MOVE_MEMBERS",
        "description": "Allows for moving of members between voice channels",
        "value": 16777216
      },
      {
        "name": "USE_VAD",
        "description": "Allows for using voice-activity-detection in a voice channel",
        "value": 33554432
      },
      {
        "name": "CHANGE_NICKNAME",
        "description": "Allows for modification of own nickname",
        "value": 67108864
      },
      {
        "name": "MANAGE_NICKNAMES",
        "description": "Allows for modification of other users nicknames",
        "value": 134217728
      },
      {
        "name": "MANAGE_ROLES",
        "description": "Allows management and editing of roles",
        "value": 268435456
      },
      {
        "name": "MANAGE_WEBHOOKS",
        "description": "Allows management and editing of webhooks",
        "value": 536870912
      },
      {
        "name": "MANAGE_EMOJIS_AND_STICKERS",
        "description": "Allows management and editing of emojis and stickers",
        "value": 1073741824
      },
      {
        "name": "USE_APPLICATION_COMMANDS",
        "description": "Allows members to use application commands, including slash commands and context menu commands.",
        "value": 2147483648
      },
      {
        "name": "REQUEST_TO_SPEAK",
        "description": "Allows for requesting to speak in stage channels. (This permission is under active development and may be changed or removed.)",
        "value": 4294967296
      },
      {
        "name": "MANAGE_EVENTS",
        "description": "Allows for creating, editing, and deleting scheduled events",
        "value": 8589934592
      },
      {
        "name": "MANAGE_THREADS",
        "description": "Allows for deleting and archiving threads, and viewing all private threads",
        "value": 17179869184
      },
      {
        "name": "CREATE_PUBLIC_THREADS",
        "description": "Allows for creating public and announcement threads",
        "value": 34359738368
      },
      {
        "name": "CREATE_PRIVATE_THREADS",
        "description": "Allows for creating private threads",
        "value": 68719476736
      },
      {
        "name": "USE_EXTERNAL_STICKERS",
        "description": "Allows the usage of custom stickers from other servers",
        "value": 137438953472
      },
      {
        "name": "SEND_MESSAGES_IN_THREADS",
        "description": "Allows for sending messages in threads",
        "value": 274877906944
      },
      {
        "name": "START_EMBEDDED_ACTIVITIES",
        "description": "Allows for launching activities (applications with the EMBEDDED flag) in a voice channel",
        "value": 549755813888
      },
      {
        "name": "MODERATE_MEMBERS",
        "description": "Allows for timing out users to prevent them from sending or reacting to messages in chat and threads, and from speaking in voice and stage channels",
        "value": 1099511627776
      }
    ]
  },
  {
    "tree": [
      "role-object-role-structure",
      "role-object-role-structure"
    ],
    "name": "Role Structure",
    "description": "Roles without colors (color == 0) do not count towards the final computed color in the user list.",
    "props": [
      {
        "name": "id",
        "description": "role id",
        "value": "snowflake"
      },
      {
        "name": "name",
        "description": "role name",
        "value": "string"
      },
      {
        "name": "color",
        "description": "integer representation of hexadecimal color code",
        "value": "integer"
      },
      {
        "name": "hoist",
        "description": "if this role is pinned in the user listing",
        "value": "boolean"
      },
      {
        "name": "icon?",
        "description": "role icon hash",
        "value": "?string"
      },
      {
        "name": "unicode_emoji?",
        "description": "role unicode emoji",
        "value": "?string"
      },
      {
        "name": "position",
        "description": "position of this role",
        "value": "integer"
      },
      {
        "name": "permissions",
        "description": "permission bit set",
        "value": "string"
      },
      {
        "name": "managed",
        "description": "whether this role is managed by an integration",
        "value": "boolean"
      },
      {
        "name": "mentionable",
        "description": "whether this role is mentionable",
        "value": "boolean"
      },
      {
        "name": "tags?",
        "description": "the tags this role has",
        "value": "role tags object"
      }
    ]
  },
  {
    "tree": [
      "role-object-role-tags-structure"
    ],
    "name": "Role Tags Structure",
    "props": [
      {
        "name": "bot_id?",
        "description": "the id of the bot this role belongs to",
        "value": "snowflake"
      },
      {
        "name": "integration_id?",
        "description": "the id of the integration this role belongs to",
        "value": "snowflake"
      },
      {
        "name": "premium_subscriber?",
        "description": "whether this is the guild's premium subscriber role",
        "value": "null"
      }
    ]
  },
  {
    "tree": [
      "exceeding-a-rate-limit-rate-limit-response-structure",
      "exceeding-a-rate-limit-rate-limit-response-structure"
    ],
    "name": "Rate Limit Response Structure",
    "description": "Note that the normal rate-limiting headers will be sent in this response. The rate-limiting response will look something like the following:",
    "props": [
      {
        "name": "message",
        "description": "A message saying you are being rate limited.",
        "value": "string"
      },
      {
        "name": "retry_after",
        "description": "The number of seconds to wait before submitting another request.",
        "value": "float"
      },
      {
        "name": "global",
        "description": "A value indicating if you are being globally rate limited or not",
        "value": "boolean"
      }
    ]
  },
  {
    "tree": [
      "exceeding-a-rate-limit-example-exceeded-global-rate-limit-response",
      "exceeding-a-rate-limit-example-exceeded-global-rate-limit-response",
      "global-rate-limit",
      "global-rate-limit",
      "global-rate-limit",
      "global-rate-limit",
      "invalid-request-limit-aka-cloudflare-bans",
      "invalid-request-limit-aka-cloudflare-bans",
      "invalid-request-limit-aka-cloudflare-bans",
      "invalid-request-limit-aka-cloudflare-bans",
      "rpc",
      "rpc",
      "rpc",
      "rpc",
      "rpc-rpc-versions",
      "rpc-rpc-versions",
      "rpc-rpc-versions",
      "rpc-rpc-versions"
    ],
    "name": "RPC Versions",
    "description": "For applications/games not approved, we limit you to creating 10 guilds and 10 channels. This limit is raised to virtually unlimited after approval.",
    "props": [
      {
        "name": "1",
        "value": "no"
      }
    ]
  },
  {
    "tree": [],
    "name": "Payload Structure",
    "description": "In order to call any commands over RPC, you must be authenticated or you will receive a code 4006 error response. Thankfully, we've removed the oppressive nature of a couple commands that will let you AUTHORIZE and AUTHENTICATE new users. First, call AUTHORIZE:",
    "props": [
      {
        "name": "cmd",
        "description": "payload command",
        "value": "enum"
      },
      {
        "name": "nonce",
        "description": "unique string used once for replies from the server",
        "value": "string"
      },
      {
        "name": "evt",
        "description": "subscription event",
        "value": "enum"
      },
      {
        "name": "data",
        "description": "event data",
        "value": "object"
      },
      {
        "name": "args",
        "description": "command arguments",
        "value": "object"
      }
    ]
  },
  {
    "tree": [
      "commands-and-events-rpc-commands",
      "commands-and-events-rpc-commands"
    ],
    "name": "RPC Commands",
    "description": "Events are payloads sent over the socket to a client that correspond to events in Discord.",
    "props": [
      {
        "name": "DISPATCH",
        "description": "event dispatch",
        "value": "DISPATCH"
      },
      {
        "name": "AUTHORIZE",
        "description": "used to authorize a new client with your app",
        "value": "AUTHORIZE"
      },
      {
        "name": "AUTHENTICATE",
        "description": "used to authenticate an existing client with your app",
        "value": "AUTHENTICATE"
      },
      {
        "name": "GET_GUILD",
        "description": "used to retrieve guild information from the client",
        "value": "GET_GUILD"
      },
      {
        "name": "GET_GUILDS",
        "description": "used to retrieve a list of guilds from the client",
        "value": "GET_GUILDS"
      },
      {
        "name": "GET_CHANNEL",
        "description": "used to retrieve channel information from the client",
        "value": "GET_CHANNEL"
      },
      {
        "name": "GET_CHANNELS",
        "description": "used to retrieve a list of channels for a guild from the client",
        "value": "GET_CHANNELS"
      },
      {
        "name": "SUBSCRIBE",
        "description": "used to subscribe to an RPC event",
        "value": "SUBSCRIBE"
      },
      {
        "name": "UNSUBSCRIBE",
        "description": "used to unsubscribe from an RPC event",
        "value": "UNSUBSCRIBE"
      },
      {
        "name": "SET_USER_VOICE_SETTINGS",
        "description": "used to change voice settings of users in voice channels",
        "value": "SET_USER_VOICE_SETTINGS"
      },
      {
        "name": "SELECT_VOICE_CHANNEL",
        "description": "used to join or leave a voice channel, group dm, or dm",
        "value": "SELECT_VOICE_CHANNEL"
      },
      {
        "name": "GET_SELECTED_VOICE_CHANNEL",
        "description": "used to get the current voice channel the client is in",
        "value": "GET_SELECTED_VOICE_CHANNEL"
      },
      {
        "name": "SELECT_TEXT_CHANNEL",
        "description": "used to join or leave a text channel, group dm, or dm",
        "value": "SELECT_TEXT_CHANNEL"
      },
      {
        "name": "GET_VOICE_SETTINGS",
        "description": "used to retrieve the client's voice settings",
        "value": "GET_VOICE_SETTINGS"
      },
      {
        "name": "SET_VOICE_SETTINGS",
        "description": "used to set the client's voice settings",
        "value": "SET_VOICE_SETTINGS"
      },
      {
        "name": "SET_CERTIFIED_DEVICES",
        "description": "used to send info about certified hardware devices",
        "value": "SET_CERTIFIED_DEVICES"
      },
      {
        "name": "SET_ACTIVITY",
        "description": "used to update a user's Rich Presence",
        "value": "SET_ACTIVITY"
      },
      {
        "name": "SEND_ACTIVITY_JOIN_INVITE",
        "description": "used to consent to a Rich Presence Ask to Join request",
        "value": "SEND_ACTIVITY_JOIN_INVITE"
      },
      {
        "name": "CLOSE_ACTIVITY_REQUEST",
        "description": "used to reject a Rich Presence Ask to Join request",
        "value": "CLOSE_ACTIVITY_REQUEST"
      }
    ]
  },
  {
    "tree": [],
    "name": "RPC Events",
    "description": "We also have an RPC token system to bypass the user authorization modal. This is usable by approved games as well as by users on a game's list of testers, and also disallows use of the messages.read scope. If you have been granted access, you can send a POST request to https://discord.com/api/oauth2/token/rpc with your application's client_id and client_secret in the body (sent as a url-encoded body, not JSON). You can then pass the returned rpc_token value to the rpc_token field in your RPC authorize request (documented below).",
    "props": [
      {
        "name": "READY",
        "description": "non-subscription event sent immediately after connecting, contains server information",
        "value": "READY"
      },
      {
        "name": "ERROR",
        "description": "non-subscription event sent when there is an error, including command responses",
        "value": "ERROR"
      },
      {
        "name": "GUILD_STATUS",
        "description": "sent when a subscribed server's state changes",
        "value": "GUILD_STATUS"
      },
      {
        "name": "GUILD_CREATE",
        "description": "sent when a guild is created/joined on the client",
        "value": "GUILD_CREATE"
      },
      {
        "name": "CHANNEL_CREATE",
        "description": "sent when a channel is created/joined on the client",
        "value": "CHANNEL_CREATE"
      },
      {
        "name": "VOICE_CHANNEL_SELECT",
        "description": "sent when the client joins a voice channel",
        "value": "VOICE_CHANNEL_SELECT"
      },
      {
        "name": "VOICE_STATE_CREATE",
        "description": "sent when a user joins a subscribed voice channel",
        "value": "VOICE_STATE_CREATE"
      },
      {
        "name": "VOICE_STATE_UPDATE",
        "description": "sent when a user's voice state changes in a subscribed voice channel (mute, volume, etc.)",
        "value": "VOICE_STATE_UPDATE"
      },
      {
        "name": "VOICE_STATE_DELETE",
        "description": "sent when a user parts a subscribed voice channel",
        "value": "VOICE_STATE_DELETE"
      },
      {
        "name": "VOICE_SETTINGS_UPDATE",
        "description": "sent when the client's voice settings update",
        "value": "VOICE_SETTINGS_UPDATE"
      },
      {
        "name": "VOICE_CONNECTION_STATUS",
        "description": "sent when the client's voice connection status changes",
        "value": "VOICE_CONNECTION_STATUS"
      },
      {
        "name": "SPEAKING_START",
        "description": "sent when a user in a subscribed voice channel speaks",
        "value": "SPEAKING_START"
      },
      {
        "name": "SPEAKING_STOP",
        "description": "sent when a user in a subscribed voice channel stops speaking",
        "value": "SPEAKING_STOP"
      },
      {
        "name": "MESSAGE_CREATE",
        "description": "sent when a message is created in a subscribed text channel",
        "value": "MESSAGE_CREATE"
      },
      {
        "name": "MESSAGE_UPDATE",
        "description": "sent when a message is updated in a subscribed text channel",
        "value": "MESSAGE_UPDATE"
      },
      {
        "name": "MESSAGE_DELETE",
        "description": "sent when a message is deleted in a subscribed text channel",
        "value": "MESSAGE_DELETE"
      },
      {
        "name": "NOTIFICATION_CREATE",
        "description": "sent when the client receives a notification (mention or new message in eligible channels)",
        "value": "NOTIFICATION_CREATE"
      },
      {
        "name": "ACTIVITY_JOIN",
        "description": "sent when the user clicks a Rich Presence join invite in chat to join a game",
        "value": "ACTIVITY_JOIN"
      },
      {
        "name": "ACTIVITY_SPECTATE",
        "description": "sent when the user clicks a Rich Presence spectate invite in chat to spectate a game",
        "value": "ACTIVITY_SPECTATE"
      },
      {
        "name": "ACTIVITY_JOIN_REQUEST",
        "description": "sent when the user receives a Rich Presence Ask to Join request",
        "value": "ACTIVITY_JOIN_REQUEST"
      }
    ]
  },
  {
    "tree": [],
    "name": "Authorize Argument Structure",
    "props": [
      {
        "name": "scopes",
        "description": "scopes to authorize",
        "value": "array of OAuth2 scopes"
      },
      {
        "name": "client_id",
        "description": "OAuth2 application id",
        "value": "string"
      },
      {
        "name": "rpc_token",
        "description": "one-time use RPC token",
        "value": "string"
      },
      {
        "name": "username",
        "description": "username to create a guest account with if the user does not have Discord",
        "value": "string"
      }
    ]
  },
  {
    "tree": [],
    "name": "Authorize Response Structure",
    "props": [
      {
        "name": "code",
        "description": "OAuth2 authorization code",
        "value": "string"
      }
    ]
  },
  {
    "tree": [
      "authenticate-authenticate-argument-structure",
      "authenticate-authenticate-argument-structure"
    ],
    "name": "Authenticate Argument Structure",
    "props": [
      {
        "name": "access_token",
        "description": "OAuth2 access token",
        "value": "string"
      }
    ]
  },
  {
    "tree": [
      "authenticate-authenticate-response-structure"
    ],
    "name": "Authenticate Response Structure",
    "props": [
      {
        "name": "user",
        "description": "the authed user",
        "value": "partial user object"
      },
      {
        "name": "scopes",
        "description": "authorized scopes",
        "value": "array of OAuth2 scopes"
      },
      {
        "name": "expires",
        "description": "expiration date of OAuth2 token",
        "value": "date"
      },
      {
        "name": "application",
        "description": "application the user authorized",
        "value": "OAuth2 application object"
      }
    ]
  },
  {
    "tree": [
      "authenticate-oauth2-application-structure"
    ],
    "name": "OAuth2 Application Structure",
    "props": [
      {
        "name": "description",
        "description": "application description",
        "value": "string"
      },
      {
        "name": "icon",
        "description": "hash of the icon",
        "value": "string"
      },
      {
        "name": "id",
        "description": "application client id",
        "value": "snowflake"
      },
      {
        "name": "rpc_origins",
        "description": "array of rpc origin urls",
        "value": "array of strings"
      },
      {
        "name": "name",
        "description": "application name",
        "value": "string"
      }
    ]
  },
  {
    "tree": [
      "get_guilds-get-guilds-response-structure",
      "get_guilds-get-guilds-response-structure"
    ],
    "name": "Get Guilds Response Structure",
    "props": [
      {
        "name": "guilds",
        "description": "the guilds the user is in",
        "value": "array of partial guild objects"
      }
    ]
  },
  {
    "tree": [
      "get_guild-get-guild-argument-structure",
      "get_guild-get-guild-argument-structure"
    ],
    "name": "Get Guild Argument Structure",
    "props": [
      {
        "name": "guild_id",
        "description": "id of the guild to get",
        "value": "string"
      },
      {
        "name": "timeout",
        "description": "asynchronously get guild with time to wait before timing out",
        "value": "integer"
      }
    ]
  },
  {
    "tree": [
      "get_guild-get-guild-response-structure"
    ],
    "name": "Get Guild Response Structure",
    "props": [
      {
        "name": "id",
        "description": "guild id",
        "value": "string"
      },
      {
        "name": "name",
        "description": "guild name",
        "value": "string"
      },
      {
        "name": "icon_url",
        "description": "guild icon url",
        "value": "string"
      },
      {
        "name": "members",
        "description": "members of the guild (deprecated; always empty array)",
        "value": "array of guild member objects"
      }
    ]
  },
  {
    "tree": [
      "get_channel-get-channel-argument-structure",
      "get_channel-get-channel-argument-structure"
    ],
    "name": "Get Channel Argument Structure",
    "props": [
      {
        "name": "channel_id",
        "description": "id of the channel to get",
        "value": "string"
      }
    ]
  },
  {
    "tree": [
      "get_channel-get-channel-response-structure"
    ],
    "name": "Get Channel Response Structure",
    "props": [
      {
        "name": "id",
        "description": "channel id",
        "value": "string"
      },
      {
        "name": "guild_id",
        "description": "channel's guild id",
        "value": "string"
      },
      {
        "name": "name",
        "description": "channel name",
        "value": "string"
      },
      {
        "name": "type",
        "description": "channel type (guild text: 0, guild voice: 2, dm: 1, group dm: 3)",
        "value": "integer"
      },
      {
        "name": "topic",
        "description": "(text) channel topic",
        "value": "string"
      },
      {
        "name": "bitrate",
        "description": "(voice) bitrate of voice channel",
        "value": "integer"
      },
      {
        "name": "user_limit",
        "description": "(voice) user limit of voice channel (0 for none)",
        "value": "integer"
      },
      {
        "name": "position",
        "description": "position of channel in channel list",
        "value": "integer"
      },
      {
        "name": "voice_states",
        "description": "(voice) channel's voice states",
        "value": "array of voice state objects"
      },
      {
        "name": "messages",
        "description": "(text) channel's messages",
        "value": "array of message objects"
      }
    ]
  },
  {
    "tree": [
      "get_channels-get-channels-argument-structure",
      "get_channels-get-channels-argument-structure"
    ],
    "name": "Get Channels Argument Structure",
    "props": [
      {
        "name": "guild_id",
        "description": "id of the guild to get channels for",
        "value": "string"
      }
    ]
  },
  {
    "tree": [
      "get_channels-get-channels-response-structure"
    ],
    "name": "Get Channels Response Structure",
    "props": [
      {
        "name": "channels",
        "description": "guild channels the user is in",
        "value": "array of partial channel objects"
      }
    ]
  },
  {
    "tree": [
      "set_user_voice_settings-set-user-voice-settings-argument-and-response-structure",
      "set_user_voice_settings-set-user-voice-settings-argument-and-response-structure"
    ],
    "name": "Set User Voice Settings Argument and Response Structure",
    "props": [
      {
        "name": "user_id",
        "description": "user id",
        "value": "string"
      },
      {
        "name": "pan?",
        "description": "set the pan of the user",
        "value": "pan object"
      },
      {
        "name": "volume?",
        "description": "set the volume of user (defaults to 100, min 0, max 200)",
        "value": "integer"
      },
      {
        "name": "mute?",
        "description": "set the mute state of the user",
        "value": "boolean"
      }
    ]
  },
  {
    "tree": [
      "set_user_voice_settings-pan-object"
    ],
    "name": "Pan Object",
    "props": [
      {
        "name": "left",
        "description": "left pan of user (min: 0.0, max: 1.0)",
        "value": "float"
      },
      {
        "name": "right",
        "description": "right pan of user (min: 0.0, max: 1.0)",
        "value": "float"
      }
    ]
  },
  {
    "tree": [
      "select_voice_channel-select-voice-channel-argument-structure",
      "select_voice_channel-select-voice-channel-argument-structure"
    ],
    "name": "Select Voice Channel Argument Structure",
    "props": [
      {
        "name": "channel_id",
        "description": "channel id to join (or null to leave)",
        "value": "string"
      },
      {
        "name": "timeout",
        "description": "asynchronously join channel with time to wait before timing out",
        "value": "integer"
      },
      {
        "name": "force",
        "description": "forces a user to join a voice channel",
        "value": "boolean"
      }
    ]
  },
  {
    "tree": [
      "select_text_channel-select-text-channel-argument-structure",
      "select_text_channel-select-text-channel-argument-structure"
    ],
    "name": "Select Text Channel Argument Structure",
    "props": [
      {
        "name": "channel_id",
        "description": "channel id to join (or null to leave)",
        "value": "string"
      },
      {
        "name": "timeout",
        "description": "asynchronously join channel with time to wait before timing out",
        "value": "integer"
      }
    ]
  },
  {
    "tree": [
      "get_voice_settings",
      "get_voice_settings-get-voice-settings-response-structure",
      "get_voice_settings-get-voice-settings-response-structure",
      "get_voice_settings-get-voice-settings-response-structure",
      "get_voice_settings-get-voice-settings-response-structure"
    ],
    "name": "Get Voice Settings Response Structure",
    "props": [
      {
        "name": "input",
        "description": "input settings",
        "value": "voice settings input object"
      },
      {
        "name": "output",
        "description": "output settings",
        "value": "voice settings output object"
      },
      {
        "name": "mode",
        "description": "voice mode settings",
        "value": "voice settings mode object"
      },
      {
        "name": "automatic_gain_control",
        "description": "state of automatic gain control",
        "value": "boolean"
      },
      {
        "name": "echo_cancellation",
        "description": "state of echo cancellation",
        "value": "boolean"
      },
      {
        "name": "noise_suppression",
        "description": "state of noise suppression",
        "value": "boolean"
      },
      {
        "name": "qos",
        "description": "state of voice quality of service",
        "value": "boolean"
      },
      {
        "name": "silence_warning",
        "description": "state of silence warning notice",
        "value": "boolean"
      },
      {
        "name": "deaf",
        "description": "state of self-deafen",
        "value": "boolean"
      },
      {
        "name": "mute",
        "description": "state of self-mute",
        "value": "boolean"
      }
    ]
  },
  {
    "tree": [
      "get_voice_settings-voice-settings-input-object"
    ],
    "name": "Voice Settings Input Object",
    "props": [
      {
        "name": "device_id",
        "description": "device id",
        "value": "string"
      },
      {
        "name": "volume",
        "description": "input voice level (min: 0, max: 100)",
        "value": "float"
      },
      {
        "name": "available_devices",
        "description": "array of read-only device objects containing id and name string keys",
        "value": "array of objects"
      }
    ]
  },
  {
    "tree": [
      "get_voice_settings-voice-settings-output-object"
    ],
    "name": "Voice Settings Output Object",
    "props": [
      {
        "name": "device_id",
        "description": "device id",
        "value": "string"
      },
      {
        "name": "volume",
        "description": "output voice level (min: 0, max: 200)",
        "value": "float"
      },
      {
        "name": "available_devices",
        "description": "array of read-only device objects containing id and name string keys",
        "value": "array of objects"
      }
    ]
  },
  {
    "tree": [
      "get_voice_settings-voice-settings-mode-object"
    ],
    "name": "Voice Settings Mode Object",
    "props": [
      {
        "name": "type",
        "description": "voice setting mode type (can be PUSH_TO_TALK or VOICE_ACTIVITY)",
        "value": "string"
      },
      {
        "name": "auto_threshold",
        "description": "voice activity threshold automatically sets its threshold",
        "value": "boolean"
      },
      {
        "name": "threshold",
        "description": "threshold for voice activity (in dB) (min: -100, max: 0)",
        "value": "float"
      },
      {
        "name": "shortcut",
        "description": "shortcut key combos for PTT",
        "value": "shortcut key combo object"
      },
      {
        "name": "delay",
        "description": "the PTT release delay (in ms) (min: 0, max: 2000)",
        "value": "float"
      }
    ]
  },
  {
    "tree": [
      "get_voice_settings-shortcut-key-combo-object"
    ],
    "name": "Shortcut Key Combo Object",
    "props": [
      {
        "name": "type",
        "description": "see key types",
        "value": "integer"
      },
      {
        "name": "code",
        "description": "key code",
        "value": "integer"
      },
      {
        "name": "name",
        "description": "key name",
        "value": "string"
      }
    ]
  },
  {
    "tree": [
      "get_voice_settings-key-types"
    ],
    "name": "Key Types",
    "props": [
      {
        "name": "KEYBOARD_KEY",
        "value": 0
      },
      {
        "name": "MOUSE_BUTTON",
        "value": 1
      },
      {
        "name": "KEYBOARD_MODIFIER_KEY",
        "value": 2
      },
      {
        "name": "GAMEPAD_BUTTON",
        "value": 3
      }
    ]
  },
  {
    "tree": [
      "set_voice_settings",
      "set_voice_settings",
      "set_voice_settings",
      "set_voice_settings",
      "set_voice_settings-set-voice-settings-argument-and-response-structure",
      "set_voice_settings-set-voice-settings-argument-and-response-structure",
      "set_voice_settings-set-voice-settings-argument-and-response-structure",
      "set_voice_settings-set-voice-settings-argument-and-response-structure"
    ],
    "name": "Set Voice Settings Argument and Response Structure",
    "props": [
      {
        "name": "input",
        "description": "input settings",
        "value": "voice settings input object"
      },
      {
        "name": "output",
        "description": "output settings",
        "value": "voice settings output object"
      },
      {
        "name": "mode",
        "description": "voice mode settings",
        "value": "voice settings mode object"
      },
      {
        "name": "automatic_gain_control",
        "description": "state of automatic gain control",
        "value": "boolean"
      },
      {
        "name": "echo_cancellation",
        "description": "state of echo cancellation",
        "value": "boolean"
      },
      {
        "name": "noise_suppression",
        "description": "state of noise suppression",
        "value": "boolean"
      },
      {
        "name": "qos",
        "description": "state of voice quality of service",
        "value": "boolean"
      },
      {
        "name": "silence_warning",
        "description": "state of silence warning notice",
        "value": "boolean"
      },
      {
        "name": "deaf",
        "description": "state of self-deafen",
        "value": "boolean"
      },
      {
        "name": "mute",
        "description": "state of self-mute",
        "value": "boolean"
      }
    ]
  },
  {
    "tree": [
      "subscribe-subscribe-response-structure",
      "subscribe-subscribe-response-structure"
    ],
    "name": "Subscribe Response Structure",
    "props": [
      {
        "name": "evt",
        "description": "event name now subscribed to",
        "value": "string"
      }
    ]
  },
  {
    "tree": [
      "unsubscribe-unsubscribe-response-structure",
      "unsubscribe-unsubscribe-response-structure"
    ],
    "name": "Unsubscribe Response Structure",
    "props": [
      {
        "name": "evt",
        "description": "event name now unsubscribed from",
        "value": "string"
      }
    ]
  },
  {
    "tree": [
      "set_certified_devices-set-certified-devices-argument-strucure",
      "set_certified_devices-set-certified-devices-argument-strucure"
    ],
    "name": "Set Certified Devices Argument Strucure",
    "props": [
      {
        "name": "devices",
        "description": "a list of devices for your manufacturer, in order of priority",
        "value": "array of certified device objects"
      }
    ]
  },
  {
    "tree": [
      "set_certified_devices-device-object"
    ],
    "name": "Device Object",
    "description": "These fields are only applicable for AUDIO_INPUT device types",
    "props": [
      {
        "name": "type",
        "description": "the type of device",
        "value": "device type"
      },
      {
        "name": "id",
        "description": "the device's Windows UUID",
        "value": "string"
      },
      {
        "name": "vendor",
        "description": "the hardware vendor",
        "value": "vendor object"
      },
      {
        "name": "model",
        "description": "the model of the product",
        "value": "model object"
      },
      {
        "name": "related",
        "description": "UUIDs of related devices",
        "value": "array of strings"
      },
      {
        "name": "echo_cancellation?",
        "description": "if the device's native echo cancellation is enabled",
        "value": "boolean"
      },
      {
        "name": "noise_suppression?",
        "description": "if the device's native noise suppression is enabled",
        "value": "boolean"
      },
      {
        "name": "automatic_gain_control?",
        "description": "if the device's native automatic gain control is enabled",
        "value": "boolean"
      },
      {
        "name": "hardware_mute?",
        "description": "if the device is hardware muted",
        "value": "boolean"
      }
    ]
  },
  {
    "tree": [
      "set_certified_devices-vendor-object"
    ],
    "name": "Vendor Object",
    "props": [
      {
        "name": "name",
        "description": "name of the vendor",
        "value": "string"
      },
      {
        "name": "url",
        "description": "url for the vendor",
        "value": "string"
      }
    ]
  },
  {
    "tree": [
      "set_certified_devices-model-object"
    ],
    "name": "Model Object",
    "props": [
      {
        "name": "name",
        "description": "name of the model",
        "value": "string"
      },
      {
        "name": "url",
        "description": "url for the model",
        "value": "string"
      }
    ]
  },
  {
    "tree": [
      "set_certified_devices-device-type"
    ],
    "name": "Device Type",
    "props": [
      {
        "name": "AUDIO_INPUT",
        "value": "audioinput"
      },
      {
        "name": "AUDIO_OUTPUT",
        "value": "audiooutput"
      },
      {
        "name": "VIDEO_INPUT",
        "value": "videoinput"
      }
    ]
  },
  {
    "tree": [
      "set_activity-set-activity-argument-structure",
      "set_activity-set-activity-argument-structure"
    ],
    "name": "Set Activity Argument Structure",
    "props": [
      {
        "name": "pid",
        "description": "the application's process id",
        "value": "integer"
      },
      {
        "name": "activity",
        "description": "the rich presence to assign to the user",
        "value": "activity object"
      }
    ]
  },
  {
    "tree": [
      "set_activity-example-set-activity-payload",
      "send_activity_join_invite",
      "send_activity_join_invite",
      "send_activity_join_invite",
      "send_activity_join_invite",
      "send_activity_join_invite-send-activity-join-invite-argument-structure",
      "send_activity_join_invite-send-activity-join-invite-argument-structure",
      "send_activity_join_invite-send-activity-join-invite-argument-structure",
      "send_activity_join_invite-send-activity-join-invite-argument-structure"
    ],
    "name": "Send Activity Join Invite Argument Structure",
    "props": [
      {
        "name": "user_id",
        "description": "the id of the requesting user",
        "value": "snowflake"
      }
    ]
  },
  {
    "tree": [
      "send_activity_join_invite-example-send-activity-join-invite-payload",
      "close_activity_request",
      "close_activity_request",
      "close_activity_request",
      "close_activity_request",
      "close_activity_request-close-activity-request-argument-structure",
      "close_activity_request-close-activity-request-argument-structure",
      "close_activity_request-close-activity-request-argument-structure",
      "close_activity_request-close-activity-request-argument-structure"
    ],
    "name": "Close Activity Request Argument Structure",
    "props": [
      {
        "name": "user_id",
        "description": "the id of the requesting user",
        "value": "snowflake"
      }
    ]
  },
  {
    "tree": [
      "close_activity_request-example-close-activity-request-payload",
      "ready",
      "ready",
      "ready",
      "ready",
      "ready-ready-dispatch-data-structure",
      "ready-ready-dispatch-data-structure",
      "ready-ready-dispatch-data-structure",
      "ready-ready-dispatch-data-structure"
    ],
    "name": "Ready Dispatch Data Structure",
    "props": [
      {
        "name": "v",
        "description": "RPC version",
        "value": "integer"
      },
      {
        "name": "config",
        "description": "server configuration",
        "value": "rpc server configuration object"
      },
      {
        "name": "user",
        "description": "the user to whom you are connected",
        "value": "partial user object"
      }
    ]
  },
  {
    "tree": [
      "ready-rpc-server-configuration-object"
    ],
    "name": "RPC Server Configuration Object",
    "props": [
      {
        "name": "cdn_host",
        "description": "server's cdn",
        "value": "string"
      },
      {
        "name": "api_endpoint",
        "description": "server's api endpoint",
        "value": "string"
      },
      {
        "name": "environment",
        "description": "server's environment",
        "value": "string"
      }
    ]
  },
  {
    "tree": [
      "ready-example-ready-dispatch-payload",
      "error",
      "error",
      "error",
      "error",
      "error-error-data-structure",
      "error-error-data-structure",
      "error-error-data-structure",
      "error-error-data-structure"
    ],
    "name": "Error Data Structure",
    "props": [
      {
        "name": "code",
        "description": "RPC Error Code",
        "value": "integer"
      },
      {
        "name": "message",
        "description": "Error description",
        "value": "string"
      }
    ]
  },
  {
    "tree": [
      "error-example-error-payload",
      "guild_status",
      "guild_status",
      "guild_status",
      "guild_status",
      "guild_status-guild-status-argument-structure",
      "guild_status-guild-status-argument-structure",
      "guild_status-guild-status-argument-structure",
      "guild_status-guild-status-argument-structure"
    ],
    "name": "Guild Status Argument Structure",
    "props": [
      {
        "name": "guild_id",
        "description": "id of guild to listen to updates of",
        "value": "string"
      }
    ]
  },
  {
    "tree": [
      "guild_status-guild-status-dispatch-data-structure"
    ],
    "name": "Guild Status Dispatch Data Structure",
    "props": [
      {
        "name": "guild",
        "description": "guild with requested id",
        "value": "partial guild object"
      },
      {
        "name": "online",
        "description": "number of online users in guild (deprecated; always 0)",
        "value": "integer"
      }
    ]
  },
  {
    "tree": [
      "guild_status-example-guild-status-dispatch-payload",
      "guild_create",
      "guild_create",
      "guild_create",
      "guild_create",
      "guild_create-guild-create-dispatch-data-structure",
      "guild_create-guild-create-dispatch-data-structure",
      "guild_create-guild-create-dispatch-data-structure",
      "guild_create-guild-create-dispatch-data-structure"
    ],
    "name": "Guild Create Dispatch Data Structure",
    "props": [
      {
        "name": "id",
        "description": "guild id",
        "value": "string"
      },
      {
        "name": "name",
        "description": "name of the guild",
        "value": "string"
      }
    ]
  },
  {
    "tree": [
      "guild_create-example-guild-create-dispatch-payload",
      "channel_create",
      "channel_create",
      "channel_create",
      "channel_create",
      "channel_create-channel-create-dispatch-data-structure",
      "channel_create-channel-create-dispatch-data-structure",
      "channel_create-channel-create-dispatch-data-structure",
      "channel_create-channel-create-dispatch-data-structure"
    ],
    "name": "Channel Create Dispatch Data Structure",
    "props": [
      {
        "name": "id",
        "description": "channel id",
        "value": "string"
      },
      {
        "name": "name",
        "description": "name of the channel",
        "value": "string"
      },
      {
        "name": "type",
        "description": "channel type (guild text: 0, guild voice: 2, dm: 1, group dm: 3)",
        "value": "integer"
      }
    ]
  },
  {
    "tree": [
      "channel_create-example-channel-create-dispatch-payload",
      "voice_channel_select",
      "voice_channel_select",
      "voice_channel_select",
      "voice_channel_select",
      "voice_channel_select-voice-channel-select-dispatch-data-structure",
      "voice_channel_select-voice-channel-select-dispatch-data-structure",
      "voice_channel_select-voice-channel-select-dispatch-data-structure",
      "voice_channel_select-voice-channel-select-dispatch-data-structure"
    ],
    "name": "Voice Channel Select Dispatch Data Structure",
    "props": [
      {
        "name": "channel_id",
        "description": "id of channel (null if none)",
        "value": "string"
      },
      {
        "name": "guild_id",
        "description": "id of guild (null if none)",
        "value": "string"
      }
    ]
  },
  {
    "tree": [
      "voice_state_create-voice_state_update-voice_state_delete-voice-state-argument-structure",
      "voice_state_create-voice_state_update-voice_state_delete-voice-state-argument-structure"
    ],
    "name": "Voice State Argument Structure",
    "props": [
      {
        "name": "channel_id",
        "description": "id of channel to listen to updates of",
        "value": "string"
      }
    ]
  },
  {
    "tree": [
      "voice_state_create-voice_state_update-voice_state_delete-example-voice-state-dispatch-payload",
      "voice_connection_status",
      "voice_connection_status",
      "voice_connection_status",
      "voice_connection_status",
      "voice_connection_status-voice-connection-status-dispatch-data-structure",
      "voice_connection_status-voice-connection-status-dispatch-data-structure",
      "voice_connection_status-voice-connection-status-dispatch-data-structure",
      "voice_connection_status-voice-connection-status-dispatch-data-structure"
    ],
    "name": "Voice Connection Status Dispatch Data Structure",
    "props": [
      {
        "name": "state",
        "description": "one of the voice connection states listed below",
        "value": "string"
      },
      {
        "name": "hostname",
        "description": "hostname of the connected voice server",
        "value": "string"
      },
      {
        "name": "pings",
        "description": "last 20 pings (in ms)",
        "value": "array of integers"
      },
      {
        "name": "average_ping",
        "description": "average ping (in ms)",
        "value": "integer"
      },
      {
        "name": "last_ping",
        "description": "last ping (in ms)",
        "value": "integer"
      }
    ]
  },
  {
    "tree": [
      "voice_connection_status-voice-connection-states"
    ],
    "name": "Voice Connection States",
    "props": [
      {
        "name": "DISCONNECTED",
        "description": "TCP disconnected",
        "value": "DISCONNECTED"
      },
      {
        "name": "AWAITING_ENDPOINT",
        "description": "Waiting for voice endpoint",
        "value": "AWAITING_ENDPOINT"
      },
      {
        "name": "AUTHENTICATING",
        "description": "TCP authenticating",
        "value": "AUTHENTICATING"
      },
      {
        "name": "CONNECTING",
        "description": "TCP connecting",
        "value": "CONNECTING"
      },
      {
        "name": "CONNECTED",
        "description": "TCP connected",
        "value": "CONNECTED"
      },
      {
        "name": "VOICE_DISCONNECTED",
        "description": "TCP connected, Voice disconnected",
        "value": "VOICE_DISCONNECTED"
      },
      {
        "name": "VOICE_CONNECTING",
        "description": "TCP connected, Voice connecting",
        "value": "VOICE_CONNECTING"
      },
      {
        "name": "VOICE_CONNECTED",
        "description": "TCP connected, Voice connected",
        "value": "VOICE_CONNECTED"
      },
      {
        "name": "NO_ROUTE",
        "description": "No route to host",
        "value": "NO_ROUTE"
      },
      {
        "name": "ICE_CHECKING",
        "description": "WebRTC ice checking",
        "value": "ICE_CHECKING"
      }
    ]
  },
  {
    "tree": [
      "message_create-message_update-message_delete",
      "message_create-message_update-message_delete",
      "message_create-message_update-message_delete",
      "message_create-message_update-message_delete",
      "message_create-message_update-message_delete-message-argument-structure",
      "message_create-message_update-message_delete-message-argument-structure",
      "message_create-message_update-message_delete-message-argument-structure",
      "message_create-message_update-message_delete-message-argument-structure"
    ],
    "name": "Message Argument Structure",
    "props": [
      {
        "name": "channel_id",
        "description": "id of channel to listen to updates of",
        "value": "string"
      }
    ]
  },
  {
    "tree": [
      "message_create-message_update-message_delete-example-message-dispatch-payload",
      "speaking_start-speaking_stop",
      "speaking_start-speaking_stop",
      "speaking_start-speaking_stop",
      "speaking_start-speaking_stop",
      "speaking_start-speaking_stop-speaking-argument-structure",
      "speaking_start-speaking_stop-speaking-argument-structure",
      "speaking_start-speaking_stop-speaking-argument-structure",
      "speaking_start-speaking_stop-speaking-argument-structure"
    ],
    "name": "Speaking Argument Structure",
    "props": [
      {
        "name": "channel_id",
        "description": "id of channel to listen to updates of",
        "value": "string"
      }
    ]
  },
  {
    "tree": [
      "speaking_start-speaking_stop-speaking-dispatch-data-structure"
    ],
    "name": "Speaking Dispatch Data Structure",
    "props": [
      {
        "name": "user_id",
        "description": "id of user who started/stopped speaking",
        "value": "string"
      }
    ]
  },
  {
    "tree": [
      "speaking_start-speaking_stop-example-speaking-dispatch-payload",
      "notification_create",
      "notification_create",
      "notification_create",
      "notification_create",
      "notification_create-notification-create-dispatch-data-structure",
      "notification_create-notification-create-dispatch-data-structure",
      "notification_create-notification-create-dispatch-data-structure",
      "notification_create-notification-create-dispatch-data-structure"
    ],
    "name": "Notification Create Dispatch Data Structure",
    "props": [
      {
        "name": "channel_id",
        "description": "id of channel where notification occurred",
        "value": "string"
      },
      {
        "name": "message",
        "description": "message that generated this notification",
        "value": "message object"
      },
      {
        "name": "icon_url",
        "description": "icon url of the notification",
        "value": "string"
      },
      {
        "name": "title",
        "description": "title of the notification",
        "value": "string"
      },
      {
        "name": "body",
        "description": "body of the notification",
        "value": "string"
      }
    ]
  },
  {
    "tree": [
      "notification_create-example-notification-create-dispatch-payload",
      "activity_join",
      "activity_join",
      "activity_join",
      "activity_join",
      "activity_join-activity-join-dispatch-data-structure",
      "activity_join-activity-join-dispatch-data-structure",
      "activity_join-activity-join-dispatch-data-structure",
      "activity_join-activity-join-dispatch-data-structure"
    ],
    "name": "Activity Join Dispatch Data Structure",
    "props": [
      {
        "name": "secret",
        "description": "the `join_secret` for the given invite",
        "value": "string"
      }
    ]
  },
  {
    "tree": [
      "activity_join-example-activity-join-dispatch-payload",
      "activity_spectate",
      "activity_spectate",
      "activity_spectate",
      "activity_spectate",
      "activity_spectate-activity-spectate-dispatch-data-structure",
      "activity_spectate-activity-spectate-dispatch-data-structure",
      "activity_spectate-activity-spectate-dispatch-data-structure",
      "activity_spectate-activity-spectate-dispatch-data-structure"
    ],
    "name": "Activity Spectate Dispatch Data Structure",
    "props": [
      {
        "name": "secret",
        "description": "the `spectate_secret` for the given invite",
        "value": "string"
      }
    ]
  },
  {
    "tree": [
      "activity_spectate-example-activity-spectate-dispatch-payload",
      "activity_join_request",
      "activity_join_request",
      "activity_join_request",
      "activity_join_request",
      "activity_join_request-activity-join-request-data-structure",
      "activity_join_request-activity-join-request-data-structure",
      "activity_join_request-activity-join-request-data-structure",
      "activity_join_request-activity-join-request-data-structure"
    ],
    "name": "Activity Join Request Data Structure",
    "props": [
      {
        "name": "user",
        "description": "information about the user requesting to join",
        "value": "partial user object"
      }
    ]
  },
  {
    "tree": [
      "activity_join_request-example-activity-join-request-dispatch-payload",
      "teams",
      "teams",
      "teams",
      "teams",
      "what-do-they-do",
      "what-do-they-do",
      "what-do-they-do",
      "what-do-they-do",
      "how-do-i-make-one",
      "how-do-i-make-one",
      "how-do-i-make-one",
      "how-do-i-make-one",
      "apps-on-teams",
      "apps-on-teams",
      "apps-on-teams",
      "apps-on-teams",
      "what-next",
      "what-next",
      "what-next",
      "what-next",
      "data-models",
      "data-models",
      "data-models",
      "data-models",
      "data-models-team-object",
      "data-models-team-object",
      "data-models-team-object",
      "data-models-team-object"
    ],
    "name": "Team Object",
    "props": [
      {
        "name": "icon",
        "description": "a hash of the image of the team's icon",
        "value": "?string"
      },
      {
        "name": "id",
        "description": "the unique id of the team",
        "value": "snowflake"
      },
      {
        "name": "members",
        "description": "the members of the team",
        "value": "array of team member objects"
      },
      {
        "name": "name",
        "description": "the name of the team",
        "value": "string"
      },
      {
        "name": "owner_user_id",
        "description": "the user id of the current team owner",
        "value": "snowflake"
      }
    ]
  },
  {
    "tree": [
      "data-models-team-member-object"
    ],
    "name": "Team Member Object",
    "props": [
      {
        "name": "membership_state",
        "description": "the user's membership state on the team",
        "value": "integer"
      },
      {
        "name": "permissions",
        "description": "will always be [\"*\"]",
        "value": "array of strings"
      },
      {
        "name": "team_id",
        "description": "the id of the parent team of which they are a member",
        "value": "snowflake"
      },
      {
        "name": "user",
        "description": "the avatar, discriminator, id, and username of the user",
        "value": "partial user object"
      }
    ]
  },
  {
    "tree": [
      "data-models-membership-state-enum",
      "threads",
      "threads",
      "threads",
      "threads",
      "backwards-compatibility",
      "backwards-compatibility",
      "backwards-compatibility",
      "backwards-compatibility",
      "new-thread-fields",
      "new-thread-fields",
      "new-thread-fields",
      "new-thread-fields",
      "public-private-threads",
      "public-private-threads",
      "public-private-threads",
      "public-private-threads",
      "active-archived-threads",
      "active-archived-threads",
      "active-archived-threads",
      "active-archived-threads",
      "permissions",
      "permissions",
      "permissions",
      "permissions",
      "gateway-events",
      "gateway-events",
      "gateway-events",
      "gateway-events",
      "thread-membership",
      "thread-membership",
      "thread-membership",
      "thread-membership",
      "syncing-for-the-current-user",
      "syncing-for-the-current-user",
      "syncing-for-the-current-user",
      "syncing-for-the-current-user",
      "syncing-for-other-users",
      "syncing-for-other-users",
      "syncing-for-other-users",
      "syncing-for-other-users",
      "editing-deleting-threads",
      "editing-deleting-threads",
      "editing-deleting-threads",
      "editing-deleting-threads",
      "nsfw-threads",
      "nsfw-threads",
      "nsfw-threads",
      "nsfw-threads",
      "new-message-types",
      "new-message-types",
      "new-message-types",
      "new-message-types",
      "enumerating-threads",
      "enumerating-threads",
      "enumerating-threads",
      "enumerating-threads",
      "webhooks",
      "webhooks",
      "webhooks",
      "webhooks",
      "additional-context-on-the-the-thread_list_sync-and-thread_create-dispatches",
      "additional-context-on-the-the-thread_list_sync-and-thread_create-dispatches",
      "additional-context-on-the-the-thread_list_sync-and-thread_create-dispatches",
      "additional-context-on-the-the-thread_list_sync-and-thread_create-dispatches",
      "gaining-access-to-a-private-thread",
      "gaining-access-to-a-private-thread",
      "gaining-access-to-a-private-thread",
      "gaining-access-to-a-private-thread",
      "gaining-access-to-a-public-thread",
      "gaining-access-to-a-public-thread",
      "gaining-access-to-a-public-thread",
      "gaining-access-to-a-public-thread",
      "gaining-access-to-a-channel",
      "gaining-access-to-a-channel",
      "gaining-access-to-a-channel",
      "gaining-access-to-a-channel",
      "losing-access-to-a-channel",
      "losing-access-to-a-channel",
      "losing-access-to-a-channel",
      "losing-access-to-a-channel",
      "unarchiving-a-thread",
      "unarchiving-a-thread",
      "unarchiving-a-thread",
      "unarchiving-a-thread",
      "voice",
      "voice",
      "voice",
      "voice",
      "voice-gateway-versioning",
      "voice-gateway-versioning",
      "voice-gateway-versioning",
      "voice-gateway-versioning",
      "voice-gateway-versioning-gateway-versions",
      "voice-gateway-versioning-gateway-versions",
      "voice-gateway-versioning-gateway-versions",
      "voice-gateway-versioning-gateway-versions"
    ],
    "name": "Gateway Versions",
    "description": "The first step in connecting to a voice server (and in turn, a guild's voice channel) is formulating a request that can be sent to the Gateway, which will return information about the voice server we will connect to. Because Discord's voice platform is widely distributed, users should never cache or save the results of this call. To inform the gateway of our intent to establish voice connectivity, we first send an Opcode 4 Gateway Voice State Update:",
    "props": [
      {
        "name": "4",
        "value": "recommended"
      },
      {
        "name": "3",
        "value": "available"
      },
      {
        "name": "2",
        "value": "available"
      },
      {
        "name": "1",
        "value": "default"
      }
    ]
  },
  {
    "tree": [
      "establishing-a-voice-udp-connection-encryption-modes",
      "establishing-a-voice-udp-connection-encryption-modes"
    ],
    "name": "Encryption Modes",
    "description": "Finally, the voice server will respond with a Opcode 4 Session Description that includes the mode and secret_key, a 32 byte array used for encrypting and sending voice data:",
    "props": [
      {
        "name": "Normal",
        "value": "xsalsa20_poly1305"
      },
      {
        "name": "Suffix",
        "value": "xsalsa20_poly1305_suffix"
      },
      {
        "name": "Lite",
        "value": "xsalsa20_poly1305_lite"
      }
    ]
  },
  {
    "tree": [
      "encrypting-and-sending-voice",
      "encrypting-and-sending-voice",
      "encrypting-and-sending-voice",
      "encrypting-and-sending-voice",
      "encrypting-and-sending-voice-voice-packet-structure",
      "encrypting-and-sending-voice-voice-packet-structure",
      "encrypting-and-sending-voice-voice-packet-structure",
      "encrypting-and-sending-voice-voice-packet-structure"
    ],
    "name": "Voice Packet Structure",
    "description": "The following flags can be used as a bitwise mask. For example 5 would be priority and voice.",
    "props": [
      {
        "name": "Microphone",
        "value": 1
      },
      {
        "name": "Soundshare",
        "value": 2
      },
      {
        "name": "Priority",
        "value": 4
      }
    ]
  }
]
[
  {
    "name": "RPC Versions",
    "properties": [
      {
        "name": "1",
        "value": "no"
      }
    ],
    "description": "For applications/games not approved, we limit you to creating 10 guilds and 10 channels. This limit is raised to virtually unlimited after approval."
  },
  {
    "name": "RPC Commands",
    "properties": [
      {
        "name": "DISPATCH",
        "description": "event dispatch",
        "value": "DISPATCH"
      },
      {
        "name": "AUTHORIZE",
        "description": "used to authorize a new client with your app",
        "value": "AUTHORIZE"
      },
      {
        "name": "AUTHENTICATE",
        "description": "used to authenticate an existing client with your app",
        "value": "AUTHENTICATE"
      },
      {
        "name": "GET_GUILD",
        "description": "used to retrieve guild information from the client",
        "value": "GET_GUILD"
      },
      {
        "name": "GET_GUILDS",
        "description": "used to retrieve a list of guilds from the client",
        "value": "GET_GUILDS"
      },
      {
        "name": "GET_CHANNEL",
        "description": "used to retrieve channel information from the client",
        "value": "GET_CHANNEL"
      },
      {
        "name": "GET_CHANNELS",
        "description": "used to retrieve a list of channels for a guild from the client",
        "value": "GET_CHANNELS"
      },
      {
        "name": "SUBSCRIBE",
        "description": "used to subscribe to an RPC event",
        "value": "SUBSCRIBE"
      },
      {
        "name": "UNSUBSCRIBE",
        "description": "used to unsubscribe from an RPC event",
        "value": "UNSUBSCRIBE"
      },
      {
        "name": "SET_USER_VOICE_SETTINGS",
        "description": "used to change voice settings of users in voice channels",
        "value": "SET_USER_VOICE_SETTINGS"
      },
      {
        "name": "SELECT_VOICE_CHANNEL",
        "description": "used to join or leave a voice channel, group dm, or dm",
        "value": "SELECT_VOICE_CHANNEL"
      },
      {
        "name": "GET_SELECTED_VOICE_CHANNEL",
        "description": "used to get the current voice channel the client is in",
        "value": "GET_SELECTED_VOICE_CHANNEL"
      },
      {
        "name": "SELECT_TEXT_CHANNEL",
        "description": "used to join or leave a text channel, group dm, or dm",
        "value": "SELECT_TEXT_CHANNEL"
      },
      {
        "name": "GET_VOICE_SETTINGS",
        "description": "used to retrieve the client's voice settings",
        "value": "GET_VOICE_SETTINGS"
      },
      {
        "name": "SET_VOICE_SETTINGS",
        "description": "used to set the client's voice settings",
        "value": "SET_VOICE_SETTINGS"
      },
      {
        "name": "SET_CERTIFIED_DEVICES",
        "description": "used to send info about certified hardware devices",
        "value": "SET_CERTIFIED_DEVICES"
      },
      {
        "name": "SET_ACTIVITY",
        "description": "used to update a user's Rich Presence",
        "value": "SET_ACTIVITY"
      },
      {
        "name": "SEND_ACTIVITY_JOIN_INVITE",
        "description": "used to consent to a Rich Presence Ask to Join request",
        "value": "SEND_ACTIVITY_JOIN_INVITE"
      },
      {
        "name": "CLOSE_ACTIVITY_REQUEST",
        "description": "used to reject a Rich Presence Ask to Join request",
        "value": "CLOSE_ACTIVITY_REQUEST"
      }
    ],
    "description": "Events are payloads sent over the socket to a client that correspond to events in Discord."
  },
  {
    "name": "RPC Events",
    "properties": [
      {
        "name": "READY",
        "description": "non-subscription event sent immediately after connecting, contains server information",
        "value": "READY"
      },
      {
        "name": "ERROR",
        "description": "non-subscription event sent when there is an error, including command responses",
        "value": "ERROR"
      },
      {
        "name": "GUILD_STATUS",
        "description": "sent when a subscribed server's state changes",
        "value": "GUILD_STATUS"
      },
      {
        "name": "GUILD_CREATE",
        "description": "sent when a guild is created/joined on the client",
        "value": "GUILD_CREATE"
      },
      {
        "name": "CHANNEL_CREATE",
        "description": "sent when a channel is created/joined on the client",
        "value": "CHANNEL_CREATE"
      },
      {
        "name": "VOICE_CHANNEL_SELECT",
        "description": "sent when the client joins a voice channel",
        "value": "VOICE_CHANNEL_SELECT"
      },
      {
        "name": "VOICE_STATE_CREATE",
        "description": "sent when a user joins a subscribed voice channel",
        "value": "VOICE_STATE_CREATE"
      },
      {
        "name": "VOICE_STATE_UPDATE",
        "description": "sent when a user's voice state changes in a subscribed voice channel (mute, volume, etc.)",
        "value": "VOICE_STATE_UPDATE"
      },
      {
        "name": "VOICE_STATE_DELETE",
        "description": "sent when a user parts a subscribed voice channel",
        "value": "VOICE_STATE_DELETE"
      },
      {
        "name": "VOICE_SETTINGS_UPDATE",
        "description": "sent when the client's voice settings update",
        "value": "VOICE_SETTINGS_UPDATE"
      },
      {
        "name": "VOICE_CONNECTION_STATUS",
        "description": "sent when the client's voice connection status changes",
        "value": "VOICE_CONNECTION_STATUS"
      },
      {
        "name": "SPEAKING_START",
        "description": "sent when a user in a subscribed voice channel speaks",
        "value": "SPEAKING_START"
      },
      {
        "name": "SPEAKING_STOP",
        "description": "sent when a user in a subscribed voice channel stops speaking",
        "value": "SPEAKING_STOP"
      },
      {
        "name": "MESSAGE_CREATE",
        "description": "sent when a message is created in a subscribed text channel",
        "value": "MESSAGE_CREATE"
      },
      {
        "name": "MESSAGE_UPDATE",
        "description": "sent when a message is updated in a subscribed text channel",
        "value": "MESSAGE_UPDATE"
      },
      {
        "name": "MESSAGE_DELETE",
        "description": "sent when a message is deleted in a subscribed text channel",
        "value": "MESSAGE_DELETE"
      },
      {
        "name": "NOTIFICATION_CREATE",
        "description": "sent when the client receives a notification (mention or new message in eligible channels)",
        "value": "NOTIFICATION_CREATE"
      },
      {
        "name": "ACTIVITY_JOIN",
        "description": "sent when the user clicks a Rich Presence join invite in chat to join a game",
        "value": "ACTIVITY_JOIN"
      },
      {
        "name": "ACTIVITY_SPECTATE",
        "description": "sent when the user clicks a Rich Presence spectate invite in chat to spectate a game",
        "value": "ACTIVITY_SPECTATE"
      },
      {
        "name": "ACTIVITY_JOIN_REQUEST",
        "description": "sent when the user receives a Rich Presence Ask to Join request",
        "value": "ACTIVITY_JOIN_REQUEST"
      }
    ],
    "description": "We also have an RPC token system to bypass the user authorization modal. This is usable by approved games as well as by users on a game's list of testers, and also disallows use of the `messages.read` scope. If you have been granted access, you can send a POST request to `https://discord.com/api/oauth2/token/rpc` with your application's `client_id` and `client_secret` in the body (sent as a url-encoded body, **not JSON**). You can then pass the returned `rpc_token` value to the `rpc_token` field in your RPC authorize request (documented below)."
  },
  {
    "name": "Key Types",
    "properties": [
      {
        "name": "KEYBOARD_KEY",
        "value": 0
      },
      {
        "name": "MOUSE_BUTTON",
        "value": 1
      },
      {
        "name": "KEYBOARD_MODIFIER_KEY",
        "value": 2
      },
      {
        "name": "GAMEPAD_BUTTON",
        "value": 3
      }
    ]
  },
  {
    "name": "Device Type",
    "properties": [
      {
        "name": "AUDIO_INPUT",
        "value": "\"audioinput\""
      },
      {
        "name": "AUDIO_OUTPUT",
        "value": "\"audiooutput\""
      },
      {
        "name": "VIDEO_INPUT",
        "value": "\"videoinput\""
      }
    ]
  },
  {
    "name": "Voice Connection States",
    "properties": [
      {
        "name": "DISCONNECTED",
        "description": "TCP disconnected",
        "value": "DISCONNECTED"
      },
      {
        "name": "AWAITING_ENDPOINT",
        "description": "Waiting for voice endpoint",
        "value": "AWAITING_ENDPOINT"
      },
      {
        "name": "AUTHENTICATING",
        "description": "TCP authenticating",
        "value": "AUTHENTICATING"
      },
      {
        "name": "CONNECTING",
        "description": "TCP connecting",
        "value": "CONNECTING"
      },
      {
        "name": "CONNECTED",
        "description": "TCP connected",
        "value": "CONNECTED"
      },
      {
        "name": "VOICE_DISCONNECTED",
        "description": "TCP connected, Voice disconnected",
        "value": "VOICE_DISCONNECTED"
      },
      {
        "name": "VOICE_CONNECTING",
        "description": "TCP connected, Voice connecting",
        "value": "VOICE_CONNECTING"
      },
      {
        "name": "VOICE_CONNECTED",
        "description": "TCP connected, Voice connected",
        "value": "VOICE_CONNECTED"
      },
      {
        "name": "NO_ROUTE",
        "description": "No route to host",
        "value": "NO_ROUTE"
      },
      {
        "name": "ICE_CHECKING",
        "description": "WebRTC ice checking",
        "value": "ICE_CHECKING"
      }
    ]
  },
  {
    "name": "Example Activity Join Request Dispatch Payload",
    "properties": []
  }
]
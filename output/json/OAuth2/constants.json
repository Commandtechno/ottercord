[
  {
    "name": "OAuth2 URLs",
    "values": [
      {
        "name": "https://discord.com/api/oauth2/authorize",
        "description": "Base authorization URL",
        "value": "https://discord.com/api/oauth2/authorize"
      },
      {
        "name": "https://discord.com/api/oauth2/token",
        "description": "Token URL",
        "value": "https://discord.com/api/oauth2/token"
      },
      {
        "name": "https://discord.com/api/oauth2/token/revoke",
        "description": "Token Revocation  URL",
        "value": "https://discord.com/api/oauth2/token/revoke"
      }
    ]
  },
  {
    "name": "OAuth2 Scopes",
    "values": [
      {
        "name": "activities.read",
        "description": "allows your app to fetch data from a user's \"Now Playing/Recently Played\" list - requires Discord approval",
        "value": "activities.read"
      },
      {
        "name": "activities.write",
        "description": "allows your app to update a user's activity - requires Discord approval (NOT REQUIRED FOR  GAMESDK ACTIVITY MANAGER )",
        "value": "activities.write"
      },
      {
        "name": "applications.builds.read",
        "description": "allows your app to read build data for a user's applications",
        "value": "applications.builds.read"
      },
      {
        "name": "applications.builds.upload",
        "description": "allows your app to upload/update builds for a user's applications - requires Discord approval",
        "value": "applications.builds.upload"
      },
      {
        "name": "applications.commands",
        "description": "allows your app to use  commands  in a guild",
        "value": "applications.commands"
      },
      {
        "name": "applications.commands.update",
        "description": "allows your app to update its  commands  via this bearer token -  client credentials grant  only",
        "value": "applications.commands.update"
      },
      {
        "name": "applications.entitlements",
        "description": "allows your app to read entitlements for a user's applications",
        "value": "applications.entitlements"
      },
      {
        "name": "applications.store.update",
        "description": "allows your app to read and update store data (SKUs, store listings, achievements, etc.) for a user's applications",
        "value": "applications.store.update"
      },
      {
        "name": "bot",
        "description": "for oauth2 bots, this puts the bot in the user's selected guild by default",
        "value": "bot"
      },
      {
        "name": "connections",
        "description": "allows  /users/@me/connections  to return linked third-party accounts",
        "value": "connections"
      },
      {
        "name": "email",
        "description": "enables  /users/@me  to return an  email",
        "value": "email"
      },
      {
        "name": "gdm.join",
        "description": "allows your app to  join users to a group dm",
        "value": "gdm.join"
      },
      {
        "name": "guilds",
        "description": "allows  /users/@me/guilds  to return basic information about all of a user's guilds",
        "value": "guilds"
      },
      {
        "name": "guilds.join",
        "description": "allows  /guilds/{guild.id}/members/{user.id}  to be used for joining users to a guild",
        "value": "guilds.join"
      },
      {
        "name": "guilds.members.read",
        "description": "allows  /users/@me/guilds/{guild.id}/member  to return a user's member information in a guild",
        "value": "guilds.members.read"
      },
      {
        "name": "identify",
        "description": "allows  /users/@me  without  email",
        "value": "identify"
      },
      {
        "name": "messages.read",
        "description": "for local rpc server api access, this allows you to read messages from all client channels (otherwise restricted to channels/guilds your app creates)",
        "value": "messages.read"
      },
      {
        "name": "relationships.read",
        "description": "allows your app to know a user's friends and implicit relationships - requires Discord approval",
        "value": "relationships.read"
      },
      {
        "name": "rpc",
        "description": "for local rpc server access, this allows you to control a user's local Discord client - requires Discord approval",
        "value": "rpc"
      },
      {
        "name": "rpc.activities.write",
        "description": "for local rpc server access, this allows you to update a user's activity - requires Discord approval",
        "value": "rpc.activities.write"
      },
      {
        "name": "rpc.notifications.read",
        "description": "for local rpc server access, this allows you to receive notifications pushed out to the user - requires Discord approval",
        "value": "rpc.notifications.read"
      },
      {
        "name": "rpc.voice.read",
        "description": "for local rpc server access, this allows you to read a user's voice settings and listen for voice events - requires Discord approval",
        "value": "rpc.voice.read"
      },
      {
        "name": "rpc.voice.write",
        "description": "for local rpc server access, this allows you to update a user's voice settings - requires Discord approval",
        "value": "rpc.voice.write"
      },
      {
        "name": "webhook.incoming",
        "description": "this generates a webhook that is returned in the oauth token response for authorization code grants",
        "value": "webhook.incoming"
      }
    ],
    "description": "These are a list of all the OAuth2 scopes that Discord supports. Some scopes require approval from Discord to use. Requesting them from a user without approval from Discord may cause errors or undocumented behavior in the OAuth2 flow."
  },
  {
    "name": "Authorization URL Example",
    "values": [
      {
        "name": "client_id",
        "description": "your app's client id",
        "value": "client_id"
      },
      {
        "name": "scope",
        "description": "needs to include  bot  for the bot flow",
        "value": "scope"
      },
      {
        "name": "permissions",
        "description": "the  permissions  you're requesting",
        "value": "permissions"
      },
      {
        "name": "guild_id",
        "description": "pre-fills the dropdown picker with a guild for the user",
        "value": "guild_id"
      },
      {
        "name": "disable_guild_select",
        "description": "true  or  false â€”disallows the user from changing the guild dropdown",
        "value": "disable_guild_select"
      }
    ],
    "description": "Bot authorization is a special server-less and callback-less OAuth2 flow that makes it easy for users to add bots to guilds. The URL you create looks similar to what we use for full stack implementation:"
  }
]